diff -Naur solvers/cadical/Makefile solvers/cdc/Makefile
--- solvers/cadical/Makefile	1970-01-01 10:00:00.000000000 +1000
+++ solvers/cdc/Makefile	2020-07-07 18:25:11.000000000 +1000
@@ -0,0 +1,42 @@
+### Makefile ---
+
+## Author: aign
+## Keywords:
+
+# main parameters
+CXX      := c++
+CXXFLAGS := -std=c++11 -fPIC -Wall -Wno-deprecated -fno-strict-aliasing -DQUIET
+CXXOPT   := -O3 -DNDEBUG
+CXXDEBUG := -O0 -g3
+CXXPROF  := -O3 -g3 -fno-inline -fno-omit-frame-pointer -pg -DNDEBUG
+INCLUDES := -I.
+LIBS     := -L.
+SOURCES  := analyze.cpp arena.cpp assume.cpp averages.cpp backtrack.cpp backward.cpp bins.cpp block.cpp ccadical.cpp checker.cpp clause.cpp collect.cpp compact.cpp config.cpp cover.cpp decide.cpp decompose.cpp deduplicate.cpp elim.cpp ema.cpp extend.cpp external.cpp file0.cpp flags.cpp format.cpp gates.cpp instantiate.cpp internal.cpp ipasir.cpp limit.cpp logging.cpp lucky.cpp message.cpp minimize.cpp occs.cpp options.cpp parse.cpp phases.cpp probe.cpp profile.cpp proof.cpp propagate.cpp queue.cpp random.cpp reduce.cpp rephase.cpp report.cpp resources.cpp restart.cpp restore.cpp score.cpp signal.cpp solution.cpp solver.cpp stats.cpp subsume.cpp terminal.cpp ternary.cpp tracer.cpp transred.cpp util.cpp var.cpp version.cpp vivify.cpp walk.cpp watch.cpp
+OBJECTS  := $(SOURCES:.cpp=.o)
+TRGT     := cadical
+
+# gather compiler options
+CXXARGS := $(CXXFLAGS) $(INCLUDES) $(CXXOPT)
+
+# targets
+.PHONY: all clean lib
+
+all: lib
+
+lib: build.hpp $(OBJECTS)
+	@-ar cr lib$(TRGT).a $(OBJECTS)
+
+build.hpp:
+	./make-build-header.sh > build.hpp
+
+%.o: %.cpp
+	$(CXX) $(CXXARGS) -c $< -o $@
+
+clean:
+	@-rm $(OBJECTS)
+
+allclean:
+	@-find . -name '*.o' -delete
+	@-find . -name '*.a' -delete
+
+#-------------------------------------------------------------------------------
diff -Naur solvers/cadical/build.hpp solvers/cdc/build.hpp
--- solvers/cadical/build.hpp	1970-01-01 10:00:00.000000000 +1000
+++ solvers/cdc/build.hpp	2020-07-07 18:25:11.000000000 +1000
@@ -0,0 +1,3 @@
+#define VERSION "1.0.2"
+#define IDENTIFIER "93cea3a86d42697a35af7ea477ef5214332f059f"
+#define DATE "Thu Jul 11 10:16:56 WEST 2019 Darwin antares.local 18.6.0 x86_64"
diff -Naur solvers/cadical/cadical.hpp solvers/cdc/cadical.hpp
--- solvers/cadical/cadical.hpp	2019-07-13 06:22:02.000000000 +1000
+++ solvers/cdc/cadical.hpp	2020-07-26 00:25:55.000000000 +1000
@@ -435,6 +435,11 @@
   int64_t redundant () const;   // Number of active redundant clauses.
   int64_t irredundant () const; // Number of active irredundant clauses.
 
+  int64_t conflicts () const;   // Number of conflicts.
+  int64_t decisions () const;   // Number of decisions.
+  int64_t restarts () const;   // Number of restarts.
+  int64_t propagations () const;   // Number of propagations.
+
   //------------------------------------------------------------------------
   // Same as 'solve' with 'limits ("conflicts", 0)' and
   //                      'limits ("preprocessing", rounds)'.
diff -Naur solvers/cadical/contract.hpp solvers/cdc/contract.hpp
--- solvers/cadical/contract.hpp	2019-07-13 06:22:02.000000000 +1000
+++ solvers/cdc/contract.hpp	2020-07-07 18:25:11.000000000 +1000
@@ -1,6 +1,10 @@
 #ifndef _contract_hpp_INCLUDED
 #define _contract_hpp_INCLUDED
 
+#ifdef _MSC_VER
+#define __PRETTY_FUNCTION__ __FUNCTION__
+#endif
+
 /*------------------------------------------------------------------------*/
 
 // If the user violates API contracts while calling functions declared in
diff -Naur solvers/cadical/file.hpp solvers/cdc/file.hpp
--- solvers/cadical/file.hpp	2019-07-13 06:22:02.000000000 +1000
+++ solvers/cdc/file.hpp	2020-07-07 18:25:11.000000000 +1000
@@ -9,6 +9,10 @@
 #include <climits>
 #endif
 
+#ifdef _MSC_VER
+#define NUNLOCKED
+#endif
+
 /*------------------------------------------------------------------------*/
 #ifndef NUNLOCKED
 #define cadical_putc_unlocked putc_unlocked
diff -Naur solvers/cadical/file0.cpp solvers/cdc/file0.cpp
--- solvers/cadical/file0.cpp	2019-07-13 06:22:02.000000000 +1000
+++ solvers/cdc/file0.cpp	2020-07-07 18:25:11.000000000 +1000
@@ -19,6 +19,19 @@
 
 /*------------------------------------------------------------------------*/
 
+#ifdef _MSC_VER
+#ifndef S_ISDIR
+#define S_ISDIR(mode)  (((mode) & S_IFMT) == S_IFDIR)
+#endif
+
+#ifndef S_ISREG
+#define S_ISREG(mode)  (((mode) & S_IFMT) == S_IFREG)
+#endif
+
+#define popen _popen
+#define pclose _pclose
+#endif
+
 // Private constructor.
 
 File::File (Internal *i, bool w, int c, FILE * f, const char * n)
diff -Naur solvers/cadical/make-build-header.sh solvers/cdc/make-build-header.sh
--- solvers/cadical/make-build-header.sh	2019-07-13 06:22:02.000000000 +1000
+++ solvers/cdc/make-build-header.sh	2020-07-07 18:25:11.000000000 +1000
@@ -19,17 +19,9 @@
 }
 
 #--------------------------------------------------------------------------#
-
-[ ! -f VERSION -a ! -f ../VERSION ] && \
-die "needs to be called from build sub-directory"
-
-[ -f makefile ] || \
-warning "could not find 'makefile'"
-
-#--------------------------------------------------------------------------#
 # The version.
 #
-VERSION="`cat ../VERSION`"
+VERSION="`cat VERSION.txt`"
 if [ x"$VERSION" = x ]
 then
   warning "could not determine 'VERSION'"
@@ -40,7 +32,7 @@
 #--------------------------------------------------------------------------#
 # The unique GIT hash.
 #
-IDENTIFIER="`../scripts/get-git-id.sh`"
+IDENTIFIER="`./get-git-id.sh`"
 if [ x"$IDENTIFIER" = x ]
 then
   warning "could not determine 'IDENTIFIER' (git id)"
@@ -51,9 +43,15 @@
 #--------------------------------------------------------------------------#
 # C++ compiler 'CXX' used in 'makefile'.
 #
-COMPILER="`sed -e '/^CXX=/!d' -e 's,^CXX=,,' makefile 2>/dev/null`"
-case x"$COMPILER" in 
-  xg++* | xclang++*)
+if [[ "$OSTYPE" == "darwin"* ]]; then
+  SEDMAC=-E
+else
+  SEDMAC=
+fi
+
+  COMPILER="`sed $SEDMAC -e '/^CXX[ \t]+:=/!d' -e 's,^CXX[ \t]+:= ,,' Makefile 2>/dev/null`"
+case x"$COMPILER" in
+  xc++* | xg++* | xclang++*)
     COMPILER="`$COMPILER --version 2>/dev/null|head -1`";;
   *) COMPILER="";;
 esac
@@ -67,7 +65,7 @@
 #--------------------------------------------------------------------------#
 # C++ compiler flags 'CXXFLAGS' used in 'makefile'.
 #
-FLAGS="`sed -e '/^CXXFLAGS=/!d' -e 's,^CXXFLAGS=,,' makefile 2>/dev/null`"
+FLAGS="`sed $SEDMAC -e '/^CXXFLAGS[ \t]+:=/!d' -e 's,^CXXFLAGS[ \t]+:= ,,' Makefile 2>/dev/null`"
 if [ x"$FLAGS" = x ]
 then
   warning "could not determine 'FLAGS' ('CXXFLAGS')"
diff -Naur solvers/cadical/resources.cpp solvers/cdc/resources.cpp
--- solvers/cadical/resources.cpp	2019-07-13 06:22:02.000000000 +1000
+++ solvers/cdc/resources.cpp	2020-07-07 18:25:11.000000000 +1000
@@ -6,8 +6,15 @@
 // TODO: port these functions to different OS.
 
 extern "C" {
+#ifndef _MSC_VER
 #include <sys/time.h>
 #include <sys/resource.h>
+#else
+#include <time.h>
+#include <windows.h>
+#include <psapi.h>
+#endif
+
 #include <sys/types.h>
 #include <unistd.h>
 #include <string.h>
@@ -15,6 +22,39 @@
 
 namespace CaDiCaL {
 
+#ifdef _MSC_VER
+#define WIN32_LEAN_AND_MEAN
+
+#include <stdint.h> // portable: uint64_t   MSVC: __int64
+
+// MSVC defines this in winsock2.h!?
+typedef struct timeval {
+    long tv_sec;
+    long tv_usec;
+} timeval;
+
+int gettimeofday(struct timeval * tp, struct timezone * tzp)
+{
+    // Note: some broken versions only have 8 trailing zero's, the correct epoch has 9 trailing zero's
+    // This magic number is the number of 100 nanosecond intervals since January 1, 1601 (UTC)
+    // until 00:00:00 January 1, 1970
+    static const uint64_t EPOCH = ((uint64_t) 116444736000000000ULL);
+
+    SYSTEMTIME  system_time;
+    FILETIME    file_time;
+    uint64_t    time;
+
+    GetSystemTime( &system_time );
+    SystemTimeToFileTime( &system_time, &file_time );
+    time =  ((uint64_t)file_time.dwLowDateTime )      ;
+    time += ((uint64_t)file_time.dwHighDateTime) << 32;
+
+    tp->tv_sec  = (long) ((time - EPOCH) / 10000000L);
+    tp->tv_usec = (long) (system_time.wMilliseconds * 1000);
+    return 0;
+}
+#endif
+
 double absolute_real_time () {
   struct timeval tv;
   if (gettimeofday (&tv, 0)) return 0;
@@ -32,12 +72,28 @@
 // etc.  For different variants of Unix not all fields are meaningful.
 
 double absolute_process_time () {
+#ifndef _MSC_VER
   struct rusage u;
   double res;
   if (getrusage (RUSAGE_SELF, &u)) return 0;
   res = u.ru_utime.tv_sec + 1e-6 * u.ru_utime.tv_usec;  // user time
   res += u.ru_stime.tv_sec + 1e-6 * u.ru_stime.tv_usec; // + system time
   return res;
+#else
+HANDLE hProcess;
+FILETIME creationTime;
+FILETIME exitTime;
+FILETIME kernelTime;
+FILETIME userTime;
+ULARGE_INTEGER wrkTime;
+hProcess=GetCurrentProcess();
+if (GetProcessTimes(hProcess,  &creationTime, &exitTime, &kernelTime, &userTime)) {
+    wrkTime.LowPart = userTime.dwLowDateTime;
+    wrkTime.HighPart = userTime.dwHighDateTime;
+    return wrkTime.QuadPart / 10000000.0;
+    }
+return 0;
+#endif
 }
 
 double Internal::process_time () {
@@ -49,9 +105,20 @@
 // This seems to work on Linux (man page says since Linux 2.6.32).
 
 size_t maximum_resident_set_size () {
+#ifndef _MSC_VER
   struct rusage u;
   if (getrusage (RUSAGE_SELF, &u)) return 0;
   return ((size_t) u.ru_maxrss) << 10;
+#else
+HANDLE hProcess;
+PROCESS_MEMORY_COUNTERS processMemoryCounters;
+
+hProcess=GetCurrentProcess();
+if (GetProcessMemoryInfo(hProcess,  &processMemoryCounters, sizeof(processMemoryCounters))) {
+    return processMemoryCounters.PeakWorkingSetSize;
+    }
+return 0;
+#endif
 }
 
 // Unfortunately 'getrusage' on Linux does not support current resident set
@@ -62,6 +129,7 @@
 // '_SC_PAGESIZE' are available).
 
 size_t current_resident_set_size () {
+#ifndef _MSC_VER
   char path[40];
   sprintf (path, "/proc/%" PRId64 "/statm", (int64_t) getpid ());
   FILE * file = fopen (path, "r");
@@ -70,6 +138,16 @@
   int scanned = fscanf (file, "%" PRId64 " %" PRId64 "", &dummy, &rss);
   fclose (file);
   return scanned == 2 ? rss * sysconf (_SC_PAGESIZE) : 0;
+#else
+HANDLE hProcess;
+PROCESS_MEMORY_COUNTERS processMemoryCounters;
+
+hProcess=GetCurrentProcess();
+if (GetProcessMemoryInfo(hProcess,  &processMemoryCounters, sizeof(processMemoryCounters))) {
+    return processMemoryCounters.WorkingSetSize;
+    }
+return 0;
+#endif
 }
 
 }
diff -Naur solvers/cadical/signal.cpp solvers/cdc/signal.cpp
--- solvers/cadical/signal.cpp	2019-07-13 06:22:02.000000000 +1000
+++ solvers/cdc/signal.cpp	2020-07-07 18:25:11.000000000 +1000
@@ -25,8 +25,12 @@
 static int alarm_time = -1;
 static Handler * signal_handler;
 
-void Handler::catch_alarm () { catch_signal (SIGALRM); }
-
+void Handler::catch_alarm () {
+#ifndef _MSC_VER
+catch_signal (SIGALRM);
+#endif
+}
+#ifndef _MSC_VER
 #define SIGNALS \
 SIGNAL(SIGABRT) \
 SIGNAL(SIGBUS) \
@@ -34,6 +38,14 @@
 SIGNAL(SIGSEGV) \
 SIGNAL(SIGTERM) \
 
+#else
+#define SIGNALS \
+SIGNAL(SIGABRT) \
+SIGNAL(SIGINT) \
+SIGNAL(SIGSEGV) \
+SIGNAL(SIGTERM) \
+
+#endif
 #define SIGNAL(SIG) \
 static void (*SIG ## _handler)(int);
 SIGNALS
@@ -42,7 +54,9 @@
 
 void Signal::reset_alarm () {
   if (!alarm_set) return;
+#ifndef _MSC_VER
   (void) signal (SIGALRM, SIGALRM_handler);
+#endif
   SIGALRM_handler = 0;
   caught_alarm = false;
   alarm_set = false;
@@ -65,7 +79,9 @@
   if (sig == SIG) return # SIG;
   SIGNALS
 #undef SIGNAL
+#ifndef _MSC_VER
   if (sig == SIGALRM) return "SIGALRM";
+#endif
   return "UNKNOWN";
 }
 
@@ -76,6 +92,7 @@
 // exclusive access to.  All these solutions are painful and not elegant.
 
 static void catch_signal (int sig) {
+#ifndef _MSC_VER
   if (sig == SIGALRM && absolute_real_time () >= alarm_time) {
     if (!caught_alarm) {
       caught_alarm = true;
@@ -83,13 +100,16 @@
     }
     Signal::reset_alarm ();
   } else {
+#endif
     if (!caught_signal) {
       caught_signal = true;
       if (signal_handler) signal_handler->catch_signal (sig);
     }
     Signal::reset ();
     ::raise (sig);
+#ifndef _MSC_VER
   }
+#endif
 }
 
 void Signal::set (Handler * h) {
@@ -104,10 +124,14 @@
   assert (seconds >= 0);
   assert (!alarm_set);
   assert (alarm_time < 0);
+#ifndef _MSC_VER
   SIGALRM_handler = signal (SIGALRM, catch_signal);
+#endif
   alarm_set = true;
   alarm_time = absolute_real_time () + seconds;
+#ifndef _MSC_VER
   ::alarm (seconds);
+#endif
 }
 
 }
diff -Naur solvers/cadical/solver.cpp solvers/cdc/solver.cpp
--- solvers/cadical/solver.cpp	2019-07-13 06:22:02.000000000 +1000
+++ solvers/cdc/solver.cpp	2020-07-26 00:29:31.000000000 +1000
@@ -664,6 +664,44 @@
   return res;
 }
 
+int64_t Solver::conflicts () const {
+  TRACE ("conflicts");
+  REQUIRE_VALID_STATE ();
+  int64_t res = internal->stats.conflicts;
+  LOG_API_CALL_RETURNS ("conflicts", res);
+  return res;
+}
+
+int64_t Solver::decisions () const {
+  TRACE ("decisions");
+  REQUIRE_VALID_STATE ();
+  int64_t res = internal->stats.decisions;
+  LOG_API_CALL_RETURNS ("decisions", res);
+  return res;
+}
+
+int64_t Solver::restarts () const {
+  TRACE ("restarts");
+  REQUIRE_VALID_STATE ();
+  int64_t res = internal->stats.restarts;
+  LOG_API_CALL_RETURNS ("restarts", res);
+  return res;
+}
+
+int64_t Solver::propagations () const {
+  TRACE ("propagations");
+  REQUIRE_VALID_STATE ();
+  int64_t res = 0;
+  res += internal->stats.propagations.cover;
+  res += internal->stats.propagations.probe;
+  res += internal->stats.propagations.search;
+  res += internal->stats.propagations.transred;
+  res += internal->stats.propagations.vivify;
+  res += internal->stats.propagations.walk;
+  LOG_API_CALL_RETURNS ("propagations", res);
+  return res;
+}
+
 /*------------------------------------------------------------------------*/
 
 void Solver::freeze (int lit) {
diff -Naur solvers/cadical/version.cpp solvers/cdc/version.cpp
--- solvers/cadical/version.cpp	2019-07-13 06:22:02.000000000 +1000
+++ solvers/cdc/version.cpp	2020-07-07 18:27:04.000000000 +1000
@@ -5,7 +5,7 @@
 // defining '-DNBUILD'.  Then we try to guess part of the configuration.
 
 #ifndef NBUILD
-#include <build.hpp>
+#include "build.hpp"
 #endif
 
 /*------------------------------------------------------------------------*/
diff --git solvers/cadical/VERSION solvers/cdc/VERSION
deleted file mode 100644
--- solvers/cadical/VERSION
+++ /dev/null
@@ -1 +0,0 @@
-1.0.3
