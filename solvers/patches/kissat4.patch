diff -Naur solvers/kissat4/allocate.cc solvers/kissat4/allocate.cc
--- solvers/kissat4/allocate.cc	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/allocate.cc	2024-10-31 01:54:52.185968248 +0300
@@ -1,7 +1,7 @@
-#include "allocate.h"
-#include "error.h"
-#include "internal.h"
-#include "logging.h"
+#include "kissat4/allocate.hh"
+#include "kissat4/error.hh"
+#include "kissat4/internal.hh"
+#include "kissat4/logging.hh"
 
 #undef LOGPREFIX
 #define LOGPREFIX "ALLOCATE"
@@ -12,6 +12,8 @@
 #include <inttypes.h>
 #endif
 
+namespace kissat4 {
+
 static void inc_bytes (kissat *solver, size_t bytes) {
 #ifdef METRICS
   if (!solver)
@@ -139,3 +141,5 @@
                   n, size);
   return kissat_realloc (solver, p, o * size, n * size);
 }
+
+} // namespace kissat4
\ No newline at end of file
diff -Naur solvers/kissat4/allocate.hh solvers/kissat4/allocate.hh
--- solvers/kissat4/allocate.hh	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/allocate.hh	2024-10-31 01:54:52.185968248 +0300
@@ -1,8 +1,10 @@
-#ifndef _allocate_h_INCLUDED
-#define _allocate_h_INCLUDED
+#ifndef _kissat4_allocate_h_INCLUDED
+#define _kissat4_allocate_h_INCLUDED
 
 #include <stdlib.h>
 
+namespace kissat4 {
+
 struct kissat;
 
 void *kissat_malloc (struct kissat *, size_t bytes);
@@ -15,14 +17,16 @@
 void *kissat_realloc (struct kissat *, void *, size_t old, size_t bytes);
 void *kissat_nrealloc (struct kissat *, void *, size_t o, size_t n, size_t);
 
+} // namespace kissat4
+
 #define NALLOC(P, N) \
   do { \
-    (P) = kissat_nalloc (solver, (N), sizeof *(P)); \
+    (P) = (decltype(&*P)) kissat_nalloc (solver, (N), sizeof *(P)); \
   } while (0)
 
 #define CALLOC(P, N) \
   do { \
-    (P) = kissat_calloc (solver, (N), sizeof *(P)); \
+    (P) = (decltype(&*P)) kissat_calloc (solver, (N), sizeof *(P)); \
   } while (0)
 
 #define DEALLOC(P, N) \
diff -Naur solvers/kissat4/analyze.cc solvers/kissat4/analyze.cc
--- solvers/kissat4/analyze.cc	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/analyze.cc	2024-10-31 01:54:52.185968248 +0300
@@ -1,18 +1,20 @@
-#include "analyze.h"
-#include "backtrack.h"
-#include "bump.h"
-#include "deduce.h"
-#include "inline.h"
-#include "learn.h"
-#include "minimize.h"
-#include "print.h"
-#include "rank.h"
-#include "shrink.h"
-#include "sort.h"
-#include "tiers.h"
+#include "kissat4/analyze.hh"
+#include "kissat4/backtrack.hh"
+#include "kissat4/bump.hh"
+#include "kissat4/deduce.hh"
+#include "kissat4/inline.hh"
+#include "kissat4/learn.hh"
+#include "kissat4/minimize.hh"
+#include "kissat4/print.hh"
+#include "kissat4/rank.hh"
+#include "kissat4/shrink.hh"
+#include "kissat4/sort.hh"
+#include "kissat4/tiers.hh"
 
 #include <inttypes.h>
 
+namespace kissat4 {
+
 static bool one_literal_on_conflict_level (kissat *solver, clause *conflict,
                                            unsigned *conflict_level_ptr) {
   assert (conflict);
@@ -577,3 +579,5 @@
   STOP (analyze);
   return res > 0 ? 0 : 20;
 }
+
+} // namespace kissat4 
\ No newline at end of file
diff -Naur solvers/kissat4/analyze.hh solvers/kissat4/analyze.hh
--- solvers/kissat4/analyze.hh	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/analyze.hh	2024-10-31 01:54:52.185968248 +0300
@@ -1,12 +1,16 @@
-#ifndef _analyze_h_INCLUDED
-#define _analyze_h_INCLUDED
+#ifndef _kissat4_analyze_h_INCLUDED
+#define _kissat4_analyze_h_INCLUDED
 
 #include <stdbool.h>
 
+namespace kissat4 {
+
 struct clause;
 struct kissat;
 
 int kissat_analyze (struct kissat *, struct clause *);
 void kissat_reset_only_analyzed_literals (struct kissat *);
 
+} // namespace kissat4 
+
 #endif
diff -Naur solvers/kissat4/ands.cc solvers/kissat4/ands.cc
--- solvers/kissat4/ands.cc	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/ands.cc	2024-10-31 01:54:52.185968248 +0300
@@ -1,7 +1,9 @@
-#include "ands.h"
-#include "eliminate.h"
-#include "gates.h"
-#include "inline.h"
+#include "kissat4/ands.hh"
+#include "kissat4/eliminate.hh"
+#include "kissat4/gates.hh"
+#include "kissat4/inline.hh"
+
+namespace kissat4 {
 
 bool kissat_find_and_gate (kissat *solver, unsigned lit,
                            unsigned negative) {
@@ -86,3 +88,5 @@
   INC (ands_extracted);
   return true;
 }
+
+} // namespace kissat4
\ No newline at end of file
diff -Naur solvers/kissat4/ands.hh solvers/kissat4/ands.hh
--- solvers/kissat4/ands.hh	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/ands.hh	2024-10-31 01:54:52.185968248 +0300
@@ -1,11 +1,15 @@
-#ifndef _ands_h_INCLUDED
-#define _ands_h_INCLUDED
+#ifndef _kissat4_ands_h_INCLUDED
+#define _kissat4_ands_h_INCLUDED
 
 #include <stdbool.h>
 
+namespace kissat4 {
+
 struct kissat;
 
 bool kissat_find_and_gate (struct kissat *, unsigned lit,
                            unsigned negative);
 
+} // namespace kissat4
+
 #endif
diff -Naur solvers/kissat4/application.cc solvers/kissat4/application.cc
--- solvers/kissat4/application.cc	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/application.cc	2024-10-31 01:54:52.185968248 +0300
@@ -1,16 +1,16 @@
-#include "application.h"
-#include "check.h"
-#include "colors.h"
-#include "config.h"
-#include "error.h"
-#include "internal.h"
-#include "keatures.h"
-#include "krite.h"
-#include "parse.h"
-#include "print.h"
-#include "proof.h"
-#include "resources.h"
-#include "witness.h"
+#include "kissat4/application.hh"
+#include "kissat4/check.hh"
+#include "kissat4/colors.hh"
+#include "kissat4/config.hh"
+#include "kissat4/error.hh"
+#include "kissat4/internal.hh"
+#include "kissat4/keatures.hh"
+#include "kissat4/krite.hh"
+#include "kissat4/parse.hh"
+#include "kissat4/print.hh"
+#include "kissat4/proof.hh"
+#include "kissat4/resources.hh"
+#include "kissat4/witness.hh"
 
 #include <inttypes.h>
 #include <string.h>
@@ -18,6 +18,8 @@
 
 #define SOLVER_NAME "Kissat SAT Solver"
 
+namespace kissat4 {
+
 typedef struct application application;
 
 struct application {
@@ -464,7 +466,9 @@
         if (time_option)
           ERROR ("multiple '%s' and '%s'", time_option, arg);
         application->time = val;
+#ifndef _MSC_VER
         alarm (val);
+#endif
       } else
         ERROR ("invalid argument in '%s' (try '-h')", arg);
     } else if ((valstr = kissat_parse_option_name (arg, "conflicts"))) {
@@ -871,7 +875,12 @@
 int kissat_application (kissat *solver, int argc, char **argv) {
   bool cancel_alarm;
   int res = run_application (solver, argc, argv, &cancel_alarm);
+  
+#ifndef _MSC_VER
   if (cancel_alarm)
     alarm (0);
+#endif
   return res;
 }
+
+} // namespace kissat4
\ No newline at end of file
diff -Naur solvers/kissat4/application.hh solvers/kissat4/application.hh
--- solvers/kissat4/application.hh	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/application.hh	2024-10-31 01:54:52.185968248 +0300
@@ -1,8 +1,12 @@
-#ifndef _application_h_INCLUDED
-#define _application_h_INCLUDED
+#ifndef _kissat4_application_h_INCLUDED
+#define _kissat4_application_h_INCLUDED
+
+namespace kissat4 {
 
 struct kissat;
 
 int kissat_application (struct kissat *, int argc, char **argv);
 
+} // namespace kissat4
+
 #endif
diff -Naur solvers/kissat4/arena.cc solvers/kissat4/arena.cc
--- solvers/kissat4/arena.cc	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/arena.cc	2024-10-31 01:54:52.185968248 +0300
@@ -1,7 +1,9 @@
-#include "error.h"
-#include "internal.h"
-#include "logging.h"
-#include "print.h"
+#include "kissat4/error.hh"
+#include "kissat4/internal.hh"
+#include "kissat4/logging.hh"
+#include "kissat4/print.hh"
+
+namespace kissat4 {
 
 static void report_resized (kissat *solver, const char *mode,
                             arena before) {
@@ -106,3 +108,5 @@
 }
 
 #endif
+
+} // namespace kissat4
\ No newline at end of file
diff -Naur solvers/kissat4/arena.hh solvers/kissat4/arena.hh
--- solvers/kissat4/arena.hh	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/arena.hh	2024-10-31 01:54:52.185968248 +0300
@@ -1,9 +1,11 @@
-#ifndef _arena_h_INCLUDED
-#define _arena_h_INCLUDED
+#ifndef _kissat4_arena_h_INCLUDED
+#define _kissat4_arena_h_INCLUDED
 
-#include "reference.h"
-#include "stack.h"
-#include "utilities.h"
+#include "kissat4/reference.hh"
+#include "kissat4/stack.hh"
+#include "kissat4/utilities.hh"
+
+namespace kissat4 {
 
 #ifdef COMPACT
 typedef word ward;
@@ -43,4 +45,6 @@
 #endif
 }
 
-#endif
+} // namespace kissat4
+
+#endif
\ No newline at end of file
diff -Naur solvers/kissat4/array.hh solvers/kissat4/array.hh
--- solvers/kissat4/array.hh	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/array.hh	2024-10-31 01:54:52.185968248 +0300
@@ -1,8 +1,8 @@
-#ifndef _array_h_INCLUDED
-#define _array_h_INCLUDED
+#ifndef _kissat4_array_h_INCLUDED
+#define _kissat4_array_h_INCLUDED
 
-#include "allocate.h"
-#include "stack.h"
+#include "kissat4/allocate.hh"
+#include "kissat4/stack.hh"
 
 #define ARRAY(TYPE) \
   struct { \
@@ -28,7 +28,7 @@
 #define REALLOCATE_ARRAY(A, O, N) \
   do { \
     const size_t SIZE = SIZE_ARRAY (A); \
-    (A).begin = \
+    (A).begin = (decltype((A).begin)) \
         kissat_nrealloc (solver, (A).begin, (O), (N), sizeof *(A).begin); \
     (A).end = (A).begin + SIZE; \
   } while (0)
@@ -49,10 +49,14 @@
 #define RESIZE_ARRAY RESIZE_STACK
 #define SET_END_OF_ARRAY SET_END_OF_STACK
 
+namespace kissat4 {
+
 // clang-format off
 
 typedef ARRAY (unsigned) unsigned_array;
 
 // clang-format on
 
+} // namespace kissat4
+
 #endif
diff -Naur solvers/kissat4/assign.cc solvers/kissat4/assign.cc
--- solvers/kissat4/assign.cc	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/assign.cc	2024-10-31 01:54:52.185968248 +0300
@@ -1,10 +1,12 @@
-#include "assign.h"
-#include "inline.h"
-#include "inlineassign.h"
-#include "logging.h"
+#include "kissat4/assign.hh"
+#include "kissat4/inline.hh"
+#include "kissat4/inlineassign.hh"
+#include "kissat4/logging.hh"
 
 #include <limits.h>
 
+namespace kissat4 {
+
 void kissat_assign_unit (kissat *solver, unsigned lit, const char *reason) {
   kissat_assign (solver, solver->probing, 0, false, lit, UNIT_REASON);
   LOGUNARY (lit, "assign %s %s", LOGLIT (lit), reason);
@@ -57,3 +59,5 @@
   kissat_assign (solver, solver->probing, level, false, lit, ref);
   LOGREF (ref, "assign %s reason", LOGLIT (lit));
 }
+
+} // namespace kissat4
\ No newline at end of file
diff -Naur solvers/kissat4/assign.hh solvers/kissat4/assign.hh
--- solvers/kissat4/assign.hh	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/assign.hh	2024-10-31 01:54:52.185968248 +0300
@@ -1,5 +1,5 @@
-#ifndef _assign_h_INCLUDED
-#define _assign_h_INCLUDED
+#ifndef _kissat4_assign_h_INCLUDED
+#define _kissat4_assign_h_INCLUDED
 
 #include <stdbool.h>
 
@@ -9,6 +9,8 @@
 #define INVALID_LEVEL UINT_MAX
 #define INVALID_TRAIL UINT_MAX
 
+namespace kissat4 {
+
 typedef struct assigned assigned;
 struct clause;
 
@@ -25,6 +27,8 @@
   unsigned reason;
 };
 
+} // namespace kissat4
+
 #define ASSIGNED(LIT) \
   (assert (VALID_INTERNAL_LITERAL (LIT)), solver->assigned + IDX (LIT))
 
@@ -34,7 +38,9 @@
 
 #ifndef FAST_ASSIGN
 
-#include "reference.h"
+#include "kissat4/reference.hh"
+
+namespace kissat4 {
 
 struct kissat;
 struct clause;
@@ -50,6 +56,9 @@
 void kissat_assign_reference (struct kissat *, unsigned lit, reference,
                               struct clause *);
 
-#endif
+
+} // namespace kissat4
 
 #endif
+
+#endif
\ No newline at end of file
diff -Naur solvers/kissat4/attribute.hh solvers/kissat4/attribute.hh
--- solvers/kissat4/attribute.hh	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/attribute.hh	2024-10-31 01:54:52.185968248 +0300
@@ -1,10 +1,30 @@
-#ifndef _attribute_h_INCLUDED
-#define _attribute_h_INCLUDED
+#ifndef _kissat4_attribute_h_INCLUDED
+#define _kissat4_attribute_h_INCLUDED
 
-#define ATTRIBUTE_FORMAT(FORMAT_POSITION, VARIADIC_ARGUMENT_POSITION) \
+#ifndef _MSC_VER
+
+#define KISSAT_ATTRIBUTE_PRINTF_ARG
+#define KISSAT_ATTRIBUTE_FORMAT(FORMAT_POSITION, VARIADIC_ARGUMENT_POSITION) \
   __attribute__ (( \
       format (printf, FORMAT_POSITION, VARIADIC_ARGUMENT_POSITION)))
 
-#define ATTRIBUTE_ALWAYS_INLINE __attribute__ ((always_inline))
+#define KISSAT_ATTRIBUTE_ALWAYS_INLINE inline __attribute__ ((always_inline))
+
+#else
+
+#include <sal.h>
+
+#if _MSC_VER >= 1910
+#include <sal.h>
+#define KISSAT_ATTRIBUTE_PRINTF_ARG _Printf_format_string_
+#else
+#define KISSAT_ATTRIBUTE_PRINTF_ARG
+#endif
+
+#define KISSAT_ATTRIBUTE_FORMAT(FORMAT_POSITION, VARIADIC_ARGUMENT_POSITION) 
+
+#define KISSAT_ATTRIBUTE_ALWAYS_INLINE __forceinline
+
+#endif
 
 #endif
diff -Naur solvers/kissat4/averages.cc solvers/kissat4/averages.cc
--- solvers/kissat4/averages.cc	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/averages.cc	2024-10-31 01:54:52.185968248 +0300
@@ -1,4 +1,6 @@
-#include "internal.h"
+#include "kissat4/internal.hh"
+
+namespace kissat4 {
 
 void kissat_init_averages (kissat *solver, averages *averages) {
   if (averages->initialized)
@@ -15,3 +17,5 @@
   INIT_EMA (decision_rate, GET_OPTION (emaslow));
   averages->initialized = true;
 }
+
+} // namespace kissat4
diff -Naur solvers/kissat4/averages.hh solvers/kissat4/averages.hh
--- solvers/kissat4/averages.hh	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/averages.hh	2024-10-31 01:54:52.185968248 +0300
@@ -1,10 +1,12 @@
-#ifndef _averages_h_INCLUDED
-#define _averages_h_INCLUDED
+#ifndef _kissat4_averages_h_INCLUDED
+#define _kissat4_averages_h_INCLUDED
 
-#include "smooth.h"
+#include "kissat4/smooth.hh"
 
 #include <stdbool.h>
 
+namespace kissat4 {
+
 typedef struct averages averages;
 
 struct averages {
@@ -21,6 +23,8 @@
 
 void kissat_init_averages (struct kissat *, averages *);
 
+} // namespace kissat4
+
 #define AVERAGES (solver->averages[solver->stable])
 
 #define EMA(NAME) (AVERAGES.NAME)
diff -Naur solvers/kissat4/backbone.cc solvers/kissat4/backbone.cc
--- solvers/kissat4/backbone.cc	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/backbone.cc	2024-10-31 01:54:52.185968248 +0300
@@ -1,17 +1,19 @@
-#include "backbone.h"
-#include "allocate.h"
-#include "analyze.h"
-#include "backtrack.h"
-#include "decide.h"
-#include "inline.h"
-#include "internal.h"
-#include "logging.h"
-#include "print.h"
-#include "proprobe.h"
-#include "report.h"
-#include "terminate.h"
-#include "trail.h"
-#include "utilities.h"
+#include "kissat4/backbone.hh"
+#include "kissat4/allocate.hh"
+#include "kissat4/analyze.hh"
+#include "kissat4/backtrack.hh"
+#include "kissat4/decide.hh"
+#include "kissat4/inline.hh"
+#include "kissat4/internal.hh"
+#include "kissat4/logging.hh"
+#include "kissat4/print.hh"
+#include "kissat4/proprobe.hh"
+#include "kissat4/report.hh"
+#include "kissat4/terminate.hh"
+#include "kissat4/trail.hh"
+#include "kissat4/utilities.hh"
+
+namespace kissat4 {
 
 static void schedule_backbone_candidates (kissat *solver,
                                           unsigneds *candidates) {
@@ -596,3 +598,5 @@
 #endif
   STOP (backbone);
 }
+
+} // namespace kissat4
diff -Naur solvers/kissat4/backbone.hh solvers/kissat4/backbone.hh
--- solvers/kissat4/backbone.hh	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/backbone.hh	2024-10-31 01:54:52.185968248 +0300
@@ -1,9 +1,13 @@
-#ifndef _backbone_h_INCLUDED
-#define _backbone_h_INCLUDED
+#ifndef _kissat4_backbone_h_INCLUDED
+#define _kissat4_backbone_h_INCLUDED
 
 #include <stdbool.h>
 
+namespace kissat4 {
+
 struct kissat;
 void kissat_binary_clauses_backbone (struct kissat *);
 
+} // namespace kissat4
+
 #endif
diff -Naur solvers/kissat4/backtrack.cc solvers/kissat4/backtrack.cc
--- solvers/kissat4/backtrack.cc	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/backtrack.cc	2024-10-31 01:54:52.185968248 +0300
@@ -1,12 +1,14 @@
-#include "backtrack.h"
-#include "analyze.h"
-#include "inline.h"
-#include "inlineheap.h"
-#include "inlinequeue.h"
-#include "print.h"
-#include "proprobe.h"
-#include "propsearch.h"
-#include "trail.h"
+#include "kissat4/backtrack.hh"
+#include "kissat4/analyze.hh"
+#include "kissat4/inline.hh"
+#include "kissat4/inlineheap.hh"
+#include "kissat4/inlinequeue.hh"
+#include "kissat4/print.hh"
+#include "kissat4/proprobe.hh"
+#include "kissat4/propsearch.hh"
+#include "kissat4/trail.hh"
+
+namespace kissat4 {
 
 static inline void unassign (kissat *solver, value *values, unsigned lit) {
   LOG ("unassign %s", LOGLIT (lit));
@@ -69,7 +71,7 @@
   }
 }
 
-void kissat_backtrack_without_updating_phases (kissat *solver,
+void kissat_backtrack_without_updating_phases(kissat *solver,
                                                unsigned new_level) {
   assert (solver->level >= new_level);
   if (solver->level == new_level)
@@ -175,3 +177,5 @@
   assert (kissat_propagated (solver));
   assert (kissat_trail_flushed (solver));
 }
+
+} // namespace kissat4
diff -Naur solvers/kissat4/backtrack.hh solvers/kissat4/backtrack.hh
--- solvers/kissat4/backtrack.hh	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/backtrack.hh	2024-10-31 01:54:52.185968248 +0300
@@ -1,5 +1,7 @@
-#ifndef _backtrack_h_INCLUDED
-#define _backtrack_h_INCLUDED
+#ifndef _kissat4_backtrack_h_INCLUDED
+#define _kissat4_backtrack_h_INCLUDED
+
+namespace kissat4 {
 
 struct kissat;
 
@@ -8,4 +10,6 @@
 void kissat_backtrack_after_conflict (struct kissat *, unsigned);
 void kissat_backtrack_propagate_and_flush_trail (struct kissat *);
 
+} // namespace kissat4
+
 #endif
diff -Naur solvers/kissat4/build.cc solvers/kissat4/build.cc
--- solvers/kissat4/build.cc	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/build.cc	2024-10-31 01:54:52.185968248 +0300
@@ -1,10 +1,12 @@
-#include "build.h"
-#include "colors.h"
-#include "kissat.h"
-#include "print.h"
+#include "kissat4/build.hh"
+#include "kissat4/colors.hh"
+#include "kissat4/kissat.hh"
+#include "kissat4/print.hh"
 
 #include <stdio.h>
 
+namespace kissat4 {
+
 const char *kissat_signature (void) { return "kissat-" VERSION; }
 
 const char *kissat_id (void) { return ID; }
@@ -79,3 +81,5 @@
 
   kissat_build (prefix);
 }
+
+} // namespace kissat4
diff -Naur solvers/kissat4/build.hh solvers/kissat4/build.hh
--- solvers/kissat4/build.hh	1970-01-01 03:00:00.000000000 +0300
+++ solvers/kissat4/build.hh	2024-10-31 01:54:52.257971697 +0300
@@ -0,0 +1,4 @@
+#define VERSION "4.0.1"
+#define COMPILER "c++ "
+#define ID "ee47c0944bd9b2a31a5a435a776364d301614c1c"
+#define BUILD "Thu 31 Oct 2024 01:54:52 AM +03 Linux t4chine 6.5.0-44-generic x86_64"
diff -Naur solvers/kissat4/bump.cc solvers/kissat4/bump.cc
--- solvers/kissat4/bump.cc	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/bump.cc	2024-10-31 01:54:52.185968248 +0300
@@ -1,19 +1,21 @@
-#include "bump.h"
-#include "analyze.h"
-#include "inlineheap.h"
-#include "inlinequeue.h"
-#include "inlinevector.h"
-#include "internal.h"
-#include "logging.h"
-#include "print.h"
-#include "rank.h"
-#include "sort.h"
+#include "kissat4/bump.hh"
+#include "kissat4/analyze.hh"
+#include "kissat4/inlineheap.hh"
+#include "kissat4/inlinequeue.hh"
+#include "kissat4/inlinevector.hh"
+#include "kissat4/internal.hh"
+#include "kissat4/logging.hh"
+#include "kissat4/print.hh"
+#include "kissat4/rank.hh"
+#include "kissat4/sort.hh"
 
 #define RANK(A) ((A).rank)
 #define SMALLER(A, B) (RANK (A) < RANK (B))
 
 #define RADIX_SORT_BUMP_LIMIT 32
 
+namespace kissat4 {
+
 static void sort_bump (kissat *solver) {
   const size_t size = SIZE_STACK (solver->analyzed);
   if (size < RADIX_SORT_BUMP_LIMIT) {
@@ -83,7 +85,7 @@
   const links *const links = solver->links;
   for (all_stack (unsigned, idx, solver->analyzed)) {
     // clang-format off
-    const datarank rank = { .data = idx, .rank = links[idx].stamp };
+    const datarank rank = { idx, links[idx].stamp };
     // clang-format on
     PUSH_STACK (solver->ranks, rank);
   }
@@ -118,3 +120,5 @@
     if (ACTIVE (idx) && !kissat_heap_contains (scores, idx))
       kissat_push_heap (solver, scores, idx);
 }
+
+} // namespace kissat4
diff -Naur solvers/kissat4/bump.hh solvers/kissat4/bump.hh
--- solvers/kissat4/bump.hh	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/bump.hh	2024-10-31 01:54:52.185968248 +0300
@@ -1,8 +1,10 @@
-#ifndef _bump_h_INCLUDED
-#define _bump_h_INCLUDED
+#ifndef _kissat4_bump_h_INCLUDED
+#define _kissat4_bump_h_INCLUDED
 
 #include <stdbool.h>
 
+namespace kissat4 {
+    
 struct kissat;
 
 void kissat_bump_analyzed (struct kissat *);
@@ -11,6 +13,8 @@
 void kissat_bump_variable (struct kissat *, unsigned idx);
 void kissat_bump_score_increment (struct kissat *);
 
+} // namespace kissat4
+
 #define MAX_SCORE 1e150
 
 #endif
diff -Naur solvers/kissat4/check.cc solvers/kissat4/check.cc
--- solvers/kissat4/check.cc	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/check.cc	2024-10-31 01:54:52.185968248 +0300
@@ -1,11 +1,11 @@
 #ifndef NDEBUG
 
-#include "check.h"
-#include "error.h"
-#include "internal.h"
-#include "literal.h"
-#include "logging.h"
-#include "print.h"
+#include "kissat4/check.hh"
+#include "kissat4/error.hh"
+#include "kissat4/internal.hh"
+#include "kissat4/literal.hh"
+#include "kissat4/logging.hh"
+#include "kissat4/print.hh"
 
 #include <limits.h>
 #include <stdio.h>
@@ -49,9 +49,9 @@
   LOG ("assignment satisfies all %zu original clauses", count);
 }
 
-#include "allocate.h"
-#include "inline.h"
-#include "sort.h"
+#include "kissat4/allocate.hh"
+#include "kissat4/inline.hh"
+#include "kissat4/sort.hh"
 
 typedef struct hash hash;
 typedef struct bucket bucket;
diff -Naur solvers/kissat4/check.hh solvers/kissat4/check.hh
--- solvers/kissat4/check.hh	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/check.hh	2024-10-31 01:54:52.185968248 +0300
@@ -1,5 +1,5 @@
-#ifndef _check_h_INCLUDED
-#define _check_h_INCLUDED
+#ifndef _kissat4_check_h_INCLUDED
+#define _kissat4_check_h_INCLUDED
 
 #ifndef NDEBUG
 
diff -Naur solvers/kissat4/classify.cc solvers/kissat4/classify.cc
--- solvers/kissat4/classify.cc	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/classify.cc	2024-10-31 01:54:52.185968248 +0300
@@ -1,16 +1,18 @@
-#include "classify.h"
-#include "internal.h"
-#include "print.h"
+#include "kissat4/classify.hh"
+#include "kissat4/internal.hh"
+#include "kissat4/print.hh"
+
+namespace kissat4 {
 
 void kissat_classify (struct kissat *solver) {
   statistics *s = &solver->statistics;
   uint64_t clauses = s->clauses_binary + s->clauses_irredundant;
   unsigned small_clauses_limit = GET_OPTION (smallclauses);
   if (clauses <= small_clauses_limit) {
-    solver->classification.small = true;
+    solver->classification.small_ = true;
     solver->classification.bigbig = false;
   } else {
-    solver->classification.small = false;
+    solver->classification.small_ = false;
     unsigned bigbigfraction = GET_OPTION (bigbigfraction);
     double percent = bigbigfraction / 1000.0;
     double actual = kissat_percent (s->clauses_binary, clauses);
@@ -21,8 +23,10 @@
   }
   kissat_very_verbose (
       solver, "formula classified as having a %s total number of clauses",
-      solver->classification.small ? "small" : "large");
+      solver->classification.small_ ? "small" : "large");
   kissat_very_verbose (
       solver, "formula classified to have a %s binary clauses fraction",
       solver->classification.bigbig ? "large" : "small");
 }
+
+} // namespace kissat4
diff -Naur solvers/kissat4/classify.hh solvers/kissat4/classify.hh
--- solvers/kissat4/classify.hh	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/classify.hh	2024-10-31 01:54:52.185968248 +0300
@@ -1,12 +1,14 @@
-#ifndef _classify_h_INCLUDED
-#define _classify_h_INCLUDED
+#ifndef _kissat4_classify_h_INCLUDED
+#define _kissat4_classify_h_INCLUDED
 
 #include <stdbool.h>
 
+namespace kissat4 {
+
 struct kissat;
 
 struct classification {
-  bool small;
+  bool small_;
   bool bigbig;
 };
 
@@ -14,4 +16,6 @@
 
 void kissat_classify (struct kissat *);
 
+} // namespace kissat4
+
 #endif
diff -Naur solvers/kissat4/clause.cc solvers/kissat4/clause.cc
--- solvers/kissat4/clause.cc	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/clause.cc	2024-10-31 01:54:52.185968248 +0300
@@ -1,9 +1,11 @@
-#include "allocate.h"
-#include "collect.h"
-#include "inline.h"
+#include "kissat4/allocate.hh"
+#include "kissat4/collect.hh"
+#include "kissat4/inline.hh"
 
 #include <string.h>
 
+namespace kissat4 {
+
 static void inc_clause (kissat *solver, bool original, bool redundant,
                         bool binary) {
   if (binary)
@@ -185,3 +187,5 @@
   dec_clause (solver, false, true);
   INC (clauses_deleted);
 }
+
+} // namespace kissat4
diff -Naur solvers/kissat4/clause.hh solvers/kissat4/clause.hh
--- solvers/kissat4/clause.hh	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/clause.hh	2024-10-31 01:54:52.185968248 +0300
@@ -1,13 +1,15 @@
-#ifndef _clause_h_INCLUDED
-#define _clause_h_INCLUDED
+#ifndef _kissat4_clause_h_INCLUDED
+#define _kissat4_clause_h_INCLUDED
 
-#include "arena.h"
-#include "literal.h"
-#include "reference.h"
-#include "utilities.h"
+#include "kissat4/arena.hh"
+#include "kissat4/literal.hh"
+#include "kissat4/reference.hh"
+#include "kissat4/utilities.hh"
 
 #include <stdbool.h>
 
+namespace kissat4 {
+
 typedef struct clause clause;
 
 #define LD_MAX_GLUE 19
@@ -87,4 +89,6 @@
 
 void kissat_mark_clause_as_garbage (struct kissat *, clause *);
 
+} // namespace kissat4
+
 #endif
diff -Naur solvers/kissat4/collect.cc solvers/kissat4/collect.cc
--- solvers/kissat4/collect.cc	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/collect.cc	2024-10-31 01:54:52.185968248 +0300
@@ -1,18 +1,20 @@
 #define INLINE_SORT
 
-#include "collect.h"
-#include "allocate.h"
-#include "colors.h"
-#include "compact.h"
-#include "inline.h"
-#include "print.h"
-#include "report.h"
-#include "sort.c"
-#include "trail.h"
+#include "kissat4/collect.hh"
+#include "kissat4/allocate.hh"
+#include "kissat4/colors.hh"
+#include "kissat4/compact.hh"
+#include "kissat4/inline.hh"
+#include "kissat4/print.hh"
+#include "kissat4/report.hh"
+#include "kissat4/sort.cc"
+#include "kissat4/trail.hh"
 
 #include <inttypes.h>
 #include <string.h>
 
+namespace kissat4 {
+
 static void flush_watched_clauses_by_literal (kissat *solver, unsigned lit,
                                               bool compact,
                                               reference start) {
@@ -736,3 +738,5 @@
   REPORT (1, 'C');
   STOP (collect);
 }
+
+} // namespace kissat4
diff -Naur solvers/kissat4/collect.hh solvers/kissat4/collect.hh
--- solvers/kissat4/collect.hh	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/collect.hh	2024-10-31 01:54:52.185968248 +0300
@@ -1,7 +1,9 @@
-#ifndef _collect_h_INCLUDED
-#define _collect_h_INCLUDED
+#ifndef _kissat4_collect_h_INCLUDED
+#define _kissat4_collect_h_INCLUDED
 
-#include "internal.h"
+#include "kissat4/internal.hh"
+
+namespace kissat4 {
 
 bool kissat_compacting (kissat *);
 void kissat_dense_collect (kissat *);
@@ -30,4 +32,6 @@
 void kissat_update_last_irredundant (kissat *, clause *last_irredundant);
 void kissat_update_first_reducible (kissat *, clause *first_reducible);
 
+} // namespace kissat4
+
 #endif
diff -Naur solvers/kissat4/colors.cc solvers/kissat4/colors.cc
--- solvers/kissat4/colors.cc	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/colors.cc	2024-10-31 01:54:52.185968248 +0300
@@ -1,4 +1,4 @@
-#include "colors.h"
+#include "kissat4/colors.hh"
 
 #include <unistd.h>
 
diff -Naur solvers/kissat4/colors.hh solvers/kissat4/colors.hh
--- solvers/kissat4/colors.hh	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/colors.hh	2024-10-31 01:54:52.185968248 +0300
@@ -1,11 +1,11 @@
-#ifndef _colors_h_INCLUDED
-#define _colors_h_INCLUDED
+#ifndef _kissat4_colors_h_INCLUDED
+#define _kissat4_colors_h_INCLUDED
 
 #include <assert.h>
 #include <stdbool.h>
 #include <stdio.h>
 
-#include "keatures.h"
+#include "kissat4/keatures.hh"
 
 #define BLUE "\033[34m"
 #define BOLD "\033[1m"
diff -Naur solvers/kissat4/compact.cc solvers/kissat4/compact.cc
--- solvers/kissat4/compact.cc	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/compact.cc	2024-10-31 01:54:52.185968248 +0300
@@ -1,11 +1,13 @@
-#include "compact.h"
-#include "inline.h"
-#include "inlineheap.h"
-#include "print.h"
-#include "resize.h"
+#include "kissat4/compact.hh"
+#include "kissat4/inline.hh"
+#include "kissat4/inlineheap.hh"
+#include "kissat4/print.hh"
+#include "kissat4/resize.hh"
 
 #include <string.h>
 
+namespace kissat4 {
+
 static void reimport_literal (kissat *solver, unsigned eidx,
                               unsigned mlit) {
   import *import = &PEEK_STACK (solver->import, eidx);
@@ -64,7 +66,7 @@
       LOG2 ("remapping %u to %u", ilit, mlit);
       vars++;
     } else {
-      const int elit = PEEK_STACK (solver->export, iidx);
+      const int elit = PEEK_STACK (solver->export_, iidx);
       if (elit) {
         const unsigned eidx = ABS (elit);
         import *import = &PEEK_STACK (solver->import, eidx);
@@ -72,7 +74,7 @@
         assert (!import->eliminated);
         import->imported = false;
         LOG2 ("external variable %d not imported anymore", eidx);
-        POKE_STACK (solver->export, iidx, 0);
+        POKE_STACK (solver->export_, iidx, 0);
       } else
         LOG2 ("skipping inactive %u", ilit);
       continue;
@@ -81,7 +83,7 @@
     assert (mlit != NOT (ilit));
     if (mlit == ilit)
       continue;
-    const int elit = PEEK_STACK (solver->export, iidx);
+    const int elit = PEEK_STACK (solver->export_, iidx);
     const unsigned eidx = ABS (elit);
     if (elit < 0)
       mlit = NOT (mlit);
@@ -116,7 +118,7 @@
 }
 
 static unsigned map_idx (kissat *solver, unsigned iidx) {
-  int elit = PEEK_STACK (solver->export, iidx);
+  int elit = PEEK_STACK (solver->export_, iidx);
   if (!elit)
     return INVALID_IDX;
   assert (elit);
@@ -239,24 +241,24 @@
 
 static void compact_export (kissat *solver, unsigned vars) {
   LOG ("compacting export");
-  const size_t size = SIZE_STACK (solver->export);
+  const size_t size = SIZE_STACK (solver->export_);
   assert (size <= UINT_MAX);
   assert (size == solver->vars);
   for (unsigned iidx = 0; iidx < size; iidx++) {
-    const unsigned elit = PEEK_STACK (solver->export, iidx);
+    const unsigned elit = PEEK_STACK (solver->export_, iidx);
     if (!elit)
       continue;
     const unsigned midx = map_idx (solver, iidx);
     if (midx == INVALID_IDX)
       continue;
-    POKE_STACK (solver->export, midx, elit);
+    POKE_STACK (solver->export_, midx, elit);
   }
-  RESIZE_STACK (solver->export, vars);
-  SHRINK_STACK (solver->export);
+  RESIZE_STACK (solver->export_, vars);
+  SHRINK_STACK (solver->export_);
 #ifndef NDEBUG
-  assert (SIZE_STACK (solver->export) == vars);
+  assert (SIZE_STACK (solver->export_) == vars);
   for (unsigned iidx = 0; iidx < vars; iidx++) {
-    const int elit = PEEK_STACK (solver->export, iidx);
+    const int elit = PEEK_STACK (solver->export_, iidx);
     assert (VALID_EXTERNAL_LITERAL (elit));
     const unsigned eidx = ABS (elit);
     const import *const import = &PEEK_STACK (solver->import, eidx);
@@ -341,7 +343,7 @@
     if (flags->fixed && first)
       first = false;
     else if (!flags->active)
-      POKE_STACK (solver->export, iidx, 0);
+      POKE_STACK (solver->export_, iidx, 0);
   }
 
   compact_trail (solver);
@@ -374,3 +376,5 @@
 #endif
   kissat_decrease_size (solver);
 }
+
+} // namespace kissat4
diff -Naur solvers/kissat4/compact.hh solvers/kissat4/compact.hh
--- solvers/kissat4/compact.hh	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/compact.hh	2024-10-31 01:54:52.185968248 +0300
@@ -1,9 +1,14 @@
-#ifndef _compact_h_INCLUDED
-#define _compact_h_INCLUDED
+#ifndef _kissat4_compact_h_INCLUDED
+#define _kissat4_compact_h_INCLUDED
 
+namespace kissat4 {
+    
 struct kissat;
 
 unsigned kissat_compact_literals (struct kissat *, unsigned *mfixed_ptr);
 void kissat_finalize_compacting (struct kissat *, unsigned vars,
                                  unsigned mfixed);
+
+} // namespace kissat4
+
 #endif
diff -Naur solvers/kissat4/config.cc solvers/kissat4/config.cc
--- solvers/kissat4/config.cc	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/config.cc	2024-10-31 01:54:52.185968248 +0300
@@ -1,12 +1,14 @@
 #ifndef NOPTIONS
 
-#include "config.h"
-#include "kissat.h"
-#include "options.h"
+#include "kissat4/config.hh"
+#include "kissat4/kissat.hh"
+#include "kissat4/options.hh"
 
 #include <stdio.h>
 #include <string.h>
 
+namespace kissat4 {
+      
 int kissat_has_configuration (const char *name) {
   if (!strcmp (name, "basic"))
     return 1;
@@ -81,3 +83,5 @@
 #else
 int kissat_config_dummy_to_avoid_warning;
 #endif
+
+} // namespace kissat4
diff -Naur solvers/kissat4/config.hh solvers/kissat4/config.hh
--- solvers/kissat4/config.hh	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/config.hh	2024-10-31 01:54:52.185968248 +0300
@@ -1,8 +1,12 @@
 #ifndef NOPTIONS
-#ifndef _config_h_INCLUDED
-#define _config_h_INCLUDED
+#ifndef _kissat4_config_h_INCLUDED
+#define _kissat4_config_h_INCLUDED
+
+namespace kissat4 {
 
 void kissat_configuration_usage (void);
 
+} // namespace kissat4
+
 #endif
 #endif
diff -Naur solvers/kissat4/congruence.cc solvers/kissat4/congruence.cc
--- solvers/kissat4/congruence.cc	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/congruence.cc	2024-10-31 01:54:52.189968438 +0300
@@ -1,24 +1,26 @@
-#include "congruence.h"
-#include "dense.h"
-#include "fifo.h"
-#include "inline.h"
-#include "inlinevector.h"
-#include "internal.h"
-#include "logging.h"
-#include "print.h"
-#include "proprobe.h"
-#include "rank.h"
-#include "reference.h"
-#include "report.h"
-#include "sort.h"
-#include "terminate.h"
-#include "trail.h"
-#include "utilities.h"
+#include "kissat4/congruence.hh"
+#include "kissat4/dense.hh"
+#include "kissat4/fifo.hh"
+#include "kissat4/inline.hh"
+#include "kissat4/inlinevector.hh"
+#include "kissat4/internal.hh"
+#include "kissat4/logging.hh"
+#include "kissat4/print.hh"
+#include "kissat4/proprobe.hh"
+#include "kissat4/rank.hh"
+#include "kissat4/reference.hh"
+#include "kissat4/report.hh"
+#include "kissat4/sort.hh"
+#include "kissat4/terminate.hh"
+#include "kissat4/trail.hh"
+#include "kissat4/utilities.hh"
 
 #include <stddef.h>
 #include <stdint.h>
 #include <string.h>
 
+namespace kissat4 {
+
 // #define INDEX_LARGE_CLAUSES
 // #define INDEX_BINARY_CLAUSES
 #define MERGE_CONDITIONAL_EQUIVALENCES
@@ -844,8 +846,8 @@
     kissat_new_binary_clause (solver, a, b);
   else {
     kissat_new_unwatched_binary_clause (solver, a, b);
-    litpair litpair = {.lits = {a < b ? a : b, a < b ? b : a}};
-    PUSH_STACK (closure->binaries, litpair);
+    litpair litpair_ = litpair{{a < b ? a : b, a < b ? b : a}};
+    PUSH_STACK (closure->binaries, litpair_);
   }
 }
 
@@ -960,7 +962,7 @@
                        unsigned lhs, unsigned arity, const unsigned *lits) {
   kissat *const solver = closure->solver;
   const size_t bytes = bytes_gate (arity);
-  gate *g = kissat_malloc (solver, bytes);
+  gate *g = (gate*) kissat_malloc (solver, bytes);
 #if defined(LOGGING) || !defined(NDEBUG)
   g->id = closure->gates_added++;
 #endif
@@ -2386,7 +2388,7 @@
 
   if (marks[not_lhs] < 2) {
     LOG ("skipping no-candidate LHS %s", LOGLIT (lhs));
-    return false;
+    return NULL;
   }
 
   LOG ("trying to find AND gate with remaining LHS %s", LOGLIT (lhs));
@@ -2498,7 +2500,7 @@
   SWAP (unsigned, lit, other);
   if (lit > other)
     SWAP (unsigned, lit, other);
-  binary_clause binary = {.lits = {lit, other}};
+  binary_clause binary = binary_clause{{lit, other}};
   const unsigned hash = hash_binary (closure, &binary);
   const size_t size = bintab->size;
   const size_t size2 = bintab->size2;
@@ -2984,7 +2986,7 @@
   assert (lit < other);
   binary_hash_table *bintab = &closure->bintab;
   assert (!binaries_hash_table_is_full (bintab));
-  binary_clause binary = {.lits = {lit, other}};
+  binary_clause binary = binary_clause{{lit, other}};
   const unsigned hash = hash_binary (closure, &binary);
   const size_t size = bintab->size;
   const size_t size2 = bintab->size2;
@@ -3152,8 +3154,10 @@
     for (all_literals_in_clause (lit, c))
       if (!values[lit])
         largecount[lit]++;
-    reference ref = kissat_reference_clause (solver, c);
-    PUSH_STACK (*candidates, ref);
+    {
+      reference ref = kissat_reference_clause (solver, c);
+      PUSH_STACK (*candidates, ref);
+    }
   CONTINUE_COUNTING_NEXT_CLAUSE:;
   }
 #ifndef QUIET
@@ -3284,8 +3288,10 @@
     if (size < 3)
       continue;
     assert (size == 3);
-    const reference ref = kissat_reference_clause (solver, c);
-    PUSH_STACK (ternary, ref);
+    {
+      const reference ref = kissat_reference_clause (solver, c);
+      PUSH_STACK (ternary, ref);
+    }
     LOGCLS (c, "counting original ITE gate base");
     for (all_literals_in_clause (lit, c))
       if (!values[lit])
@@ -3402,10 +3408,10 @@
     assert (second != INVALID_LIT);
     litpair pair;
     if (first < second)
-      pair = (litpair){.lits = {first, second}};
+      pair = litpair{{first, second}};
     else {
       assert (second < first);
-      pair = (litpair){.lits = {second, first}};
+      pair = litpair{{second, first}};
     }
     LOG ("literal %s conditional binary clause %s %s", LOGLIT (lit),
          LOGLIT (first), LOGLIT (second));
@@ -3477,13 +3483,13 @@
       assert (first < second);
       check_ternary (closure, lit, first, NOT (second));
       check_ternary (closure, lit, NOT (first), second);
-      litpair equivalence = {.lits = {first, second}};
+      litpair equivalence = litpair{{first, second}};
       PUSH_STACK (*condeq, equivalence);
       if (NEGATED (second)) {
-        litpair inverse_equivalence = {.lits = {NOT (second), NOT (first)}};
+        litpair inverse_equivalence = litpair{{NOT (second), NOT (first)}};
         PUSH_STACK (*condeq, inverse_equivalence);
       } else {
-        litpair inverse_equivalence = {.lits = {second, first}};
+        litpair inverse_equivalence = litpair{{second, first}};
         PUSH_STACK (*condeq, inverse_equivalence);
       }
     }
@@ -4535,7 +4541,7 @@
     }
     const reference ref = kissat_reference_clause (solver, c);
     assert (size <= UINT_MAX);
-    refsize refsize = {.ref = ref, .size = size};
+    refsize refsize = {ref, (unsigned int)size};
     PUSH_STACK (candidates, refsize);
   }
   DEALLOC (matchable, VARS);
@@ -4633,3 +4639,5 @@
   kissat_check_statistics (solver);
   return equivalent;
 }
+
+} // namespace kissat4
diff -Naur solvers/kissat4/congruence.hh solvers/kissat4/congruence.hh
--- solvers/kissat4/congruence.hh	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/congruence.hh	2024-10-31 01:54:52.189968438 +0300
@@ -1,9 +1,13 @@
-#ifndef _congruence_h_INCLUDED
-#define _congruence_h_INCLUDED
+#ifndef _kissat4_congruence_h_INCLUDED
+#define _kissat4_congruence_h_INCLUDED
 
 #include <stdbool.h>
 
+namespace kissat4 {
+
 struct kissat;
 bool kissat_congruence (struct kissat *);
 
+} // namespace kissat4
+
 #endif
diff -Naur solvers/kissat4/cover.hh solvers/kissat4/cover.hh
--- solvers/kissat4/cover.hh	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/cover.hh	2024-10-31 01:54:52.189968438 +0300
@@ -1,5 +1,5 @@
-#ifndef _cover_h_INCLUDED
-#define _cover_h_INCLUDED
+#ifndef _kissat4_cover_h_INCLUDED
+#define _kissat4_cover_h_INCLUDED
 
 #include <stdio.h>
 #include <stdlib.h>
diff -Naur solvers/kissat4/decide.cc solvers/kissat4/decide.cc
--- solvers/kissat4/decide.cc	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/decide.cc	2024-10-31 01:54:52.189968438 +0300
@@ -1,11 +1,13 @@
-#include "decide.h"
-#include "inlineframes.h"
-#include "inlineheap.h"
-#include "inlinequeue.h"
-#include "print.h"
+#include "kissat4/decide.hh"
+#include "kissat4/inlineframes.hh"
+#include "kissat4/inlineheap.hh"
+#include "kissat4/inlinequeue.hh"
+#include "kissat4/print.hh"
 
 #include <inttypes.h>
 
+namespace kissat4 {
+
 static unsigned last_enqueued_unassigned_variable (kissat *solver) {
   assert (solver->unassigned);
   const links *const links = solver->links;
@@ -242,3 +244,5 @@
   LOG ("assuming literal %s", LOGLIT (lit));
   kissat_assign_decision (solver, lit);
 }
+
+} // namespace kissat4
diff -Naur solvers/kissat4/decide.hh solvers/kissat4/decide.hh
--- solvers/kissat4/decide.hh	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/decide.hh	2024-10-31 01:54:52.189968438 +0300
@@ -1,5 +1,7 @@
-#ifndef _decide_h_INCLUDED
-#define _decide_h_INCLUDED
+#ifndef _kissat4_decide_h_INCLUDED
+#define _kissat4_decide_h_INCLUDED
+
+namespace kissat4 {
 
 struct kissat;
 
@@ -11,4 +13,6 @@
 
 #define INITIAL_PHASE (GET_OPTION (phase) ? 1 : -1)
 
+} // namespace kissat4
+
 #endif
diff -Naur solvers/kissat4/deduce.cc solvers/kissat4/deduce.cc
--- solvers/kissat4/deduce.cc	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/deduce.cc	2024-10-31 01:54:52.189968438 +0300
@@ -1,7 +1,9 @@
-#include "deduce.h"
-#include "inline.h"
-#include "promote.h"
-#include "strengthen.h"
+#include "kissat4/deduce.hh"
+#include "kissat4/inline.hh"
+#include "kissat4/promote.hh"
+#include "kissat4/strengthen.hh"
+
+namespace kissat4 {
 
 static inline void recompute_and_promote (kissat *solver, clause *c) {
   assert (c->redundant);
@@ -146,7 +148,7 @@
       assert (solver->antecedent_size && solver->resolvent_size + 1);
       clause *reason = kissat_dereference_clause (solver, a->reason);
       assert (!reason->garbage);
-      clause *res = kissat_on_the_fly_strengthen (solver, reason, uip);
+      clause *res = (clause*) kissat_on_the_fly_strengthen (solver, reason, uip);
       if (resolved == 1 && solver->resolvent_size < conflict_size) {
         assert (!conflict->garbage);
         assert (conflict_size > 2);
@@ -166,3 +168,5 @@
   STOP (deduce);
   return 0;
 }
+
+} // namespace kissat4
diff -Naur solvers/kissat4/deduce.hh solvers/kissat4/deduce.hh
--- solvers/kissat4/deduce.hh	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/deduce.hh	2024-10-31 01:54:52.189968438 +0300
@@ -1,8 +1,10 @@
-#ifndef _deduce_h_INCLUDED
-#define _deduce_h_INCLUDED
+#ifndef _kissat4_deduce_h_INCLUDED
+#define _kissat4_deduce_h_INCLUDED
 
 #include <stdbool.h>
 
+namespace kissat4 {
+
 struct clause;
 struct kissat;
 
@@ -11,4 +13,6 @@
 
 bool kissat_recompute_and_promote (struct kissat *, struct clause *);
 
+} // namespace kissat4
+
 #endif
diff -Naur solvers/kissat4/definition.cc solvers/kissat4/definition.cc
--- solvers/kissat4/definition.cc	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/definition.cc	2024-10-31 01:54:52.189968438 +0300
@@ -1,9 +1,11 @@
-#include "definition.h"
-#include "allocate.h"
-#include "gates.h"
-#include "inline.h"
-#include "kitten.h"
-#include "print.h"
+#include "kissat4/definition.hh"
+#include "kissat4/allocate.hh"
+#include "kissat4/gates.hh"
+#include "kissat4/inline.hh"
+#include "kissat4/kitten.hh"
+#include "kissat4/print.hh"
+
+namespace kissat4 {
 
 typedef struct definition_extractor definition_extractor;
 
@@ -14,7 +16,7 @@
 };
 
 static void traverse_definition_core (void *state, unsigned id) {
-  definition_extractor *extractor = state;
+  definition_extractor *extractor = (definition_extractor*) state;
   kissat *solver = extractor->solver;
   watch watch;
   watches *watches0 = extractor->watches[0];
@@ -55,7 +57,7 @@
                                            const unsigned *lits) {
   if (!learned)
     return;
-  lemma_extractor *extractor = state;
+  lemma_extractor *extractor = (lemma_extractor*) state;
   kissat *solver = extractor->solver;
   const unsigned unit = extractor->unit;
   unsigneds *added = &solver->added;
@@ -228,3 +230,5 @@
   STOP (definition);
   return res;
 }
+
+} // namespace kissat4
diff -Naur solvers/kissat4/definition.hh solvers/kissat4/definition.hh
--- solvers/kissat4/definition.hh	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/definition.hh	2024-10-31 01:54:52.189968438 +0300
@@ -1,10 +1,14 @@
-#ifndef _definition_h_INCLUDED
-#define _definition_h_INCLUDED
+#ifndef _kissat4_definition_h_INCLUDED
+#define _kissat4_definition_h_INCLUDED
 
 #include <stdbool.h>
 
+namespace kissat4 {
+
 struct kissat;
 
 bool kissat_find_definition (struct kissat *, unsigned lit);
 
+} // namespace kissat4
+
 #endif
diff -Naur solvers/kissat4/dense.cc solvers/kissat4/dense.cc
--- solvers/kissat4/dense.cc	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/dense.cc	2024-10-31 01:54:52.189968438 +0300
@@ -1,15 +1,17 @@
 #define INLINE_SORT
 
-#include "dense.h"
-#include "inline.h"
-#include "proprobe.h"
-#include "propsearch.h"
-#include "trail.h"
+#include "kissat4/dense.hh"
+#include "kissat4/inline.hh"
+#include "kissat4/proprobe.hh"
+#include "kissat4/propsearch.hh"
+#include "kissat4/trail.hh"
 
-#include "sort.c"
+#include "kissat4/sort.cc"
 
 #include <string.h>
 
+namespace kissat4 {
+
 static void flush_large_watches (kissat *solver, litpairs *irredundant) {
   assert (!solver->level);
   assert (solver->watching);
@@ -58,7 +60,7 @@
             if (irredundant) {
               const unsigned other = watch.binary.lit;
               if (lit < other) {
-                const litpair litpair = {.lits = {lit, other}};
+                const litpair litpair = {{lit, other}};
                 PUSH_STACK (*irredundant, litpair);
               }
             } else
@@ -233,3 +235,5 @@
   (void) conflict;
 #endif
 }
+
+} // namespace kissat4
diff -Naur solvers/kissat4/dense.hh solvers/kissat4/dense.hh
--- solvers/kissat4/dense.hh	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/dense.hh	2024-10-31 01:54:52.189968438 +0300
@@ -1,7 +1,9 @@
-#ifndef _dense_h_INCLUDED
-#define _dense_h_INCLUDED
+#ifndef _kissat4_dense_h_INCLUDED
+#define _kissat4_dense_h_INCLUDED
 
-#include "watch.h"
+#include "kissat4/watch.hh"
+
+namespace kissat4 {
 
 void kissat_enter_dense_mode (struct kissat *,
                               litpairs *saved_irredundant_binary_clauses);
@@ -9,4 +11,6 @@
 void kissat_resume_sparse_mode (struct kissat *, bool flush_eliminated,
                                 litpairs *);
 
+} // namespace kissat4
+
 #endif
diff -Naur solvers/kissat4/dump.cc solvers/kissat4/dump.cc
--- solvers/kissat4/dump.cc	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/dump.cc	2024-10-31 01:54:52.189968438 +0300
@@ -1,6 +1,6 @@
 #ifndef NDEBUG
 
-#include "inline.h"
+#include "kissat4/inline.hh"
 
 #include <inttypes.h>
 
@@ -129,18 +129,18 @@
 }
 
 static void dump_export (kissat *solver) {
-  const unsigned size = SIZE_STACK (solver->export);
+  const unsigned size = SIZE_STACK (solver->export_);
   for (unsigned idx = 0; idx < size; idx++)
     printf ("export[%u] = %u\n", LIT (idx),
-            PEEK_STACK (solver->export, idx));
+            PEEK_STACK (solver->export_, idx));
 }
 
 void dump_map (kissat *solver) {
-  const unsigned size = SIZE_STACK (solver->export);
+  const unsigned size = SIZE_STACK (solver->export_);
   unsigned first = INVALID_LIT;
   for (unsigned idx = 0; idx < size; idx++) {
     const unsigned ilit = LIT (idx);
-    const int elit = PEEK_STACK (solver->export, idx);
+    const int elit = PEEK_STACK (solver->export_, idx);
     printf ("map[%u] -> %d", ilit, elit);
     if (elit) {
       const unsigned eidx = ABS (elit);
diff -Naur solvers/kissat4/eliminate.cc solvers/kissat4/eliminate.cc
--- solvers/kissat4/eliminate.cc	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/eliminate.cc	2024-10-31 01:54:52.189968438 +0300
@@ -1,23 +1,25 @@
-#include "eliminate.h"
-#include "allocate.h"
-#include "backtrack.h"
-#include "collect.h"
-#include "dense.h"
-#include "forward.h"
-#include "inline.h"
-#include "inlineheap.h"
-#include "kitten.h"
-#include "print.h"
-#include "propdense.h"
-#include "report.h"
-#include "resolve.h"
-#include "terminate.h"
-#include "trail.h"
-#include "weaken.h"
+#include "kissat4/eliminate.hh"
+#include "kissat4/allocate.hh"
+#include "kissat4/backtrack.hh"
+#include "kissat4/collect.hh"
+#include "kissat4/dense.hh"
+#include "kissat4/forward.hh"
+#include "kissat4/inline.hh"
+#include "kissat4/inlineheap.hh"
+#include "kissat4/kitten.hh"
+#include "kissat4/print.hh"
+#include "kissat4/propdense.hh"
+#include "kissat4/report.hh"
+#include "kissat4/resolve.hh"
+#include "kissat4/terminate.hh"
+#include "kissat4/trail.hh"
+#include "kissat4/weaken.hh"
 
 #include <inttypes.h>
 #include <math.h>
 
+namespace kissat4 {
+
 bool kissat_eliminating (kissat *solver) {
   if (!solver->enabled.eliminate)
     return false;
@@ -601,3 +603,5 @@
   solver->last.ticks.eliminate = solver->statistics.search_ticks;
   return solver->inconsistent ? 20 : 0;
 }
+
+} // namespace kissat4
diff -Naur solvers/kissat4/eliminate.hh solvers/kissat4/eliminate.hh
--- solvers/kissat4/eliminate.hh	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/eliminate.hh	2024-10-31 01:54:52.189968438 +0300
@@ -1,8 +1,10 @@
-#ifndef _eliminate_hpp_INCLUDED
-#define _eliminate_hpp_INCLUDED
+#ifndef _kissat4_eliminate_hpp_INCLUDED
+#define _kissat4_eliminate_hpp_INCLUDED
 
 #include <stdbool.h>
 
+namespace kissat4 {
+
 struct kissat;
 struct clause;
 struct heap;
@@ -16,4 +18,6 @@
 void kissat_eliminate_clause (struct kissat *, struct clause *, unsigned);
 void kissat_update_variable_score (struct kissat *, unsigned idx);
 
+} // namespace kissat4
+
 #endif
diff -Naur solvers/kissat4/equivalences.cc solvers/kissat4/equivalences.cc
--- solvers/kissat4/equivalences.cc	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/equivalences.cc	2024-10-31 01:54:52.189968438 +0300
@@ -1,6 +1,8 @@
-#include "gates.h"
-#include "inlinevector.h"
-#include "logging.h"
+#include "kissat4/gates.hh"
+#include "kissat4/inlinevector.hh"
+#include "kissat4/logging.hh"
+
+namespace kissat4 {
 
 bool kissat_find_equivalence_gate (kissat *solver, unsigned lit) {
   if (!GET_OPTION (equivalences))
@@ -35,3 +37,5 @@
   INC (equivalences_extracted);
   return true;
 }
+
+} // namespace kissat4
diff -Naur solvers/kissat4/equivalences.hh solvers/kissat4/equivalences.hh
--- solvers/kissat4/equivalences.hh	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/equivalences.hh	2024-10-31 01:54:52.189968438 +0300
@@ -1,10 +1,14 @@
-#ifndef _equivs_h_INCLUDED
-#define _equivs_h_INCLUDED
+#ifndef _kissat4_equivs_h_INCLUDED
+#define _kissat4_equivs_h_INCLUDED
 
 #include <stdbool.h>
 
+namespace kissat4 {
+    
 struct kissat;
 
 bool kissat_find_equivalence_gate (struct kissat *, unsigned lit);
 
+} // namespace kissat4
+
 #endif
diff -Naur solvers/kissat4/error.cc solvers/kissat4/error.cc
--- solvers/kissat4/error.cc	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/error.cc	2024-10-31 01:54:52.189968438 +0300
@@ -1,10 +1,12 @@
-#include "error.h"
-#include "colors.h"
-#include "cover.h"
+#include "kissat4/error.hh"
+#include "kissat4/colors.hh"
+#include "kissat4/cover.hh"
 
 #include <stdarg.h>
 #include <stdlib.h>
 
+namespace kissat4 {
+
 static void (*kissat_abort_function) (void);
 
 void kissat_call_function_instead_of_abort (void (*f) (void)) {
@@ -60,3 +62,5 @@
   va_end (ap);
   kissat_abort ();
 }
+
+} // namespace kissat4
diff -Naur solvers/kissat4/error.hh solvers/kissat4/error.hh
--- solvers/kissat4/error.hh	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/error.hh	2024-10-31 01:54:52.189968438 +0300
@@ -1,12 +1,14 @@
-#ifndef _error_h_INCLUDED
-#define _error_h_INCLUDED
+#ifndef _kissat4_error_h_INCLUDED
+#define _kissat4_error_h_INCLUDED
 
-#include "attribute.h"
+#include "kissat4/attribute.hh"
+
+namespace kissat4 {
 
 // clang-format off
 
-void kissat_error (const char *fmt, ...) ATTRIBUTE_FORMAT (1, 2);
-void kissat_fatal (const char *fmt, ...) ATTRIBUTE_FORMAT (1, 2);
+void kissat_error (KISSAT_ATTRIBUTE_PRINTF_ARG const char *fmt, ...) KISSAT_ATTRIBUTE_FORMAT (1, 2);
+void kissat_fatal (KISSAT_ATTRIBUTE_PRINTF_ARG const char *fmt, ...) KISSAT_ATTRIBUTE_FORMAT (1, 2);
 
 void kissat_fatal_message_start (void);
 
@@ -15,4 +17,6 @@
 
 // clang-format on
 
+} // namespace kissat4
+
 #endif
diff -Naur solvers/kissat4/extend.cc solvers/kissat4/extend.cc
--- solvers/kissat4/extend.cc	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/extend.cc	2024-10-31 01:54:52.189968438 +0300
@@ -1,5 +1,7 @@
-#include "colors.h"
-#include "inline.h"
+#include "kissat4/colors.hh"
+#include "kissat4/inline.hh"
+
+namespace kissat4 {
 
 static void undo_eliminated_assignment (kissat *solver) {
   size_t size_etrail = SIZE_STACK (solver->etrail);
@@ -179,3 +181,5 @@
 
   STOP (extend);
 }
+
+} // namespace kissat4
diff -Naur solvers/kissat4/extend.hh solvers/kissat4/extend.hh
--- solvers/kissat4/extend.hh	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/extend.hh	2024-10-31 01:54:52.189968438 +0300
@@ -1,8 +1,10 @@
-#ifndef _extend_h_INCLUDED
-#define _extend_h_INCLUDED
+#ifndef _kissat4_extend_h_INCLUDED
+#define _kissat4_extend_h_INCLUDED
 
-#include "stack.h"
-#include "utilities.h"
+#include "kissat4/stack.hh"
+#include "kissat4/utilities.hh"
+
+namespace kissat4 {
 
 typedef struct extension extension;
 
@@ -27,4 +29,6 @@
 
 void kissat_extend (struct kissat *solver);
 
+} // namespace kissat4
+
 #endif
diff -Naur solvers/kissat4/factor.cc solvers/kissat4/factor.cc
--- solvers/kissat4/factor.cc	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/factor.cc	2024-10-31 01:54:52.189968438 +0300
@@ -1,24 +1,26 @@
-#include "factor.h"
-#include "bump.h"
-#include "clause.h"
-#include "dense.h"
-#include "heap.h"
-#include "import.h"
-#include "inline.h"
-#include "inlineheap.h"
-#include "inlinequeue.h"
-#include "inlinevector.h"
-#include "internal.h"
-#include "logging.h"
-#include "print.h"
-#include "report.h"
-#include "sort.h"
-#include "terminate.h"
-#include "vector.h"
-#include "watch.h"
+#include "kissat4/factor.hh"
+#include "kissat4/bump.hh"
+#include "kissat4/clause.hh"
+#include "kissat4/dense.hh"
+#include "kissat4/heap.hh"
+#include "kissat4/import.hh"
+#include "kissat4/inline.hh"
+#include "kissat4/inlineheap.hh"
+#include "kissat4/inlinequeue.hh"
+#include "kissat4/inlinevector.hh"
+#include "kissat4/internal.hh"
+#include "kissat4/logging.hh"
+#include "kissat4/print.hh"
+#include "kissat4/report.hh"
+#include "kissat4/sort.hh"
+#include "kissat4/terminate.hh"
+#include "kissat4/vector.hh"
+#include "kissat4/watch.hh"
 
 #include <string.h>
 
+namespace kissat4 {
+
 #define FACTOR 1
 #define QUOTIENT 2
 #define NOUNTED 4
@@ -188,7 +190,7 @@
   mark *marks = solver->marks;
   assert (!marks[factor]);
   marks[factor] = FACTOR;
-  quotient *res = kissat_malloc (solver, sizeof *res);
+  quotient *res = (quotient*) kissat_malloc (solver, sizeof *res);
   memset (res, 0, sizeof *res);
   res->factor = factor;
   quotient *last = factoring->quotients.last;
@@ -418,17 +420,19 @@
           assert (next != INVALID_LIT);
           if (next > initial)
             continue;
-          const unsigned next_idx = IDX (next);
-          if (!ACTIVE (next_idx))
-            continue;
-          assert (!(marks[next] & (FACTOR | NOUNTED)));
-          marks[next] |= NOUNTED;
-          PUSH_STACK (*nounted, next);
-          d->quotient = true;
-          PUSH_STACK (*qlauses, d_ref);
-          if (!count[next])
-            PUSH_STACK (*counted, next);
-          count[next]++;
+          {
+            const unsigned next_idx = IDX (next);
+            if (!ACTIVE (next_idx))
+              continue;
+            assert (!(marks[next] & (FACTOR | NOUNTED)));
+            marks[next] |= NOUNTED;
+            PUSH_STACK (*nounted, next);
+            d->quotient = true;
+            PUSH_STACK (*qlauses, d_ref);
+            if (!count[next])
+              PUSH_STACK (*counted, next);
+            count[next]++;
+          }
         CONTINUE_WITH_NEXT_MIN_WATCH:;
         }
         clear_nounted (solver, nounted);
@@ -653,8 +657,8 @@
     while (new_size > new_allocated)
       new_allocated *= 2;
     unsigned *count = factoring->count;
-    count = kissat_nrealloc (solver, count, old_allocated, new_allocated,
-                             sizeof *count);
+    count = (unsigned*) kissat_nrealloc (solver, count, old_allocated, new_allocated,
+                                         sizeof *count);
     const size_t delta_allocated = new_allocated - old_allocated;
     const size_t delta_bytes = delta_allocated * sizeof *count;
     memset (count + old_size, 0, delta_bytes);
@@ -666,8 +670,8 @@
     for (unsigned i = 0; i != factoring->hops; i++) {
       scores *scores = factoring->scores + i;
       double *score = scores->score;
-      score = kissat_nrealloc (solver, score, old_allocated_score,
-                               new_allocated_score, sizeof *score);
+      score = (double*) kissat_nrealloc (solver, score, old_allocated_score,
+                                         new_allocated_score, sizeof *score);
       for (size_t i = old_allocated_score; i != new_allocated_score; i++)
         score[i] = -1;
       scores->score = score;
@@ -1050,8 +1054,10 @@
     for (all_literals_in_clause (lit, c))
       if (bincount[lit] + largecount[lit] < 2)
         goto CONTINUE_WITH_NEXT_CLAUSE2;
-    const reference ref = (ward *) c - arena;
-    kissat_inlined_connect_clause (solver, all_watches, c, ref);
+    {
+      const reference ref = (ward *) c - arena;
+      kissat_inlined_connect_clause (solver, all_watches, c, ref);
+    }
 #ifndef QUIET
     connected++;
 #endif
@@ -1134,3 +1140,5 @@
     solver->limits.factor.marked = s->literals_factor;
   STOP (factor);
 }
+
+} // namespace kissat4
diff -Naur solvers/kissat4/factor.hh solvers/kissat4/factor.hh
--- solvers/kissat4/factor.hh	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/factor.hh	2024-10-31 01:54:52.189968438 +0300
@@ -1,9 +1,13 @@
-#ifndef _factor_h_INCLUDED
-#define _factor_h_INCLUDED
+#ifndef _kissat4_factor_h_INCLUDED
+#define _kissat4_factor_h_INCLUDED
 
 #include <stdbool.h>
 
+namespace kissat4 {
+
 struct kissat;
 void kissat_factor (struct kissat *);
 
+} // namespace kissat4
+
 #endif
diff -Naur solvers/kissat4/fastassign.hh solvers/kissat4/fastassign.hh
--- solvers/kissat4/fastassign.hh	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/fastassign.hh	2024-10-31 01:54:52.189968438 +0300
@@ -1,10 +1,12 @@
-#ifndef _fastassign_h_INCLUDED
-#define _fastassign_h_INCLUDED
+#ifndef _kissat4_fastassign_h_INCLUDED
+#define _kissat4_fastassign_h_INCLUDED
 
 #define FAST_ASSIGN
 
-#include "inline.h"
-#include "inlineassign.h"
+#include "kissat4/inline.hh"
+#include "kissat4/inlineassign.hh"
+
+namespace kissat4 {
 
 static inline void kissat_fast_binary_assign (
     kissat *solver, const bool probing, const unsigned level, value *values,
@@ -38,4 +40,6 @@
   LOGREF (ref, "assign %s reason", LOGLIT (lit));
 }
 
+} // namespace kissat4
+
 #endif
diff -Naur solvers/kissat4/fastel.cc solvers/kissat4/fastel.cc
--- solvers/kissat4/fastel.cc	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/fastel.cc	2024-10-31 01:54:52.189968438 +0300
@@ -1,13 +1,15 @@
-#include "fastel.h"
-#include "dense.h"
-#include "eliminate.h"
-#include "inline.h"
-#include "internal.h"
-#include "print.h"
-#include "rank.h"
-#include "report.h"
-#include "terminate.h"
-#include "weaken.h"
+#include "kissat4/fastel.hh"
+#include "kissat4/dense.hh"
+#include "kissat4/eliminate.hh"
+#include "kissat4/inline.hh"
+#include "kissat4/internal.hh"
+#include "kissat4/print.hh"
+#include "kissat4/rank.hh"
+#include "kissat4/report.hh"
+#include "kissat4/terminate.hh"
+#include "kissat4/weaken.hh"
+
+namespace kissat4 {
 
 static bool fast_forward_subsumed (kissat *solver, clause *c) {
   assert (!c->garbage);
@@ -932,3 +934,5 @@
   STOP (fastel);
   REPORT (!eliminated, 'e');
 }
+
+} // namespace kissat4
diff -Naur solvers/kissat4/fastel.hh solvers/kissat4/fastel.hh
--- solvers/kissat4/fastel.hh	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/fastel.hh	2024-10-31 01:54:52.189968438 +0300
@@ -1,6 +1,10 @@
-#ifndef _fastel_h_INCLUDED
+#ifndef _kissat4_fastel_h_INCLUDED
+
+namespace kissat4 {
 
 struct kissat;
 void kissat_fast_variable_elimination (struct kissat *);
 
+} // namespace kissat4
+
 #endif
diff -Naur solvers/kissat4/fifo.hh solvers/kissat4/fifo.hh
--- solvers/kissat4/fifo.hh	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/fifo.hh	2024-10-31 01:54:52.189968438 +0300
@@ -1,7 +1,7 @@
-#ifndef _fifo_h_INCLUDED
-#define _fifo_h_INCLUDED
+#ifndef _kissat4_fifo_h_INCLUDED
+#define _kissat4_fifo_h_INCLUDED
 
-#include "stack.h"
+#include "kissat4/stack.hh"
 
 #include <string.h>
 
@@ -37,7 +37,7 @@
     size_t NEW_CAPACITY = OLD_CAPACITY ? 2 * OLD_CAPACITY : 2; \
     size_t OLD_BYTES = OLD_CAPACITY * sizeof *BEGIN_FIFO (F); \
     size_t NEW_BYTES = NEW_CAPACITY * sizeof *BEGIN_FIFO (F); \
-    START_FIFO (F) = \
+    START_FIFO (F) = (decltype(&*START_FIFO (F))) \
         kissat_realloc (solver, START_FIFO (F), OLD_BYTES, NEW_BYTES); \
     ALLOCATED_FIFO (F) = START_FIFO (F) + NEW_CAPACITY; \
     LIMIT_FIFO (F) = START_FIFO (F) + NEW_CAPACITY / 2; \
diff -Naur solvers/kissat4/file.cc solvers/kissat4/file.cc
--- solvers/kissat4/file.cc	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/file.cc	2024-10-31 01:54:52.189968438 +0300
@@ -1,6 +1,6 @@
-#include "file.h"
-#include "keatures.h"
-#include "utilities.h"
+#include "kissat4/file.hh"
+#include "kissat4/keatures.hh"
+#include "kissat4/utilities.hh"
 
 #include <errno.h>
 #include <stdlib.h>
@@ -9,6 +9,21 @@
 #include <sys/types.h>
 #include <unistd.h>
 
+namespace kissat4 {
+
+#ifdef _MSC_VER
+#ifndef S_ISDIR
+#define S_ISDIR(mode)  (((mode) & S_IFMT) == S_IFDIR)
+#endif
+
+#ifndef S_ISREG
+#define S_ISREG(mode)  (((mode) & S_IFMT) == S_IFREG)
+#endif
+
+#define popen _popen
+#define pclose _pclose
+#endif
+
 bool kissat_file_exists (const char *path) {
   if (!path)
     return false;
@@ -57,7 +72,7 @@
         res = 5;
       else {
         const size_t len = p - path;
-        char *dirname = malloc (len + 1);
+        char *dirname = (char*) malloc (len + 1);
         if (dirname) {
           strncpy (dirname, path, len);
           dirname[len] = 0;
@@ -98,7 +113,7 @@
   if (!environment)
     return false;
   const size_t dirs_len = strlen (environment);
-  char *dirs = malloc (dirs_len + 1);
+  char *dirs = (char*) malloc (dirs_len + 1);
   if (!dirs)
     return false;
   strcpy (dirs, environment);
@@ -109,7 +124,7 @@
       assert (q + 1 < end);
     *q++ = 0;
     const size_t path_len = (q - dir) + name_len;
-    char *path = malloc (path_len + 1);
+    char *path = (char*) malloc (path_len + 1);
     if (!path) {
       free (dirs);
       return false;
@@ -149,7 +164,7 @@
   size_t name_len = 0;
   while (fmt[name_len] && fmt[name_len] != ' ')
     name_len++;
-  char *name = malloc (name_len + 1);
+  char *name = (char*) malloc (name_len + 1);
   if (!name)
     return 0;
   strncpy (name, fmt, name_len);
@@ -158,7 +173,7 @@
   free (name);
   if (!found)
     return 0;
-  char *cmd = malloc (strlen (fmt) + strlen (path));
+  char *cmd = (char*) malloc (strlen (fmt) + strlen (path));
   if (!cmd)
     return 0;
   sprintf (cmd, fmt, path);
@@ -308,3 +323,5 @@
     fclose (file->file);
   file->file = 0;
 }
+
+} // namespace kissat4
diff -Naur solvers/kissat4/file.hh solvers/kissat4/file.hh
--- solvers/kissat4/file.hh	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/file.hh	2024-10-31 01:54:52.189968438 +0300
@@ -1,13 +1,15 @@
-#ifndef _file_h_INCLUDED
-#define _file_h_INCLUDED
+#ifndef _kissat4_file_h_INCLUDED
+#define _kissat4_file_h_INCLUDED
 
 #include <assert.h>
 #include <stdbool.h>
 #include <stdint.h>
 #include <stdio.h>
 
-#include "attribute.h"
-#include "keatures.h"
+#include "kissat4/attribute.hh"
+#include "kissat4/keatures.hh"
+
+namespace kissat4 {
 
 bool kissat_file_exists (const char *path);
 bool kissat_file_readable (const char *path);
@@ -42,17 +44,15 @@
 
 // clang-format off
 
-static inline size_t
-kissat_read (file *, void *, size_t) ATTRIBUTE_ALWAYS_INLINE;
+static KISSAT_ATTRIBUTE_ALWAYS_INLINE size_t kissat_read (file *, void *, size_t);
 
-static inline size_t
-kissat_write (file *, void *, size_t) ATTRIBUTE_ALWAYS_INLINE;
+static KISSAT_ATTRIBUTE_ALWAYS_INLINE size_t kissat_write (file *, void *, size_t);
 
-static inline int kissat_getc (file *) ATTRIBUTE_ALWAYS_INLINE;
+static KISSAT_ATTRIBUTE_ALWAYS_INLINE int kissat_getc (file *);
 
-static inline int kissat_putc (file *, int) ATTRIBUTE_ALWAYS_INLINE;
+static KISSAT_ATTRIBUTE_ALWAYS_INLINE int kissat_putc (file *, int);
 
-static inline void kissat_flush (file *) ATTRIBUTE_ALWAYS_INLINE;
+static KISSAT_ATTRIBUTE_ALWAYS_INLINE void kissat_flush (file *);
 
 // clang-format on
 
@@ -121,4 +121,6 @@
 #endif
 }
 
+} // namespace kissat4
+
 #endif
diff -Naur solvers/kissat4/flags.cc solvers/kissat4/flags.cc
--- solvers/kissat4/flags.cc	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/flags.cc	2024-10-31 01:54:52.189968438 +0300
@@ -1,6 +1,8 @@
-#include "inline.h"
-#include "inlineheap.h"
-#include "inlinequeue.h"
+#include "kissat4/inline.hh"
+#include "kissat4/inlineheap.hh"
+#include "kissat4/inlinequeue.hh"
+
+namespace kissat4 {
 
 static inline void activate_literal (kissat *solver, unsigned lit) {
   const unsigned idx = IDX (lit);
@@ -113,3 +115,5 @@
   for (unsigned i = 0; i < size; i++)
     kissat_mark_added_literal (solver, lits[i]);
 }
+
+} // namespace kissat4
diff -Naur solvers/kissat4/flags.hh solvers/kissat4/flags.hh
--- solvers/kissat4/flags.hh	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/flags.hh	2024-10-31 01:54:52.189968438 +0300
@@ -1,8 +1,10 @@
-#ifndef _flags_h_INCLUDED
-#define _flags_h_INCLUDED
+#ifndef _kissat4_flags_h_INCLUDED
+#define _kissat4_flags_h_INCLUDED
 
 #include <stdbool.h>
 
+namespace kissat4 {
+
 typedef struct flags flags;
 
 struct flags {
@@ -34,4 +36,6 @@
 void kissat_mark_added_literals (struct kissat *, unsigned, unsigned *);
 void kissat_mark_removed_literals (struct kissat *, unsigned, unsigned *);
 
+} // namespace kissat4
+
 #endif
diff -Naur solvers/kissat4/format.cc solvers/kissat4/format.cc
--- solvers/kissat4/format.cc	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/format.cc	2024-10-31 01:54:52.189968438 +0300
@@ -1,4 +1,4 @@
-#include "format.h"
+#include "kissat4/format.hh"
 
 #include <assert.h>
 #include <inttypes.h>
@@ -7,6 +7,8 @@
 #include <stdio.h>
 #include <string.h>
 
+namespace kissat4 {
+
 char *kissat_next_format_string (format *format) {
   assert (format->pos < NUM_FORMAT_STRINGS);
   char *res = format->str[format->pos++];
@@ -143,3 +145,5 @@
   sprintf (res, "%" PRIu64 "%s", ordinal, suffix);
   return res;
 }
+
+} // namespace kissat4
diff -Naur solvers/kissat4/format.hh solvers/kissat4/format.hh
--- solvers/kissat4/format.hh	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/format.hh	2024-10-31 01:54:52.189968438 +0300
@@ -1,11 +1,13 @@
-#ifndef _format_h_INCLUDED
-#define _format_h_INCLUDED
+#ifndef _kissat4_format_h_INCLUDED
+#define _kissat4_format_h_INCLUDED
 
-#include "utilities.h"
+#include "kissat4/utilities.hh"
 
 #include <stdbool.h>
 #include <stdint.h>
 
+namespace kissat4 {
+
 #define NUM_FORMAT_STRINGS 16
 #define FORMAT_STRING_SIZE 128
 
@@ -39,4 +41,6 @@
 #define FORMAT_VALUE(BOOLEAN, VALUE) \
   kissat_format_value (&solver->format, BOOLEAN, VALUE)
 
+} // namespace kissat4
+
 #endif
diff -Naur solvers/kissat4/forward.cc solvers/kissat4/forward.cc
--- solvers/kissat4/forward.cc	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/forward.cc	2024-10-31 01:54:52.189968438 +0300
@@ -1,15 +1,17 @@
-#include "forward.h"
-#include "allocate.h"
-#include "eliminate.h"
-#include "inline.h"
-#include "print.h"
-#include "rank.h"
-#include "report.h"
-#include "sort.h"
-#include "terminate.h"
+#include "kissat4/forward.hh"
+#include "kissat4/allocate.hh"
+#include "kissat4/eliminate.hh"
+#include "kissat4/inline.hh"
+#include "kissat4/print.hh"
+#include "kissat4/rank.hh"
+#include "kissat4/report.hh"
+#include "kissat4/sort.hh"
+#include "kissat4/terminate.hh"
 
 #include <inttypes.h>
 
+namespace kissat4 {
+  
 static size_t remove_duplicated_binaries_with_literal (kissat *solver,
                                                        unsigned lit) {
   watches *watches = &WATCHES (lit);
@@ -689,3 +691,5 @@
   STOP (subsume);
   return complete;
 }
+
+} // namespace kissat4
\ No newline at end of file
diff -Naur solvers/kissat4/forward.hh solvers/kissat4/forward.hh
--- solvers/kissat4/forward.hh	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/forward.hh	2024-10-31 01:54:52.189968438 +0300
@@ -1,10 +1,14 @@
-#ifndef _forward_h_INCLUDED
-#define _forward_h_INCLUDED
+#ifndef _kissat4_forward_h_INCLUDED
+#define _kissat4_forward_h_INCLUDED
 
 #include <stdbool.h>
 
+namespace kissat4 {
+
 struct kissat;
 
 bool kissat_forward_subsume_during_elimination (struct kissat *);
 
+} // namespace kissat4
+
 #endif
diff -Naur solvers/kissat4/frames.hh solvers/kissat4/frames.hh
--- solvers/kissat4/frames.hh	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/frames.hh	2024-10-31 01:54:52.189968438 +0300
@@ -1,11 +1,13 @@
-#ifndef _frames_h_INCLUDED
-#define _frames_h_INCLUDED
+#ifndef _kissat4_frames_h_INCLUDED
+#define _kissat4_frames_h_INCLUDED
 
-#include "literal.h"
-#include "stack.h"
+#include "kissat4/literal.hh"
+#include "kissat4/stack.hh"
 
 #include <stdbool.h>
 
+namespace kissat4 {
+
 typedef struct frame frame;
 typedef struct slice slice;
 
@@ -29,4 +31,6 @@
 
 #define FRAME(LEVEL) (PEEK_STACK (solver->frames, (LEVEL)))
 
+} // namespace kissat4
+
 #endif
diff -Naur solvers/kissat4/gates.cc solvers/kissat4/gates.cc
--- solvers/kissat4/gates.cc	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/gates.cc	2024-10-31 01:54:52.189968438 +0300
@@ -1,10 +1,12 @@
-#include "gates.h"
-#include "ands.h"
-#include "definition.h"
-#include "eliminate.h"
-#include "equivalences.h"
-#include "ifthenelse.h"
-#include "inline.h"
+#include "kissat4/gates.hh"
+#include "kissat4/ands.hh"
+#include "kissat4/definition.hh"
+#include "kissat4/eliminate.hh"
+#include "kissat4/equivalences.hh"
+#include "kissat4/ifthenelse.hh"
+#include "kissat4/inline.hh"
+
+namespace kissat4 {
 
 size_t kissat_mark_binaries (kissat *solver, unsigned lit) {
   value *marks = solver->marks;
@@ -102,3 +104,5 @@
   get_antecedents (solver, lit, 0);
   get_antecedents (solver, NOT (lit), 1);
 }
+
+} // namespace kissat4
\ No newline at end of file
diff -Naur solvers/kissat4/gates.hh solvers/kissat4/gates.hh
--- solvers/kissat4/gates.hh	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/gates.hh	2024-10-31 01:54:52.189968438 +0300
@@ -1,9 +1,11 @@
-#ifndef _gates_h_INCLUDED
-#define _gates_h_INCLUDED
+#ifndef _kissat4_gates_h_INCLUDED
+#define _kissat4_gates_h_INCLUDED
 
 #include <stdbool.h>
 #include <stdlib.h>
 
+namespace kissat4 {
+
 struct kissat;
 struct clause;
 
@@ -13,6 +15,8 @@
 size_t kissat_mark_binaries (struct kissat *, unsigned lit);
 void kissat_unmark_binaries (struct kissat *, unsigned lit);
 
+} // namespace kissat4
+
 #ifndef METRICS
 #define GATE_ELIMINATED(...) true
 #else
diff -Naur solvers/kissat4/generate-build-header.sh solvers/kissat4/generate-build-header.sh
--- solvers/kissat4/generate-build-header.sh	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/generate-build-header.sh	2024-10-31 01:54:52.189968438 +0300
@@ -1,34 +1,33 @@
-#!/bin/sh
+#!/bin/bash
 script=`basename $0`
 die () {
   echo "$script: error: $*" 1>&2
   exit 1
 }
-[ -f makefile ] || die "no 'makefile' (run './configure' first)"
-CC="`sed -e '/^CC/!d' -e 's,^CC=,,' makefile`"
-[ "$CC" = "" ] && die "could not get 'CC' from makefile"
-case "$CC" in
-  gcc*|clang*)
-    CFLAGS="`echo $CC|sed -e 's,^[^ ]* ,,'`"
-    CC="`echo $CC|awk '{print \$1}'`"
-    CC="`$CC --version 2>/dev/null|head -1`"
+if [[ "$OSTYPE" == "darwin"* ]]; then
+  SEDMAC=-E
+else
+  SEDMAC=
+fi
+CXX="`sed $SEDMAC -e '/^CXX[ \t]*:=/!d' -e 's,^CXX[ \t]*:= ,,' Makefile 2>/dev/null`"
+[ "$CXX" = "" ] && die "could not get 'CXX' from makefile"
+case "$CXX" in
+  g++*|clang*)
+    CXXFLAGS="`echo $CXX|sed -e 's,^[^ ]* ,,'`"
+    CXX="`echo $CXX|awk '{print \$1}'`"
+    CXX="`$CXX --version 2>/dev/null|head -1`"
     ;;
 esac
-COMPILER="$CC $CFLAGS"
-VERSION="`cat ../VERSION 2>/dev/null`"
+COMPILER="$CXX $CXXFLAGS"
+VERSION="`cat ./VERSION.txt 2>/dev/null`"
 [ "$VERSION" = "" ] && die "could not get 'VERSION'"
 cat <<EOF
 #define VERSION "$VERSION"
 #define COMPILER "$COMPILER"
 EOF
 #START-CUT-OUT-ID
-if [ -d .git -o -d ../.git ]
-then
-  ID="`git show 2>/dev/null|awk '{print $2; exit}'`"
-  [ "$ID" = "" ] && die "could not get git id with 'git show'"
-else
-  ID=unknown
-fi
+ID="`git show 2>/dev/null|awk '{print $2; exit}'`"
+[ "$ID" = "" ] && die "could not get git id with 'git show'"
 #END-CUT-OUT-ID
 cat <<EOF
 #define ID "$ID"
@@ -40,8 +39,4 @@
 BUILD="`echo $DATE $OS|sed -e 's,^ *,,' -e 's, *$,,'`"
 cat << EOF
 #define BUILD "$BUILD"
-EOF
-DIR="`pwd`"
-cat <<EOF
-#define DIR "$DIR"
-EOF
+EOF
\ No newline at end of file
diff -Naur solvers/kissat4/handle.cc solvers/kissat4/handle.cc
--- solvers/kissat4/handle.cc	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/handle.cc	2024-10-31 01:54:52.189968438 +0300
@@ -1,9 +1,11 @@
-#include "handle.h"
+#include "kissat4/handle.hh"
 
 #include <assert.h>
 #include <stdbool.h>
 #include <stdio.h>
 
+namespace kissat4 {
+
 static void (*handler) (int);
 static volatile int caught_signal;
 static volatile bool handler_set;
@@ -55,6 +57,7 @@
 static void (*volatile SIGALRM_handler) (int);
 static void (*volatile handle_alarm) (void);
 
+#ifndef _MSC_VER
 static void catch_alarm (int sig) {
   assert (sig == SIGALRM);
   if (caught_alarm)
@@ -67,6 +70,7 @@
   assert (handler);
   handler ();
 }
+#endif
 
 void kissat_init_alarm (void (*handler) (void)) {
   assert (handler);
@@ -74,7 +78,9 @@
   handle_alarm = handler;
   alarm_handler_set = true;
   assert (!SIGALRM_handler);
+#ifndef _MSC_VER
   SIGALRM_handler = signal (SIGALRM, catch_alarm);
+#endif
 }
 
 void kissat_reset_alarm (void) {
@@ -82,5 +88,9 @@
   assert (handle_alarm);
   alarm_handler_set = false;
   handle_alarm = 0;
+#ifndef _MSC_VER
   (void) signal (SIGALRM, SIGALRM_handler);
+#endif
 }
+
+} // namespace kissat4
diff -Naur solvers/kissat4/handle.hh solvers/kissat4/handle.hh
--- solvers/kissat4/handle.hh	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/handle.hh	2024-10-31 01:54:52.189968438 +0300
@@ -1,15 +1,17 @@
-#ifndef _handle_h_INCLUDED
-#define _handle_h_INCLUDED
+#ifndef _kissat4_handle_h_INCLUDED
+#define _kissat4_handle_h_INCLUDED
 
 #include <signal.h>
 
+namespace kissat4 {
+
 void kissat_init_signal_handler (void (*handler) (int));
 void kissat_reset_signal_handler (void);
 
 void kissat_init_alarm (void (*handler) (void));
 void kissat_reset_alarm (void);
 
-#ifdef __MINGW32__
+#if defined(__MINGW32__) || defined(_MSC_VER)
 #define SIGNAL_SIGBUS
 #else
 #define SIGNAL_SIGBUS SIGNAL (SIGBUS)
@@ -31,7 +33,7 @@
   if (sig == SIG) return #SIG;
   SIGNALS
 #undef SIGNAL
-#ifndef __MINGW32__
+#if !defined(__MINGW32__) && !defined(_MSC_VER)
   if (sig == SIGALRM)
     return "SIGALRM";
 #endif
@@ -40,4 +42,6 @@
 
 // clang-format on
 
+} // namespace kissat4
+
 #endif
diff -Naur solvers/kissat4/heap.cc solvers/kissat4/heap.cc
--- solvers/kissat4/heap.cc	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/heap.cc	2024-10-31 01:54:52.189968438 +0300
@@ -1,10 +1,12 @@
-#include "allocate.h"
-#include "inlineheap.h"
-#include "internal.h"
-#include "logging.h"
+#include "kissat4/allocate.hh"
+#include "kissat4/inlineheap.hh"
+#include "kissat4/internal.hh"
+#include "kissat4/logging.hh"
 
 #include <string.h>
 
+namespace kissat4 {
+
 void kissat_release_heap (kissat *solver, heap *heap) {
   RELEASE_STACK (heap->stack);
   DEALLOC (heap->pos, heap->size);
@@ -48,15 +50,15 @@
   LOG ("resizing %s heap from %u to %u",
        (heap->tainted ? "tainted" : "untainted"), old_size, new_size);
 
-  heap->pos = kissat_nrealloc (solver, heap->pos, old_size, new_size,
-                               sizeof (unsigned));
+  heap->pos = (unsigned int *) kissat_nrealloc (solver, heap->pos, old_size, new_size,
+                                                sizeof (unsigned));
   if (heap->tainted) {
-    heap->score = kissat_nrealloc (solver, heap->score, old_size, new_size,
-                                   sizeof (double));
+    heap->score = (double*) kissat_nrealloc (solver, heap->score, old_size, new_size,
+                                             sizeof (double));
   } else {
     if (old_size)
       DEALLOC (heap->score, old_size);
-    heap->score = kissat_calloc (solver, new_size, sizeof (double));
+    heap->score = (double*) kissat_calloc (solver, new_size, sizeof (double));
   }
   heap->size = new_size;
 #ifdef CHECK_HEAP
@@ -106,3 +108,5 @@
 void kissat_dump_heap (heap *heap) { dump_heap (heap); }
 
 #endif
+
+} // namespace kissat4
diff -Naur solvers/kissat4/heap.hh solvers/kissat4/heap.hh
--- solvers/kissat4/heap.hh	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/heap.hh	2024-10-31 01:54:52.189968438 +0300
@@ -1,8 +1,8 @@
-#ifndef _heap_h_INCLUDED
-#define _heap_h_INCLUDED
+#ifndef _kissat4_heap_h_INCLUDED
+#define _kissat4_heap_h_INCLUDED
 
-#include "stack.h"
-#include "utilities.h"
+#include "kissat4/stack.hh"
+#include "kissat4/utilities.hh"
 
 #include <assert.h>
 #include <limits.h>
@@ -11,6 +11,8 @@
 #define DISCONTAIN UINT_MAX
 #define DISCONTAINED(IDX) ((int) (IDX) < 0)
 
+namespace kissat4 {
+
 typedef struct heap heap;
 
 struct heap {
@@ -82,4 +84,6 @@
   } while (0)
 #endif
 
+} // namespace kissat4
+
 #endif
diff -Naur solvers/kissat4/ifthenelse.cc solvers/kissat4/ifthenelse.cc
--- solvers/kissat4/ifthenelse.cc	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/ifthenelse.cc	2024-10-31 01:54:52.189968438 +0300
@@ -1,8 +1,10 @@
-#include "ifthenelse.h"
-#include "eliminate.h"
-#include "gates.h"
-#include "inline.h"
+#include "kissat4/ifthenelse.hh"
+#include "kissat4/eliminate.hh"
+#include "kissat4/gates.hh"
+#include "kissat4/inline.hh"
 
+namespace kissat4 {
+  
 static bool get_ternary_clause (kissat *solver, reference ref, unsigned *p,
                                 unsigned *q, unsigned *r) {
   clause *clause = kissat_dereference_clause (solver, ref);
@@ -172,3 +174,5 @@
   }
   return false;
 }
+
+} // namespace kissat4
diff -Naur solvers/kissat4/ifthenelse.hh solvers/kissat4/ifthenelse.hh
--- solvers/kissat4/ifthenelse.hh	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/ifthenelse.hh	2024-10-31 01:54:52.189968438 +0300
@@ -1,11 +1,15 @@
-#ifndef _ifthenelse_h_INCLUDED
-#define _ifthenelse_h_INCLUDED
+#ifndef _kissat4_ifthenelse_h_INCLUDED
+#define _kissat4_ifthenelse_h_INCLUDED
 
 #include <stdbool.h>
 
+namespace kissat4 {
+    
 struct kissat;
 
 bool kissat_find_if_then_else_gate (struct kissat *, unsigned lit,
                                     unsigned negative);
 
+} // namespace kissat4
+
 #endif
diff -Naur solvers/kissat4/import.cc solvers/kissat4/import.cc
--- solvers/kissat4/import.cc	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/import.cc	2024-10-31 01:54:52.189968438 +0300
@@ -1,6 +1,8 @@
-#include "internal.h"
-#include "logging.h"
-#include "resize.h"
+#include "kissat4/internal.hh"
+#include "kissat4/logging.hh"
+#include "kissat4/resize.hh"
+
+namespace kissat4 {
 
 static void adjust_imports_for_external_literal (kissat *solver,
                                                  unsigned eidx) {
@@ -31,9 +33,9 @@
   import->lit = ilit;
   LOG ("importing %s external variable %u as internal literal %u",
        extension ? "extension" : "original", eidx, ilit);
-  while (iidx >= SIZE_STACK (solver->export))
-    PUSH_STACK (solver->export, 0);
-  POKE_STACK (solver->export, iidx, (int) eidx);
+  while (iidx >= SIZE_STACK (solver->export_))
+    PUSH_STACK (solver->export_, 0);
+  POKE_STACK (solver->export_, iidx, (int) eidx);
   LOG ("exporting internal variable %u as external literal %u", iidx, eidx);
 }
 
@@ -98,3 +100,5 @@
   kissat_activate_literal (solver, res);
   return res;
 }
+
+} // namespace kissat4
diff -Naur solvers/kissat4/import.hh solvers/kissat4/import.hh
--- solvers/kissat4/import.hh	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/import.hh	2024-10-31 01:54:52.189968438 +0300
@@ -1,9 +1,13 @@
-#ifndef _import_h_INLCUDED
-#define _import_h_INLCUDED
+#ifndef _kissat4_import_h_INCLUDED
+#define _kissat4_import_h_INCLUDED
 
+namespace kissat4 {
+    
 struct kissat;
 
 unsigned kissat_import_literal (struct kissat *solver, int lit);
 unsigned kissat_fresh_literal (struct kissat *solver);
 
+} // namespace kissat4
+
 #endif
diff -Naur solvers/kissat4/inlineassign.hh solvers/kissat4/inlineassign.hh
--- solvers/kissat4/inlineassign.hh	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/inlineassign.hh	2024-10-31 01:54:52.189968438 +0300
@@ -1,5 +1,7 @@
-#ifndef _inlineassign_h_INLCUDED
-#define _inlineassign_h_INLCUDED
+#ifndef _kissat4_inlineassign_h_INCLUDED
+#define _kissat4_inlineassign_h_INCLUDED
+
+namespace kissat4 {
 
 #ifdef FAST_ASSIGN
 #define kissat_assign kissat_fast_assign
@@ -17,7 +19,12 @@
   watches watches = WATCHES (not_lit);
   if (!kissat_empty_vector (&watches)) {
     watch *w = BEGIN_WATCHES (watches);
+#ifdef _MSC_VER
+    _mm_prefetch((const char*) w, _MM_HINT_NTA);
+#elif defined(__GNUC__) || defined(__clang__)
     __builtin_prefetch (w, 0, 1);
+#else
+#endif
   }
 
 #ifndef FAST_ASSIGN
@@ -97,4 +104,6 @@
   return res;
 }
 
+} // namespace kissat4
+
 #endif
diff -Naur solvers/kissat4/inlineframes.hh solvers/kissat4/inlineframes.hh
--- solvers/kissat4/inlineframes.hh	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/inlineframes.hh	2024-10-31 01:54:52.189968438 +0300
@@ -1,9 +1,11 @@
-#ifndef _inlineframes_h_INCLUDEDd
-#define _inlineframes_h_INCLUDEDd
+#ifndef _kissat4_inlineframes_h_INCLUDEDd
+#define _kissat4_inlineframes_h_INCLUDEDd
 
-#include "allocate.h"
-#include "internal.h"
+#include "kissat4/allocate.hh"
+#include "kissat4/internal.hh"
 
+namespace kissat4 {
+  
 static inline void kissat_push_frame (kissat *solver, unsigned decision) {
   assert (!solver->level || decision != UINT_MAX);
   const size_t trail = SIZE_ARRAY (solver->trail);
@@ -15,4 +17,6 @@
   PUSH_STACK (solver->frames, frame);
 }
 
+} // namespace kissat4
+
 #endif
diff -Naur solvers/kissat4/inlineheap.hh solvers/kissat4/inlineheap.hh
--- solvers/kissat4/inlineheap.hh	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/inlineheap.hh	2024-10-31 01:54:52.193968630 +0300
@@ -1,14 +1,16 @@
-#ifndef _inlineheap_h_INCLUDED
-#define _inlineheap_h_INCLUDED
+#ifndef _kissat4_inlineheap_h_INCLUDED
+#define _kissat4_inlineheap_h_INCLUDED
 
-#include "allocate.h"
-#include "internal.h"
-#include "logging.h"
+#include "kissat4/allocate.hh"
+#include "kissat4/internal.hh"
+#include "kissat4/logging.hh"
 
 #define HEAP_CHILD(POS) (assert ((POS) < (1u << 31)), (2 * (POS) + 1))
 
 #define HEAP_PARENT(POS) (assert ((POS) > 0), (((POS) -1) / 2))
 
+namespace kissat4 {
+
 static inline void kissat_bubble_up (kissat *solver, heap *heap,
                                      unsigned idx) {
   unsigned *stack = BEGIN_STACK (heap->stack);
@@ -173,4 +175,6 @@
 #endif
 }
 
+} // namespace kissat4
+
 #endif
diff -Naur solvers/kissat4/inline.hh solvers/kissat4/inline.hh
--- solvers/kissat4/inline.hh	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/inline.hh	2024-10-31 01:54:52.193968630 +0300
@@ -1,8 +1,10 @@
-#ifndef _inline_h_INCLUDED
-#define _inline_h_INCLUDED
+#ifndef _kissat4_inline_h_INCLUDED
+#define _kissat4_inline_h_INCLUDED
 
-#include "inlinevector.h"
-#include "logging.h"
+#include "kissat4/inlinevector.hh"
+#include "kissat4/logging.hh"
+
+namespace kissat4 {
 
 #ifdef METRICS
 
@@ -197,7 +199,7 @@
 static inline int kissat_export_literal (kissat *solver, unsigned ilit) {
   const unsigned iidx = IDX (ilit);
   assert (iidx < (unsigned) INT_MAX);
-  int elit = PEEK_STACK (solver->export, iidx);
+  int elit = PEEK_STACK (solver->export_, iidx);
   if (!elit)
     return 0;
   if (NEGATED (ilit))
@@ -325,4 +327,6 @@
 #define CHECKING_OR_PROVING
 #endif
 
+} // namespace kissat4
+
 #endif
diff -Naur solvers/kissat4/inline.hh.rej solvers/kissat4/inline.hh.rej
--- solvers/kissat4/inline.hh.rej	1970-01-01 03:00:00.000000000 +0300
+++ solvers/kissat4/inline.hh.rej	2024-10-31 01:54:52.193968630 +0300
@@ -0,0 +1,40 @@
+--- solvers/kissat4/inline.hh	2024-09-12 13:25:21.000000000 +0300
++++ solvers/kissat4/inline.hh	2024-10-26 20:08:13.991852757 +0300
+@@ -1,8 +1,8 @@
+-#ifndef _inline_h_INCLUDED
+-#define _inline_h_INCLUDED
++#ifndef _kissat4_inline_h_INCLUDED
++#define _kissat4_inline_h_INCLUDED
+ 
+-#include "inlinevector.h"
+-#include "logging.h"
++#include "kissat4/inlinevector.hh"
++#include "kissat4/logging.hh"
+ 
+ #ifdef METRICS
+ 
+@@ -12,6 +12,8 @@
+ 
+ #endif
+ 
++namespace kissat4 {
++
+ static inline bool kissat_propagated (kissat *solver) {
+   assert (BEGIN_ARRAY (solver->trail) <= solver->propagate);
+   assert (solver->propagate <= END_ARRAY (solver->trail));
+@@ -197,7 +199,7 @@
+ static inline int kissat_export_literal (kissat *solver, unsigned ilit) {
+   const unsigned iidx = IDX (ilit);
+   assert (iidx < (unsigned) INT_MAX);
+-  int elit = PEEK_STACK (solver->export, iidx);
++  int elit = PEEK_STACK (solver->export_, iidx);
+   if (!elit)
+     return 0;
+   if (NEGATED (ilit))
+@@ -325,4 +327,6 @@
+ #define CHECKING_OR_PROVING
+ #endif
+ 
++} // namespace kissat4
++
+ #endif
diff -Naur solvers/kissat4/inlinequeue.hh solvers/kissat4/inlinequeue.hh
--- solvers/kissat4/inlinequeue.hh	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/inlinequeue.hh	2024-10-31 01:54:52.193968630 +0300
@@ -1,8 +1,10 @@
-#ifndef _inlinequeue_h_INCLUDED
-#define _inlinequeue_h_INCLUDED
+#ifndef _kissat4_inlinequeue_h_INCLUDED
+#define _kissat4_inlinequeue_h_INCLUDED
 
-#include "internal.h"
-#include "logging.h"
+#include "kissat4/internal.hh"
+#include "kissat4/logging.hh"
+
+namespace kissat4 {
 
 static inline void kissat_update_queue (kissat *solver, const links *links,
                                         unsigned idx) {
@@ -114,4 +116,6 @@
   kissat_check_queue (solver);
 }
 
-#endif
+} // namespace kissat4
+
+#endif
\ No newline at end of file
diff -Naur solvers/kissat4/inlinevector.hh solvers/kissat4/inlinevector.hh
--- solvers/kissat4/inlinevector.hh	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/inlinevector.hh	2024-10-31 01:54:52.193968630 +0300
@@ -1,7 +1,9 @@
-#ifndef _inlinevector_h_INCLUDED
-#define _inlinevector_h_INCLUDED
+#ifndef _kissat4_inlinevector_h_INCLUDED
+#define _kissat4_inlinevector_h_INCLUDED
 
-#include "internal.h"
+#include "kissat4/internal.hh"
+
+namespace kissat4 {
 
 static inline unsigned *kissat_begin_vector (kissat *solver,
                                              vector *vector) {
@@ -190,4 +192,6 @@
 
 #endif
 
+} // namespace kissat4
+
 #endif
diff -Naur solvers/kissat4/internal.cc solvers/kissat4/internal.cc
--- solvers/kissat4/internal.cc	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/internal.cc	2024-10-31 01:54:52.193968630 +0300
@@ -1,15 +1,15 @@
-#include "allocate.h"
-#include "backtrack.h"
-#include "error.h"
-#include "import.h"
-#include "inline.h"
-#include "inlineframes.h"
-#include "print.h"
-#include "propsearch.h"
-#include "require.h"
-#include "resize.h"
-#include "resources.h"
-#include "search.h"
+#include "kissat4/allocate.hh"
+#include "kissat4/backtrack.hh"
+#include "kissat4/error.hh"
+#include "kissat4/import.hh"
+#include "kissat4/inline.hh"
+#include "kissat4/inlineframes.hh"
+#include "kissat4/print.hh"
+#include "kissat4/propsearch.hh"
+#include "kissat4/require.hh"
+#include "kissat4/resize.hh"
+#include "kissat4/resources.hh"
+#include "kissat4/search.hh"
 
 #include <assert.h>
 #include <inttypes.h>
@@ -17,13 +17,15 @@
 #include <stdio.h>
 #include <stdlib.h>
 
+namespace kissat4 {
+
 void kissat_reset_last_learned (kissat *solver) {
   for (really_all_last_learned (p))
     *p = INVALID_REF;
 }
 
 kissat *kissat_init (void) {
-  kissat *solver = kissat_calloc (0, 1, sizeof *solver);
+  kissat *solver = (kissat*) kissat_calloc (0, 1, sizeof *solver);
 #ifndef NOPTIONS
   kissat_init_options (&solver->options);
 #else
@@ -77,7 +79,7 @@
   kissat_release_vectors (solver);
   kissat_release_phases (solver);
 
-  RELEASE_STACK (solver->export);
+  RELEASE_STACK (solver->export_);
   RELEASE_STACK (solver->import);
 
   DEALLOC_VARIABLE_INDEXED (assigned);
@@ -197,6 +199,10 @@
 #endif
 }
 
+clause* kissat_get_conflict (kissat *solver) {
+  return &solver->conflict;
+}
+
 void kissat_set_decision_limit (kissat *solver, unsigned limit) {
   kissat_require_initialized (solver);
   limits *limits = &solver->limits;
@@ -209,6 +215,13 @@
        limits->decisions, limit);
 }
 
+void kissat_unset_decision_limit (kissat *solver) {
+  kissat_require_initialized (solver);
+  limited *limited = &solver->limited;
+  limited->decisions = false;
+  LOG ("unset decision limit");
+}
+
 void kissat_set_conflict_limit (kissat *solver, unsigned limit) {
   kissat_require_initialized (solver);
   limits *limits = &solver->limits;
@@ -221,6 +234,13 @@
        limits->conflicts, limit);
 }
 
+void kissat_unset_conflict_limit (kissat *solver) {
+  kissat_require_initialized (solver);
+  limited *limited = &solver->limited;
+  limited->conflicts = false;
+  LOG ("unset conflict limit");
+}
+
 void kissat_print_statistics (kissat *solver) {
 #ifndef QUIET
   kissat_require_initialized (solver);
@@ -255,6 +275,14 @@
   (void) solver;
 }
 
+statistics* kissat_get_statistics (kissat *solver) {
+  return &solver->statistics;
+}
+
+options* kissat_get_options (kissat *solver) {
+  return &solver->options;
+}
+
 void kissat_add (kissat *solver, int elit) {
   kissat_require_initialized (solver);
   kissat_require (!GET (searches), "incremental solving not supported");
@@ -478,6 +506,12 @@
   assert (solver->termination.flagged);
 }
 
+void kissat_unset_termination (kissat *solver) {
+  kissat_require_initialized (solver);
+  solver->termination.flagged = 0;
+  assert (!solver->termination.flagged);
+}
+
 void kissat_set_terminate (kissat *solver, void *state,
                            int (*terminate) (void *)) {
   solver->termination.terminate = 0;
@@ -510,3 +544,5 @@
     tmp = -tmp;
   return tmp < 0 ? -elit : elit;
 }
+
+} // namespace kissat4
diff -Naur solvers/kissat4/internal.hh solvers/kissat4/internal.hh
--- solvers/kissat4/internal.hh	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/internal.hh	2024-10-31 01:54:52.193968630 +0300
@@ -1,37 +1,39 @@
-#ifndef _internal_h_INCLUDED
-#define _internal_h_INCLUDED
+#ifndef _kissat4_internal_h_INCLUDED
+#define _kissat4_internal_h_INCLUDED
 
-#include "arena.h"
-#include "array.h"
-#include "assign.h"
-#include "averages.h"
-#include "check.h"
-#include "classify.h"
-#include "clause.h"
-#include "cover.h"
-#include "extend.h"
-#include "flags.h"
-#include "format.h"
-#include "frames.h"
-#include "heap.h"
-#include "kimits.h"
-#include "kissat.h"
-#include "literal.h"
-#include "mode.h"
-#include "options.h"
-#include "phases.h"
-#include "profile.h"
-#include "proof.h"
-#include "queue.h"
-#include "random.h"
-#include "reluctant.h"
-#include "rephase.h"
-#include "smooth.h"
-#include "stack.h"
-#include "statistics.h"
-#include "value.h"
-#include "vector.h"
-#include "watch.h"
+#include "kissat4/arena.hh"
+#include "kissat4/array.hh"
+#include "kissat4/assign.hh"
+#include "kissat4/averages.hh"
+#include "kissat4/check.hh"
+#include "kissat4/classify.hh"
+#include "kissat4/clause.hh"
+#include "kissat4/cover.hh"
+#include "kissat4/extend.hh"
+#include "kissat4/flags.hh"
+#include "kissat4/format.hh"
+#include "kissat4/frames.hh"
+#include "kissat4/heap.hh"
+#include "kissat4/kimits.hh"
+#include "kissat4/kissat.hh"
+#include "kissat4/literal.hh"
+#include "kissat4/mode.hh"
+#include "kissat4/options.hh"
+#include "kissat4/phases.hh"
+#include "kissat4/profile.hh"
+#include "kissat4/proof.hh"
+#include "kissat4/queue.hh"
+#include "kissat4/random.hh"
+#include "kissat4/reluctant.hh"
+#include "kissat4/rephase.hh"
+#include "kissat4/smooth.hh"
+#include "kissat4/stack.hh"
+#include "kissat4/statistics.hh"
+#include "kissat4/value.hh"
+#include "kissat4/vector.hh"
+#include "kissat4/watch.hh"
+
+namespace kissat4 {
 
 typedef struct datarank datarank;
 
@@ -105,7 +107,7 @@
   unsigned active;
   unsigned randec;
 
-  ints export;
+  ints export_;
   ints units;
   imports import;
   extensions extend;
@@ -291,4 +293,6 @@
 
 void kissat_reset_last_learned (kissat *solver);
 
-#endif
+} // namespace kissat4
+
+#endif
\ No newline at end of file
diff -Naur solvers/kissat4/keatures.hh solvers/kissat4/keatures.hh
--- solvers/kissat4/keatures.hh	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/keatures.hh	2024-10-31 01:54:52.193968630 +0300
@@ -1,5 +1,5 @@
-#ifndef _keatures_h_INCLUDED
-#define _keatures_h_INCLUDED
+#ifndef _kissat4_keatures_h_INCLUDED
+#define _kissat4_keatures_h_INCLUDED
 
 #if __BYTE_ORDER__ == __ORDER_BIG_ENDIAN__
 #define KISSAT_IS_BIG_ENDIAN
diff -Naur solvers/kissat4/kimits.cc solvers/kissat4/kimits.cc
--- solvers/kissat4/kimits.cc	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/kimits.cc	2024-10-31 01:54:52.193968630 +0300
@@ -1,15 +1,17 @@
-#include "internal.h"
-#include "logging.h"
-#include "mode.h"
-#include "print.h"
-#include "reduce.h"
-#include "rephase.h"
-#include "resources.h"
-#include "restart.h"
+#include "kissat4/internal.hh"
+#include "kissat4/logging.hh"
+#include "kissat4/mode.hh"
+#include "kissat4/print.hh"
+#include "kissat4/reduce.hh"
+#include "kissat4/rephase.hh"
+#include "kissat4/resources.hh"
+#include "kissat4/restart.hh"
 
 #include <inttypes.h>
 #include <math.h>
 
+namespace kissat4 {
+
 double kissat_logn (uint64_t count) {
   assert (count > 0);
   const double res = log10 (count + 9);
@@ -192,3 +194,5 @@
   (void) solver;
 #endif
 }
+
+} // namespace kissat4
diff -Naur solvers/kissat4/kimits.hh solvers/kissat4/kimits.hh
--- solvers/kissat4/kimits.hh	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/kimits.hh	2024-10-31 01:54:52.193968630 +0300
@@ -1,9 +1,11 @@
-#ifndef _limits_h_INCLUDED
-#define _limits_h_INCLUDED
+#ifndef _kissat4_limits_h_INCLUDED
+#define _kissat4_limits_h_INCLUDED
 
 #include <stdbool.h>
 #include <stdint.h>
 
+namespace kissat4 {
+
 typedef struct bounds bounds;
 typedef struct changes changes;
 typedef struct delays delays;
@@ -182,4 +184,6 @@
 #define REDUCE_DELAY(NAME) \
   kissat_reduce_delay (solver, &solver->delays.NAME)
 
+} // namespace kissat4
+
 #endif
diff -Naur solvers/kissat4/kissat.hh solvers/kissat4/kissat.hh
--- solvers/kissat4/kissat.hh	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/kissat.hh	2024-10-31 01:54:52.193968630 +0300
@@ -1,6 +1,8 @@
-#ifndef _kissat_h_INCLUDED
-#define _kissat_h_INCLUDED
+#ifndef _kissat4_kissat_h_INCLUDED
+#define _kissat4_kissat_h_INCLUDED
 
+namespace kissat4 {
+    
 typedef struct kissat kissat;
 
 // Default (partial) IPASIR interface.
@@ -18,7 +20,9 @@
 // Additional API functions.
 
 void kissat_terminate (kissat *solver);
+void kissat_unset_termination (kissat *solver);
 void kissat_reserve (kissat *solver, int max_var);
+struct clause* kissat_get_conflict (kissat *solver);
 
 const char *kissat_id (void);
 const char *kissat_version (void);
@@ -35,8 +39,15 @@
 int kissat_set_configuration (kissat *solver, const char *name);
 
 void kissat_set_conflict_limit (kissat *solver, unsigned);
+void kissat_unset_conflict_limit (kissat *solver);
 void kissat_set_decision_limit (kissat *solver, unsigned);
+void kissat_unset_decision_limit (kissat *solver);
 
 void kissat_print_statistics (kissat *solver);
+struct statistics* kissat_get_statistics (kissat *solver);
+
+struct options* kissat_get_options (kissat *solver);
+
+} // namespace kissat4
 
 #endif
diff -Naur solvers/kissat4/kitten.cc solvers/kissat4/kitten.cc
--- solvers/kissat4/kitten.cc	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/kitten.cc	2024-10-31 01:54:52.193968630 +0300
@@ -1,6 +1,6 @@
-#include "kitten.h"
-#include "random.h"
-#include "stack.h"
+#include "kissat4/kitten.hh"
+#include "kissat4/random.hh"
+#include "kissat4/stack.hh"
 
 #include <assert.h>
 #include <inttypes.h>
@@ -111,10 +111,10 @@
 #else // '#ifdef STAND_ALONE_KITTEN'
 /*------------------------------------------------------------------------*/
 
-#include "allocate.h"  // Use 'kissat' allocator if embedded.
-#include "error.h"     // Use 'kissat_fatal' if embedded.
-#include "internal.h"  // Also use 'kissat' statistics if embedded.
-#include "terminate.h" // For macros defining termination macro.
+#include "kissat4/allocate.hh"  // Use 'kissat' allocator if embedded.
+#include "kissat4/error.hh"     // Use 'kissat_fatal' if embedded.
+#include "kissat4/internal.hh"  // Also use 'kissat' statistics if embedded.
+#include "kissat4/terminate.hh" // For macros defining termination macro.
 
 #define KITTEN_TICKS (solver->statistics.kitten_ticks)
 
@@ -122,6 +122,8 @@
 #endif // STAND_ALONE_KITTEN
 /*------------------------------------------------------------------------*/
 
+namespace kissat4 {
+
 #define INVALID UINT_MAX
 #define MAX_VARS ((1u << 31) - 1)
 
@@ -257,7 +259,7 @@
   unsigneds assumptions;
   unsigneds core;
   unsigneds eclause;
-  unsigneds export;
+  unsigneds export_;
   unsigneds klause;
   unsigneds klauses;
   unsigneds resolved;
@@ -549,9 +551,9 @@
     if (BYTES) \
       memcpy ((P), OLD_PTR, BYTES); \
     void *NEW_PTR = (P); \
-    (P) = OLD_PTR; \
+    (P) = (decltype(P)) OLD_PTR; \
     DEALLOC ((P), old_size / 2); \
-    (P) = NEW_PTR; \
+    (P) = (decltype(P)) NEW_PTR; \
   } while (0)
 
 #define RESIZE2(P) \
@@ -562,9 +564,9 @@
     if (BYTES) \
       memcpy ((P), OLD_PTR, BYTES); \
     void *NEW_PTR = (P); \
-    (P) = OLD_PTR; \
+    (P) = (decltype(P)) OLD_PTR; \
     DEALLOC ((P), old_size); \
-    (P) = NEW_PTR; \
+    (P) = (decltype(P)) NEW_PTR; \
   } while (0)
 
 static void enlarge_internal (kitten *kitten, size_t new_lits) {
@@ -934,8 +936,8 @@
 
   unsigned iidx = kitten->import[eidx];
   if (!iidx) {
-    iidx = SIZE_STACK (kitten->export);
-    PUSH_STACK (kitten->export, eidx);
+    iidx = SIZE_STACK (kitten->export_);
+    PUSH_STACK (kitten->export_, eidx);
     kitten->import[eidx] = iidx + 1;
   } else
     iidx--;
@@ -951,8 +953,8 @@
 
 static unsigned export_literal (kitten *kitten, unsigned ilit) {
   const unsigned iidx = ilit / 2;
-  assert (iidx < SIZE_STACK (kitten->export));
-  const unsigned eidx = PEEK_STACK (kitten->export, iidx);
+  assert (iidx < SIZE_STACK (kitten->export_));
+  const unsigned eidx = PEEK_STACK (kitten->export_, iidx);
   const unsigned elit = 2 * eidx + (ilit & 1);
   return elit;
 }
@@ -999,8 +1001,8 @@
   for (all_kits (kit))
     CLEAR_STACK (KATCHES (kit));
 
-  while (!EMPTY_STACK (kitten->export))
-    kitten->import[POP_STACK (kitten->export)] = 0;
+  while (!EMPTY_STACK (kitten->export_))
+    kitten->import[POP_STACK (kitten->export_)] = 0;
 
   const size_t lits = kitten->size;
   const unsigned vars = lits / 2;
@@ -1028,7 +1030,7 @@
   RELEASE_STACK (kitten->assumptions);
   RELEASE_STACK (kitten->core);
   RELEASE_STACK (kitten->eclause);
-  RELEASE_STACK (kitten->export);
+  RELEASE_STACK (kitten->export_);
   RELEASE_STACK (kitten->klause);
   RELEASE_STACK (kitten->klauses);
   RELEASE_STACK (kitten->resolved);
@@ -1884,6 +1886,8 @@
 
   unsigned reason_ref = kitten->inconsistent;
 
+  unsigneds *core = NULL;
+
   if (reason_ref == INVALID) {
     assert (!EMPTY_STACK (kitten->assumptions));
     reason_ref = kitten->failing;
@@ -1894,7 +1898,7 @@
   }
 
   PUSH_STACK (*resolved, reason_ref);
-  unsigneds *core = &kitten->core;
+  core = &kitten->core;
   assert (EMPTY_STACK (*core));
 
   while (!EMPTY_STACK (*resolved)) {
@@ -2128,6 +2132,9 @@
   return kitten->failed[ilit];
 }
 
+} // namespace kissat4
+
+
 /*------------------------------------------------------------------------*/
 
 #ifdef STAND_ALONE_KITTEN
@@ -2155,7 +2162,7 @@
   return bytes / (double) (1 << 20);
 }
 
-#include "attribute.h"
+#include "kissat4/attribute.hh"
 
 static void msg (const char *, ...) __attribute__ ((format (printf, 1, 2)));
 
@@ -2394,7 +2401,7 @@
 
 static void print_witness (kitten *kitten, int max_var) {
   assert (max_var >= 0);
-  line line = {.size = 0};
+  line line = {0};
   const size_t parsed_lits = 2 * (size_t) max_var;
   for (size_t ulit = 0; ulit < parsed_lits; ulit += 2) {
     const value sign = kitten_value (kitten, ulit);
diff -Naur solvers/kissat4/kitten.hh solvers/kissat4/kitten.hh
--- solvers/kissat4/kitten.hh	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/kitten.hh	2024-10-31 01:54:52.193968630 +0300
@@ -1,10 +1,12 @@
-#ifndef _kitten_h_INCLUDED
-#define _kitten_h_INCLUDED
+#ifndef _kissat4_kitten_h_INCLUDED
+#define _kissat4_kitten_h_INCLUDED
 
 #include <stdbool.h>
 #include <stdint.h>
 #include <stdlib.h>
 
+namespace kissat4 {
+
 typedef struct kitten kitten;
 
 kitten *kitten_init (void);
@@ -51,4 +53,6 @@
 struct kissat;
 kitten *kitten_embedded (struct kissat *);
 
+} // namespace kissat4
+
 #endif
diff -Naur solvers/kissat4/krite.cc solvers/kissat4/krite.cc
--- solvers/kissat4/krite.cc	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/krite.cc	2024-10-31 01:54:52.193968630 +0300
@@ -1,10 +1,12 @@
-#include "krite.h"
-#include "inline.h"
-#include "internal.h"
-#include "watch.h"
+#include "kissat4/krite.hh"
+#include "kissat4/inline.hh"
+#include "kissat4/internal.hh"
+#include "kissat4/watch.hh"
 
 #include <inttypes.h>
 
+namespace kissat4 {
+
 void kissat_write_dimacs (kissat *solver, FILE *file) {
   size_t imported = SIZE_STACK (solver->import);
   if (imported)
@@ -43,3 +45,5 @@
       fputs ("0\n", file);
     }
 }
+
+} // namespace kissat4
diff -Naur solvers/kissat4/krite.hh solvers/kissat4/krite.hh
--- solvers/kissat4/krite.hh	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/krite.hh	2024-10-31 01:54:52.193968630 +0300
@@ -1,9 +1,13 @@
-#ifndef _krite_h_INCLUDED
-#define _krite_h_INCLUDED
+#ifndef _kissat4_krite_h_INCLUDED
+#define _kissat4_krite_h_INCLUDED
 
 #include <stdio.h>
 
+namespace kissat4 {
+    
 struct kissat;
 void kissat_write_dimacs (struct kissat *, FILE *);
 
+} // namespace kissat4
+
 #endif
diff -Naur solvers/kissat4/learn.cc solvers/kissat4/learn.cc
--- solvers/kissat4/learn.cc	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/learn.cc	2024-10-31 01:54:52.193968630 +0300
@@ -1,10 +1,12 @@
-#include "learn.h"
-#include "backtrack.h"
-#include "inline.h"
-#include "reluctant.h"
+#include "kissat4/learn.hh"
+#include "kissat4/backtrack.hh"
+#include "kissat4/inline.hh"
+#include "kissat4/reluctant.hh"
 
 #include <inttypes.h>
 
+namespace kissat4 {
+
 static unsigned backjump_limit (struct kissat *solver) {
 #ifdef NOPTIONS
   (void) solver;
@@ -208,3 +210,5 @@
       insert_last_learned (solver, ref);
   }
 }
+
+} // namespace kissat4
diff -Naur solvers/kissat4/learn.hh solvers/kissat4/learn.hh
--- solvers/kissat4/learn.hh	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/learn.hh	2024-10-31 01:54:52.193968630 +0300
@@ -1,10 +1,14 @@
-#ifndef _learn_h_INCLUDED
-#define _learn_h_INCLUDED
+#ifndef _kissat4_learn_h_INCLUDED
+#define _kissat4_learn_h_INCLUDED
 
+namespace kissat4 {
+    
 struct kissat;
 
 void kissat_learn_clause (struct kissat *);
 void kissat_update_learned (struct kissat *, unsigned glue, unsigned size);
 unsigned kissat_determine_new_level (struct kissat *, unsigned jump);
 
+} // namespace kissat4
+
 #endif
diff -Naur solvers/kissat4/literal.hh solvers/kissat4/literal.hh
--- solvers/kissat4/literal.hh	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/literal.hh	2024-10-31 01:54:52.193968630 +0300
@@ -1,5 +1,5 @@
-#ifndef _literal_h_INCLUDED
-#define _literal_h_INCLUDED
+#ifndef _kissat4_literal_h_INCLUDED
+#define _kissat4_literal_h_INCLUDED
 
 #include <limits.h>
 
diff -Naur solvers/kissat4/logging.cc solvers/kissat4/logging.cc
--- solvers/kissat4/logging.cc	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/logging.cc	2024-10-31 01:54:52.193968630 +0300
@@ -1,11 +1,13 @@
 #if defined(LOGGING) && !defined(QUIET)
 
-#include "colors.h"
-#include "inline.h"
+#include "kissat4/colors.hh"
+#include "kissat4/inline.hh"
 
 #include <stdarg.h>
 #include <string.h>
 
+namespace kissat4 {
+
 static void begin_logging (kissat *solver, const char *prefix,
                            const char *fmt, va_list *ap) {
   TERMINAL (stdout, 1);
@@ -439,8 +441,14 @@
   end_logging ();
 }
 
+} // namespace kissat4
+
 #else
 
+namespace kissat4 {
+  
 int kissat_log_dummy_to_avoid_pedantic_warning;
 
+} // namespace kissat4
+
 #endif
diff -Naur solvers/kissat4/logging.hh solvers/kissat4/logging.hh
--- solvers/kissat4/logging.hh	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/logging.hh	2024-10-31 01:54:52.193968630 +0300
@@ -1,12 +1,14 @@
-#ifndef _logging_h_INCLUDED
-#define _logging_h_INCLUDED
+#ifndef _kissat4_logging_h_INCLUDED
+#define _kissat4_logging_h_INCLUDED
 
 #if defined(LOGGING) && !defined(QUIET)
 
-#include "attribute.h"
-#include "extend.h"
-#include "reference.h"
-#include "watch.h"
+#include "kissat4/attribute.hh"
+#include "kissat4/extend.hh"
+#include "kissat4/reference.hh"
+#include "kissat4/watch.hh"
+
+namespace kissat4 {
 
 // clang-format off
 
@@ -15,91 +17,91 @@
 const char * kissat_log_repr (kissat *, unsigned lit, const unsigned *);
 
 void kissat_log_msg (kissat *, const char*, const char *fmt, ...)
-ATTRIBUTE_FORMAT (3, 4);
+KISSAT_ATTRIBUTE_FORMAT (3, 4);
 
 void kissat_log_clause (kissat *, const char*, const clause *,
                         const char *, ...)
-ATTRIBUTE_FORMAT (4, 5);
+KISSAT_ATTRIBUTE_FORMAT (4, 5);
 
 void kissat_log_counted_clause (kissat *, const char*, const clause *,
                                 const unsigned *, const char *, ...)
-ATTRIBUTE_FORMAT (5, 6);
+KISSAT_ATTRIBUTE_FORMAT (5, 6);
 
 void kissat_log_repr_clause (kissat *, const char*, const clause *,
 			     const unsigned *, const char *, ...)
-ATTRIBUTE_FORMAT (5, 6);
+KISSAT_ATTRIBUTE_FORMAT (5, 6);
 
 void kissat_log_binary (kissat *, const char*,
                         unsigned, unsigned, const char *, ...)
-ATTRIBUTE_FORMAT (5, 6);
+KISSAT_ATTRIBUTE_FORMAT (5, 6);
 
 void kissat_log_unary (kissat *, const char*, unsigned, const char *, ...)
-ATTRIBUTE_FORMAT (4, 5);
+KISSAT_ATTRIBUTE_FORMAT (4, 5);
 
 void kissat_log_lits (kissat *, const char*,
                       size_t, const unsigned *, const char *, ...)
-ATTRIBUTE_FORMAT (5, 6);
+KISSAT_ATTRIBUTE_FORMAT (5, 6);
 
 void kissat_log_litset (kissat *, const char*,
                         size_t, const unsigned *, const char *, ...)
-ATTRIBUTE_FORMAT (5, 6);
+KISSAT_ATTRIBUTE_FORMAT (5, 6);
 
 void kissat_log_litpart (kissat *, const char*,
                          size_t, const unsigned *, const char *, ...)
-ATTRIBUTE_FORMAT (5, 6);
+KISSAT_ATTRIBUTE_FORMAT (5, 6);
 
 void kissat_log_counted_ref_lits (kissat *, const char*, reference,
                                   size_t, const unsigned *,
 			          const unsigned * counts, const char *, ...)
-ATTRIBUTE_FORMAT (7, 8);
+KISSAT_ATTRIBUTE_FORMAT (7, 8);
 
 void kissat_log_counted_lits (kissat *, const char*,
 			      size_t, const unsigned *,
 			      const unsigned * counts, const char *, ...)
-ATTRIBUTE_FORMAT (6, 7);
+KISSAT_ATTRIBUTE_FORMAT (6, 7);
 
 void kissat_log_unsigneds (kissat *, const char*,
                            size_t, const unsigned *, const char *, ...)
-ATTRIBUTE_FORMAT (5, 6);
+KISSAT_ATTRIBUTE_FORMAT (5, 6);
 
 #define INVALID_GATE_ID (~(size_t)0)
 
 void kissat_log_and_gate (kissat *, const char*, size_t id, unsigned * repr,
                           unsigned lhs, size_t, const unsigned * rhs,
 			  const char *, ...)
-ATTRIBUTE_FORMAT (8, 9);
+KISSAT_ATTRIBUTE_FORMAT (8, 9);
 
 void kissat_log_xor_gate (kissat *, const char*, size_t id, unsigned * repr,
                           unsigned lhs, size_t, const unsigned * rhs,
 			  const char *, ...)
-ATTRIBUTE_FORMAT (8, 9);
+KISSAT_ATTRIBUTE_FORMAT (8, 9);
 
 void kissat_log_ite_gate (kissat *, const char*, size_t id, unsigned * repr,
                           unsigned lhs, unsigned cond, unsigned then_lit,
 			  unsigned else_lit, const char *, ...)
-ATTRIBUTE_FORMAT (9, 10);
+KISSAT_ATTRIBUTE_FORMAT (9, 10);
 
 void kissat_log_ints (kissat *, const char*,
                       size_t, const int *, const char *, ...)
-ATTRIBUTE_FORMAT (5, 6);
+KISSAT_ATTRIBUTE_FORMAT (5, 6);
 
 void kissat_log_extensions (kissat *, const char *,
 			    size_t, const extension *, const char *, ...)
-ATTRIBUTE_FORMAT (5, 6);
+KISSAT_ATTRIBUTE_FORMAT (5, 6);
 
 void kissat_log_xor (struct kissat *, const char*, unsigned lit,
 		     unsigned size, const unsigned *lits, const char *fmt, ...)
-ATTRIBUTE_FORMAT (6, 7);
+KISSAT_ATTRIBUTE_FORMAT (6, 7);
 
 void kissat_log_ref (kissat *, const char*, reference, const char *, ...)
-ATTRIBUTE_FORMAT (4, 5);
+KISSAT_ATTRIBUTE_FORMAT (4, 5);
 
 void kissat_log_resolvent (kissat *, const char*, const char *, ...)
-ATTRIBUTE_FORMAT (3, 4);
+KISSAT_ATTRIBUTE_FORMAT (3, 4);
 
 void kissat_log_watch (kissat *, const char*,
                        unsigned, watch, const char *, ...)
-ATTRIBUTE_FORMAT (5, 6);
+KISSAT_ATTRIBUTE_FORMAT (5, 6);
 
 // clang-format on
 
@@ -333,6 +335,8 @@
       kissat_log_xor (solver, LOGPREFIX, __VA_ARGS__); \
   } while (0)
 
+} // namespace kissat4
+
 #else
 
 #define LOG(...) \
diff -Naur solvers/kissat4/lucky.cc solvers/kissat4/lucky.cc
--- solvers/kissat4/lucky.cc	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/lucky.cc	2024-10-31 01:54:52.193968630 +0300
@@ -1,12 +1,14 @@
-#include "lucky.h"
-#include "analyze.h"
-#include "backtrack.h"
-#include "decide.h"
-#include "inline.h"
-#include "internal.h"
-#include "print.h"
-#include "proprobe.h"
-#include "report.h"
+#include "kissat4/lucky.hh"
+#include "kissat4/analyze.hh"
+#include "kissat4/backtrack.hh"
+#include "kissat4/decide.hh"
+#include "kissat4/inline.hh"
+#include "kissat4/internal.hh"
+#include "kissat4/print.hh"
+#include "kissat4/proprobe.hh"
+#include "kissat4/report.hh"
+
+namespace kissat4 {
 
 static bool no_all_negative_clauses (struct kissat *solver) {
   clause *last_irredundant = kissat_last_irredundant_clause (solver);
@@ -391,3 +393,5 @@
 
   return res;
 }
+
+} // namespace kissat4
diff -Naur solvers/kissat4/lucky.hh solvers/kissat4/lucky.hh
--- solvers/kissat4/lucky.hh	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/lucky.hh	2024-10-31 01:54:52.193968630 +0300
@@ -1,7 +1,11 @@
-#ifndef _lucky_h_INCLUDED
-#define _lucky_h_INCLUDED
+#ifndef _kissat4_lucky_h_INCLUDED
+#define _kissat4_lucky_h_INCLUDED
+
+namespace kissat4 {
 
 struct kissat;
 int kissat_lucky (struct kissat *);
 
+} // namespace kissat4
+
 #endif
diff -Naur solvers/kissat4/main.cc solvers/kissat4/main.cc
--- solvers/kissat4/main.cc	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/main.cc	2024-10-31 01:54:52.193968630 +0300
@@ -1,12 +1,14 @@
-#include "application.h"
-#include "cover.h"
-#include "handle.h"
-#include "kissat.h"
-#include "print.h"
+#include "kissat4/application.hh"
+#include "kissat4/cover.hh"
+#include "kissat4/handle.hh"
+#include "kissat4/kissat.hh"
+#include "kissat4/print.hh"
 
 #include <assert.h>
 #include <stdbool.h>
 
+namespace kissat4 {
+  
 static kissat *volatile solver;
 
 // clang-format off
@@ -37,11 +39,17 @@
 extern int kissat_dump (kissat *);
 #endif
 
-#include "error.h"
-#include "random.h"
+} // namespace kissat4
+
+#include "kissat4/error.hh"
+#include "kissat4/random.hh"
+
+#ifndef _MSC_VER
 #include <strings.h>
+#endif
 
 int main (int argc, char **argv) {
+  using namespace kissat4;
   int res;
   solver = kissat_init ();
   kissat_init_alarm (kissat_alarm_handler);
diff -Naur solvers/kissat4/Makefile solvers/kissat4/Makefile
--- solvers/kissat4/Makefile	1970-01-01 03:00:00.000000000 +0300
+++ solvers/kissat4/Makefile	2024-10-31 01:54:52.193968630 +0300
@@ -0,0 +1,42 @@
+### Makefile ---
+
+## Author: aign
+## Keywords:
+
+# main parameters
+CXX      := c++
+CXXFLAGS := -std=c++11 -fPIC -Wall -Wno-deprecated -fno-strict-aliasing -Wno-changes-meaning
+CXXOPT   := -O3 -DNDEBUG -DLOGGING
+CXXDEBUG := -O0 -g3
+CXXPROF  := -O3 -g3 -fno-inline -fno-omit-frame-pointer -pg -DNDEBUG
+INCLUDES := -I..
+LIBS     := -L.
+SOURCES  := witness.c weaken.c watch.c warmup.c walk.c vivify.c vector.c utilities.c transitive.c trail.c tiers.c terminate.c sweep.c substitute.c strengthen.c statistics.c stack.c sort.c smooth.c shrink.c search.c restart.c resources.c resolve.c resize.c report.c rephase.c reorder.c reluctant.c reduce.c queue.c propsearch.c proprobe.c propinitially.c propdense.c propbeyond.c proof.c promote.c profile.c probe.c print.c preprocess.c phases.c parse.c options.c mode.c minimize.c main.c lucky.c logging.c learn.c krite.c kitten.c kimits.c internal.c import.c ifthenelse.c heap.c handle.c gates.c forward.c format.c flags.c file.c fastel.c factor.c extend.c error.c equivalences.c eliminate.c dump.c dense.c definition.c deduce.c decide.c congruence.c config.c compact.c colors.c collect.c clause.c classify.c check.c bump.c build.c backtrack.c backbone.c averages.c assign.c arena.c application.c ands.c analyze.c allocate.c
+OBJECTS  := $(SOURCES:.c=.o)
+TRGT     := kissat4
+
+# gather compiler options
+CXXARGS := $(CXXFLAGS) $(INCLUDES) $(LFLAGS) $(CXXOPT)
+
+# targets
+.PHONY: all clean lib
+
+all: lib
+
+lib: build.hh $(OBJECTS)
+	@-ar cr lib$(TRGT).a $(OBJECTS)
+
+build.hh: generate-build-header.sh
+	./generate-build-header.sh > build.hh
+
+%.o: %.cc
+	$(CXX) $(CXXARGS) -c $< -o $@
+
+clean:
+	@-rm $(OBJECTS)
+
+allclean:
+	@-find . -name '*.o' -delete
+	@-find . -name '*.a' -delete
+
+#-------------------------------------------------------------------------------
diff -Naur solvers/kissat4/minimize.cc solvers/kissat4/minimize.cc
--- solvers/kissat4/minimize.cc	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/minimize.cc	2024-10-31 01:54:52.193968630 +0300
@@ -1,5 +1,7 @@
-#include "minimize.h"
-#include "inline.h"
+#include "kissat4/minimize.hh"
+#include "kissat4/inline.hh"
+
+namespace kissat4 {
 
 static inline int minimized_index (kissat *solver, bool minimizing,
                                    assigned *a, unsigned lit, unsigned idx,
@@ -140,7 +142,7 @@
                            !lit_in_clause);
 }
 
-void kissat_reset_poisoned (kissat *solver) {
+void kissat_reset_poisoned(kissat *solver) {
   LOG ("reset %zu poisoned variables", SIZE_STACK (solver->poisoned));
   assigned *assigned = solver->assigned;
   for (all_stack (unsigned, idx, solver->poisoned)) {
@@ -209,3 +211,5 @@
 
   STOP (minimize);
 }
+
+} // namespace kissat4
diff -Naur solvers/kissat4/minimize.hh solvers/kissat4/minimize.hh
--- solvers/kissat4/minimize.hh	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/minimize.hh	2024-10-31 01:54:52.193968630 +0300
@@ -1,8 +1,10 @@
-#ifndef _minimize_h_INCLUDED
-#define _minimize_h_INCLUDED
+#ifndef _kissat4_minimize_h_INCLUDED
+#define _kissat4_minimize_h_INCLUDED
 
 #include <stdbool.h>
 
+namespace kissat4 {
+
 struct kissat;
 
 void kissat_reset_poisoned (struct kissat *);
@@ -11,4 +13,6 @@
 bool kissat_minimize_literal (struct kissat *, unsigned,
                               bool lit_in_clause);
 
+} // namespace kissat4
+
 #endif
diff -Naur solvers/kissat4/mode.cc solvers/kissat4/mode.cc
--- solvers/kissat4/mode.cc	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/mode.cc	2024-10-31 01:54:52.193968630 +0300
@@ -1,13 +1,16 @@
-#include "bump.h"
-#include "decide.h"
-#include "inline.h"
-#include "print.h"
-#include "report.h"
-#include "resources.h"
-#include "restart.h"
+#include "kissat4/bump.hh"
+#include "kissat4/decide.hh"
+#include "kissat4/inline.hh"
+#include "kissat4/print.hh"
+#include "kissat4/report.hh"
+#include "kissat4/resources.hh"
+#include "kissat4/restart.hh"
 
 #include <inttypes.h>
 
+
+namespace kissat4 {
+
 #ifndef QUIET
 
 static const char *mode_string (kissat *solver) {
@@ -213,3 +216,5 @@
 
   kissat_start_random_sequence (solver);
 }
+
+} // namespace kissat4
diff -Naur solvers/kissat4/mode.hh solvers/kissat4/mode.hh
--- solvers/kissat4/mode.hh	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/mode.hh	2024-10-31 01:54:52.193968630 +0300
@@ -1,5 +1,9 @@
-#ifndef _mode_h_INCLUDED
-#define _mode_h_INCLUDED
+#ifndef _kissat4_mode_h_INCLUDED
+#define _kissat4_mode_h_INCLUDED
+
+#include <stdint.h>
+
+namespace kissat4 {
 
 struct kissat;
 
@@ -21,4 +25,6 @@
 bool kissat_switching_search_mode (struct kissat *);
 void kissat_switch_search_mode (struct kissat *);
 
+} // namespace kissat4
+
 #endif
diff -Naur solvers/kissat4/options.cc solvers/kissat4/options.cc
--- solvers/kissat4/options.cc	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/options.cc	2024-10-31 01:54:52.193968630 +0300
@@ -1,6 +1,6 @@
-#include "options.h"
-#include "error.h"
-#include "print.h"
+#include "kissat4/options.hh"
+#include "kissat4/error.hh"
+#include "kissat4/print.hh"
 
 #include <ctype.h>
 #include <limits.h>
@@ -8,8 +8,10 @@
 #include <stdio.h>
 #include <string.h>
 
-#ifdef NOPTIONS
+namespace kissat4 {
 
+#ifdef NOPTIONS
+  
 static const opt table[] = {
 #define OPTION(N, V, L, H, D) {#N, (int) (V), D},
     OPTIONS
@@ -171,8 +173,12 @@
   return p + 1;
 }
 
+} // namespace kissat4
+
 #ifdef NOPTIONS
 
+namespace kissat4 {
+
 void kissat_init_options (void) { check_table_sorted (); }
 
 int kissat_options_get (const char *name) {
@@ -180,14 +186,18 @@
   return o ? o->value : 0;
 }
 
+} // namespace kissat4
+
 #else
 
-#include "format.h"
+#include "kissat4/format.hh"
 
 #include <assert.h>
 #include <stdbool.h>
 #include <stdlib.h>
 
+namespace kissat4 {
+
 static void kissat_printf_usage (const char *option, const char *fmt, ...) {
   va_list ap;
   printf ("  %-26s ", option);
@@ -393,4 +403,6 @@
 #undef OPTION
 }
 
+} // namespace kissat4
+
 #endif
diff -Naur solvers/kissat4/options.hh solvers/kissat4/options.hh
--- solvers/kissat4/options.hh	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/options.hh	2024-10-31 02:37:20.544488418 +0300
@@ -1,5 +1,5 @@
-#ifndef _options_h_INLCUDED
-#define _options_h_INLCUDED
+#ifndef _kissat4_options_h_INCLUDED
+#define _kissat4_options_h_INCLUDED
 
 #include <assert.h>
 #include <stdbool.h>
@@ -98,7 +98,7 @@
   OPTION (proberounds, 2, 1, INT_MAX, "probing rounds") \
   NQTOPT (profile, 2, 0, 4, "profile level") \
   OPTION (promote, 1, 0, 1, "promote clauses") \
-  NQTOPT (quiet, 0, 0, 1, "disable all messages") \
+  NQTOPT (quiet, 1, 0, 1, "disable all messages") \
   OPTION (randec, 1, 0, 1, "random decisions") \
   OPTION (randecfocused, 1, 0, 1, "random decisions in focused mode") \
   OPTION (randecinit, 500, 0, INT_MAX, "random decisions interval") \
@@ -154,8 +154,8 @@
   OPTION (transitive, 1, 0, 1, "transitive reduction of binary clauses") \
   OPTION (transitiveeffort, 20, 0, 2e3, "effort in per mille") \
   OPTION (transitivekeep, 1, 0, 1, "keep transitivity candidates") \
-  OPTION (tumble, 1, 0, 1, "tumbled external indices order") \
-  NQTOPT (verbose, 0, 0, 3, "verbosity level") \
+  OPTION (tumble, 0, 0, 1, "tumbled external indices order") \
+  NQTOPT (verbose, -1, -1, 3, "verbosity level") \
   OPTION (vivify, 1, 0, 1, "vivify clauses") \
   OPTION (vivifyeffort, 100, 0, 1e3, "effort in per mille") \
   OPTION (vivifyfocusedtiers, 1, 0, 1, "use focused tier limits") \
@@ -220,6 +220,8 @@
 #define TIER1RELATIVE (GET_OPTION (tier1relative) / 1000.0)
 #define TIER2RELATIVE (GET_OPTION (tier2relative) / 1000.0)
 
+namespace kissat4 {
+
 typedef struct opt opt;
 
 struct opt {
@@ -296,4 +298,7 @@
 #undef OPTION
 #endif
 #define GET1K_OPTION(NAME) (((int64_t) 1000) * GET_OPTION (NAME))
+
+} // namespace kissat4
+
 #endif
diff -Naur solvers/kissat4/parse.cc solvers/kissat4/parse.cc
--- solvers/kissat4/parse.cc	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/parse.cc	2024-10-31 01:54:52.193968630 +0300
@@ -1,13 +1,15 @@
-#include "parse.h"
-#include "collect.h"
-#include "internal.h"
-#include "print.h"
-#include "profile.h"
-#include "resize.h"
+#include "kissat4/parse.hh"
+#include "kissat4/collect.hh"
+#include "kissat4/internal.hh"
+#include "kissat4/print.hh"
+#include "kissat4/profile.hh"
+#include "kissat4/resize.hh"
 
 #include <ctype.h>
 #include <inttypes.h>
 
+namespace kissat4 {
+
 #define size_buffer (1u << 20)
 
 struct read_buffer {
@@ -25,10 +27,9 @@
 
 // clang-format off
 
-static inline int
-next (read_buffer *, file *, uint64_t *) ATTRIBUTE_ALWAYS_INLINE;
+static KISSAT_ATTRIBUTE_ALWAYS_INLINE int next (read_buffer *, file *, uint64_t *);
 
-static inline bool faster_is_digit (int ch) ATTRIBUTE_ALWAYS_INLINE;
+static KISSAT_ATTRIBUTE_ALWAYS_INLINE bool faster_is_digit (int ch);
 
 // clang-format off
 
@@ -443,3 +444,5 @@
   STOP (parse);
   return res;
 }
+
+} // namespace kissat4
diff -Naur solvers/kissat4/parse.hh solvers/kissat4/parse.hh
--- solvers/kissat4/parse.hh	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/parse.hh	2024-10-31 01:54:52.193968630 +0300
@@ -1,8 +1,10 @@
-#ifndef _parse_h_INCLUDED
-#define _parse_h_INCLUDED
+#ifndef _kissat4_parse_h_INCLUDED
+#define _kissat4_parse_h_INCLUDED
 
-#include "file.h"
+#include "kissat4/file.hh"
 
+namespace kissat4 {
+  
 enum strictness {
   RELAXED_PARSING = 0,
   NORMAL_PARSING = 1,
@@ -16,4 +18,6 @@
 const char *kissat_parse_dimacs (struct kissat *, strictness, file *,
                                  uint64_t *linenoptr, int *max_var_ptr);
 
+} // namespace kissat4
+
 #endif
diff -Naur solvers/kissat4/phases.cc solvers/kissat4/phases.cc
--- solvers/kissat4/phases.cc	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/phases.cc	2024-10-31 01:54:52.193968630 +0300
@@ -1,12 +1,14 @@
-#include "allocate.h"
-#include "internal.h"
-#include "logging.h"
+#include "kissat4/allocate.hh"
+#include "kissat4/internal.hh"
+#include "kissat4/logging.hh"
 
 #include <string.h>
 
+namespace kissat4 {
+
 #define realloc_phases(NAME) \
   do { \
-    solver->phases.NAME = \
+    solver->phases.NAME = (decltype(solver->phases.NAME)) \
         kissat_realloc (solver, solver->phases.NAME, old_size, new_size); \
   } while (0)
 
@@ -66,3 +68,5 @@
   LOG ("saving %u target values", VARS);
   save_phases (solver, solver->phases.target);
 }
+
+} // namespace kissat4
diff -Naur solvers/kissat4/phases.hh solvers/kissat4/phases.hh
--- solvers/kissat4/phases.hh	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/phases.hh	2024-10-31 01:54:52.193968630 +0300
@@ -1,7 +1,9 @@
-#ifndef _phases_h_INCLUDED
-#define _phases_h_INCLUDED
+#ifndef _kissat4_phases_h_INCLUDED
+#define _kissat4_phases_h_INCLUDED
 
-#include "value.h"
+#include "kissat4/value.hh"
+
+namespace kissat4 {
 
 typedef struct phases phases;
 
@@ -29,4 +31,6 @@
 void kissat_save_best_phases (struct kissat *);
 void kissat_save_target_phases (struct kissat *);
 
+} // namespace kissat4
+
 #endif
diff -Naur solvers/kissat4/preprocess.cc solvers/kissat4/preprocess.cc
--- solvers/kissat4/preprocess.cc	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/preprocess.cc	2024-10-31 01:54:52.193968630 +0300
@@ -1,16 +1,18 @@
-#include "preprocess.h"
-#include "collect.h"
-#include "fastel.h"
-#include "internal.h"
-#include "print.h"
-#include "probe.h"
-#include "propinitially.h"
-#include "report.h"
-#include "sweep.h"
-#include "terminate.h"
+#include "kissat4/preprocess.hh"
+#include "kissat4/collect.hh"
+#include "kissat4/fastel.hh"
+#include "kissat4/internal.hh"
+#include "kissat4/print.hh"
+#include "kissat4/probe.hh"
+#include "kissat4/propinitially.hh"
+#include "kissat4/report.hh"
+#include "kissat4/sweep.hh"
+#include "kissat4/terminate.hh"
 
 #include <inttypes.h>
 
+namespace kissat4 {
+
 bool kissat_preprocessing (struct kissat *solver) {
   assert (!solver->level);
   assert (!solver->inconsistent);
@@ -176,3 +178,5 @@
   STOP (preprocess);
   return solver->inconsistent ? 20 : 0;
 }
+
+} // namespace kissat4
diff -Naur solvers/kissat4/preprocess.hh solvers/kissat4/preprocess.hh
--- solvers/kissat4/preprocess.hh	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/preprocess.hh	2024-10-31 01:54:52.193968630 +0300
@@ -1,10 +1,14 @@
-#ifndef _kissat_preprocess_h_INCLUDED
-#define _kissat_preprocess_h_INCLUDED
+#ifndef _kissat4_kissat_preprocess_h_INCLUDED
+#define _kissat4_kissat_preprocess_h_INCLUDED
 
 #include <stdbool.h>
 
+namespace kissat4 {
+    
 struct kissat;
 bool kissat_preprocessing (struct kissat *);
 int kissat_preprocess (struct kissat *);
 
+} // namespace kissat4
+
 #endif
diff -Naur solvers/kissat4/print.cc solvers/kissat4/print.cc
--- solvers/kissat4/print.cc	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/print.cc	2024-10-31 01:54:52.193968630 +0300
@@ -1,14 +1,16 @@
 #ifndef QUIET
 
-#include "print.h"
-#include "colors.h"
-#include "handle.h"
-#include "internal.h"
+#include "kissat4/print.hh"
+#include "kissat4/colors.hh"
+#include "kissat4/handle.hh"
+#include "kissat4/internal.hh"
 
 #include <inttypes.h>
 #include <stdarg.h>
 #include <string.h>
 
+namespace kissat4 {
+
 static inline int verbosity (kissat *solver) {
   if (!solver)
     return -1;
@@ -160,6 +162,12 @@
   fflush (stdout);
 }
 
+} // namespace kissat4
+
 #else
+namespace kissat4 {
+  
 int kissat_print_dummy_to_avoid_warning;
+
+} // namespace kissat4
 #endif
diff -Naur solvers/kissat4/print.hh solvers/kissat4/print.hh
--- solvers/kissat4/print.hh	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/print.hh	2024-10-31 01:54:52.193968630 +0300
@@ -1,13 +1,15 @@
 // clang-format off
 
-#ifndef _print_h_INCLUDED
-#define _print_h_INCLUDED
+#ifndef _kissat4_print_h_INCLUDED
+#define _kissat4_print_h_INCLUDED
 
 #ifndef QUIET
 
 #include <stdint.h>
 
-#include "attribute.h"
+#include "kissat4/attribute.hh"
+
+namespace kissat4 {
 
 struct kissat;
 
@@ -18,24 +20,26 @@
 void kissat_section (struct kissat *, const char *name);
 
 void
-kissat_message (struct kissat *, const char *fmt, ...)
-ATTRIBUTE_FORMAT (2, 3);
+kissat_message (struct kissat *, KISSAT_ATTRIBUTE_PRINTF_ARG const char *fmt, ...)
+KISSAT_ATTRIBUTE_FORMAT (2, 3);
 
-void kissat_verbose (struct kissat *, const char *fmt, ...)
-ATTRIBUTE_FORMAT (2, 3);
+void kissat_verbose (struct kissat *, KISSAT_ATTRIBUTE_PRINTF_ARG const char *fmt, ...)
+KISSAT_ATTRIBUTE_FORMAT (2, 3);
 
-void kissat_very_verbose (struct kissat *, const char *fmt, ...)
-ATTRIBUTE_FORMAT (2, 3);
+void kissat_very_verbose (struct kissat *, KISSAT_ATTRIBUTE_PRINTF_ARG const char *fmt, ...)
+KISSAT_ATTRIBUTE_FORMAT (2, 3);
 
-void kissat_extremely_verbose (struct kissat *, const char *fmt, ...)
-ATTRIBUTE_FORMAT (2, 3);
+void kissat_extremely_verbose (struct kissat *, KISSAT_ATTRIBUTE_PRINTF_ARG const char *fmt, ...)
+KISSAT_ATTRIBUTE_FORMAT (2, 3);
 
-void kissat_warning (struct kissat *, const char *fmt, ...)
-ATTRIBUTE_FORMAT (2, 3);
+void kissat_warning (struct kissat *, KISSAT_ATTRIBUTE_PRINTF_ARG const char *fmt, ...)
+KISSAT_ATTRIBUTE_FORMAT (2, 3);
 
-void kissat_phase (struct kissat *, const char *name, uint64_t,
+void kissat_phase (struct kissat *, KISSAT_ATTRIBUTE_PRINTF_ARG const char *name, uint64_t,
 		   const char * fmt, ...)
-ATTRIBUTE_FORMAT (4, 5);
+KISSAT_ATTRIBUTE_FORMAT (4, 5);
+
+} // namespace kissat4
 
 #else
 
diff -Naur solvers/kissat4/probe.cc solvers/kissat4/probe.cc
--- solvers/kissat4/probe.cc	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/probe.cc	2024-10-31 01:54:52.193968630 +0300
@@ -1,18 +1,20 @@
-#include "probe.h"
-#include "backbone.h"
-#include "backtrack.h"
-#include "congruence.h"
-#include "factor.h"
-#include "internal.h"
-#include "print.h"
-#include "substitute.h"
-#include "sweep.h"
-#include "terminate.h"
-#include "transitive.h"
-#include "vivify.h"
+#include "kissat4/probe.hh"
+#include "kissat4/backbone.hh"
+#include "kissat4/backtrack.hh"
+#include "kissat4/congruence.hh"
+#include "kissat4/factor.hh"
+#include "kissat4/internal.hh"
+#include "kissat4/print.hh"
+#include "kissat4/substitute.hh"
+#include "kissat4/sweep.hh"
+#include "kissat4/terminate.hh"
+#include "kissat4/transitive.hh"
+#include "kissat4/vivify.hh"
 
 #include <inttypes.h>
 
+namespace kissat4 {
+
 bool kissat_probing (kissat *solver) {
   if (!solver->enabled.probe)
     return false;
@@ -102,3 +104,5 @@
   STOP (probe);
   return solver->inconsistent ? 20 : 0;
 }
+
+} // namespace kissat4
diff -Naur solvers/kissat4/probe.hh solvers/kissat4/probe.hh
--- solvers/kissat4/probe.hh	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/probe.hh	2024-10-31 01:54:52.193968630 +0300
@@ -1,12 +1,16 @@
-#ifndef _probe_h_INCLUDED
-#define _probe_h_INCLUDED
+#ifndef _kissat4_probe_h_INCLUDED
+#define _kissat4_probe_h_INCLUDED
 
 #include <stdbool.h>
 
+namespace kissat4 {
+
 struct kissat;
 
 bool kissat_probing (struct kissat *);
 int kissat_probe (struct kissat *);
 int kissat_probe_initially (struct kissat *);
 
+} // namespace kissat4
+
 #endif
diff -Naur solvers/kissat4/profile.cc solvers/kissat4/profile.cc
--- solvers/kissat4/profile.cc	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/profile.cc	2024-10-31 01:54:52.193968630 +0300
@@ -1,14 +1,16 @@
 #ifndef QUIET
 
-#include "internal.h"
-#include "resources.h"
-#include "sort.h"
+#include "kissat4/internal.hh"
+#include "kissat4/resources.hh"
+#include "kissat4/sort.hh"
 
 #include <stdio.h>
 #include <string.h>
 
+namespace kissat4 {
+
 void kissat_init_profiles (profiles *profiles) {
-#define PROF(NAME, LEVEL) profiles->NAME = (profile){LEVEL, #NAME, 0, 0};
+#define PROF(NAME, LEVEL) profiles->NAME = profile{LEVEL, #NAME, 0, 0};
   PROFS
 #undef PROF
 }
@@ -142,6 +144,12 @@
   return PROFILE (total).time;
 }
 
+} // namespace kissat4
+
 #else
+namespace kissat4 {
+
 int kissat_profile_dummy_to_avoid_warning;
+
+} // namespace kissat4
 #endif
diff -Naur solvers/kissat4/profile.hh solvers/kissat4/profile.hh
--- solvers/kissat4/profile.hh	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/profile.hh	2024-10-31 01:54:52.193968630 +0300
@@ -1,12 +1,16 @@
-#ifndef _profile_h_INCLUDED
-#define _profile_h_INCLUDED
+#ifndef _kissat4_profile_h_INCLUDED
+#define _kissat4_profile_h_INCLUDED
 
 #ifndef QUIET
 
-#include "stack.h"
+#include "kissat4/stack.hh"
 
+namespace kissat4 {
+
+#ifndef __cplusplus
 typedef struct profile profile;
 typedef struct profiles profiles;
+#endif
 
 #define PROFS \
   PROF (analyze, 3) \
@@ -118,6 +122,8 @@
       kissat_stop_simplifier_and_resume_search (solver, &PROFILE (NAME)); \
   } while (0)
 
+} // namespace kissat4
+
 #else
 
 #define START(...) \
diff -Naur solvers/kissat4/promote.cc solvers/kissat4/promote.cc
--- solvers/kissat4/promote.cc	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/promote.cc	2024-10-31 01:54:52.193968630 +0300
@@ -1,6 +1,8 @@
-#include "promote.h"
-#include "internal.h"
-#include "logging.h"
+#include "kissat4/promote.hh"
+#include "kissat4/internal.hh"
+#include "kissat4/logging.hh"
+
+namespace kissat4 {
 
 void kissat_promote_clause (kissat *solver, clause *c, unsigned new_glue) {
   if (!GET_OPTION (promote))
@@ -40,3 +42,5 @@
   (void) solver;
 #endif
 }
+
+} // namespace kissat4
diff -Naur solvers/kissat4/promote.hh solvers/kissat4/promote.hh
--- solvers/kissat4/promote.hh	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/promote.hh	2024-10-31 01:54:52.193968630 +0300
@@ -1,7 +1,9 @@
-#ifndef _promote_h_INCLUDED
-#define _promote_h_INCLUDED
+#ifndef _kissat4_promote_h_INCLUDED
+#define _kissat4_promote_h_INCLUDED
 
-#include "internal.h"
+#include "kissat4/internal.hh"
+
+namespace kissat4 {
 
 void kissat_promote_clause (struct kissat *, clause *, unsigned new_glue);
 
@@ -30,4 +32,6 @@
   return res;
 }
 
+} // namespace kissat4
+
 #endif
diff -Naur solvers/kissat4/proof.cc solvers/kissat4/proof.cc
--- solvers/kissat4/proof.cc	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/proof.cc	2024-10-31 01:54:52.193968630 +0300
@@ -1,9 +1,9 @@
 #ifndef NPROOFS
 
-#include "allocate.h"
-#include "error.h"
-#include "file.h"
-#include "inline.h"
+#include "kissat4/allocate.hh"
+#include "kissat4/error.hh"
+#include "kissat4/file.hh"
+#include "kissat4/inline.hh"
 
 #undef NDEBUG
 
@@ -13,6 +13,8 @@
 
 #define size_buffer (1u << 20)
 
+namespace kissat4 {
+
 struct write_buffer {
   unsigned char chars[size_buffer];
   size_t pos;
@@ -54,7 +56,7 @@
 void kissat_init_proof (kissat *solver, file *file, bool binary) {
   assert (file);
   assert (!solver->proof);
-  proof *proof = kissat_calloc (solver, 1, sizeof (struct proof));
+  proof *proof = (struct proof*) kissat_calloc (solver, 1, sizeof (struct proof));
   proof->binary = binary;
   proof->file = file;
   proof->solver = solver;
@@ -72,6 +74,20 @@
   proof->buffer.pos = 0;
 }
 
+void kissat_flush_buffer (proof* proof) {
+  flush_buffer (proof);
+  kissat_flush (proof->file);
+}
+
+struct file * kissat_get_proof_file (kissat *solver) {
+  assert (solver->proof);
+  return solver->proof->file;
+}
+
+struct proof * kissat_get_proof (kissat *solver) {
+  return solver->proof;
+}
+
 void kissat_release_proof (kissat *solver) {
   proof *proof = solver->proof;
   assert (proof);
@@ -115,15 +131,12 @@
 
 // clang-format off
 
-static inline void write_char (proof *, unsigned char)
-  ATTRIBUTE_ALWAYS_INLINE;
+static KISSAT_ATTRIBUTE_ALWAYS_INLINE void write_char (proof *, unsigned char);
 
-static inline void import_external_proof_literal (kissat *, proof *, int)
-  ATTRIBUTE_ALWAYS_INLINE;
+static KISSAT_ATTRIBUTE_ALWAYS_INLINE void import_external_proof_literal (kissat *, proof *, int);
 
-static inline void
-import_internal_proof_literal (kissat *, proof *, unsigned)
-  ATTRIBUTE_ALWAYS_INLINE;
+static KISSAT_ATTRIBUTE_ALWAYS_INLINE void
+import_internal_proof_literal (kissat *, proof *, unsigned);
 
 // clang-format on
 
@@ -259,7 +272,7 @@
   size_t new_size = old_size ? old_size : 2;
   while (new_size <= plit)
     new_size *= 2;
-  char *new_units = kissat_calloc (solver, new_size, 1);
+  char *new_units = (char*) kissat_calloc (solver, new_size, 1);
   if (old_size)
     memcpy (new_units, proof->units, old_size);
   kissat_dealloc (solver, proof->units, old_size, 1);
@@ -406,3 +419,5 @@
 #else
 int kissat_proof_dummy_to_avoid_warning;
 #endif
+
+} // namespace kissat4
\ No newline at end of file
diff -Naur solvers/kissat4/proof.hh solvers/kissat4/proof.hh
--- solvers/kissat4/proof.hh	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/proof.hh	2024-10-31 01:54:52.193968630 +0300
@@ -1,18 +1,23 @@
-#ifndef _proof_h_INCLUDED
-#define _proof_h_INCLUDED
+#ifndef _kissat4_proof_h_INCLUDED
+#define _kissat4_proof_h_INCLUDED
 
 #ifndef NPROOFS
 
 #include <stdbool.h>
 #include <stdlib.h>
 
+namespace kissat4 {
+
 typedef struct proof proof;
 
 struct clause;
 struct file;
 
 void kissat_init_proof (struct kissat *, struct file *, bool binary);
+struct proof * kissat_get_proof (struct kissat *);
+struct file * kissat_get_proof_file (struct kissat *);
 void kissat_release_proof (struct kissat *);
+void kissat_flush_buffer (proof* proof);
 
 #ifndef QUIET
 void kissat_print_proof_statistics (struct kissat *, bool verbose);
@@ -115,6 +120,8 @@
                                          BEGIN_STACK (S)); \
   } while (0)
 
+} // namespace kissat4
+
 #else
 
 #define ADD_BINARY_TO_PROOF(...) \
diff -Naur solvers/kissat4/propbeyond.cc solvers/kissat4/propbeyond.cc
--- solvers/kissat4/propbeyond.cc	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/propbeyond.cc	2024-10-31 01:54:52.193968630 +0300
@@ -1,12 +1,14 @@
-#include "propbeyond.h"
-#include "fastassign.h"
-#include "trail.h"
+#include "kissat4/propbeyond.hh"
+#include "kissat4/fastassign.hh"
+#include "kissat4/trail.hh"
 
 #define PROPAGATE_LITERAL propagate_literal_beyond_conflicts
 #define CONTINUE_PROPAGATING_AFTER_CONFLICT
 #define PROPAGATION_TYPE "beyond conflict"
 
-#include "proplit.h"
+#include "kissat4/proplit.hh"
+
+namespace kissat4 {
 
 static inline void
 update_beyond_propagation_statistics (kissat *solver,
@@ -46,3 +48,5 @@
 
   STOP (propagate);
 }
+
+} // namespace kissat4
diff -Naur solvers/kissat4/propbeyond.hh solvers/kissat4/propbeyond.hh
--- solvers/kissat4/propbeyond.hh	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/propbeyond.hh	2024-10-31 01:54:52.193968630 +0300
@@ -1,9 +1,13 @@
-#ifndef _propall_h_INCLUDED
-#define _propall_h_INCLUDED
+#ifndef _kissat4_propall_h_INCLUDED
+#define _kissat4_propall_h_INCLUDED
+
+namespace kissat4 {
 
 struct kissat;
 struct clause;
 
 void kissat_propagate_beyond_conflicts (struct kissat *);
 
+} // namespace kissat4
+
 #endif
diff -Naur solvers/kissat4/propdense.cc solvers/kissat4/propdense.cc
--- solvers/kissat4/propdense.cc	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/propdense.cc	2024-10-31 01:54:52.193968630 +0300
@@ -1,5 +1,7 @@
-#include "propdense.h"
-#include "fastassign.h"
+#include "kissat4/propdense.hh"
+#include "kissat4/fastassign.hh"
+
+namespace kissat4 {
 
 static inline bool non_watching_propagate_literal (kissat *solver,
                                                    unsigned lit) {
@@ -106,3 +108,5 @@
   STOP (propagate);
   return res;
 }
+
+} // namespace kissat4
diff -Naur solvers/kissat4/propdense.hh solvers/kissat4/propdense.hh
--- solvers/kissat4/propdense.hh	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/propdense.hh	2024-10-31 01:54:52.193968630 +0300
@@ -1,11 +1,15 @@
-#ifndef _propdense_h_INCLUDED
-#define _propdense_h_INCLUDED
+#ifndef _kissat4_propdense_h_INCLUDED
+#define _kissat4_propdense_h_INCLUDED
 
 #include <limits.h>
 #include <stdbool.h>
 
+namespace kissat4 {
+
 struct kissat;
 
 bool kissat_dense_propagate (struct kissat *);
 
+} // namespace kissat4
+
 #endif
diff -Naur solvers/kissat4/propinitially.cc solvers/kissat4/propinitially.cc
--- solvers/kissat4/propinitially.cc	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/propinitially.cc	2024-10-31 01:54:52.193968630 +0300
@@ -1,13 +1,15 @@
-#include "propinitially.h"
-#include "analyze.h"
-#include "fastassign.h"
-#include "print.h"
-#include "trail.h"
+#include "kissat4/propinitially.hh"
+#include "kissat4/analyze.hh"
+#include "kissat4/fastassign.hh"
+#include "kissat4/print.hh"
+#include "kissat4/trail.hh"
 
 #define PROPAGATE_LITERAL initially_propagate_literal
 #define PROPAGATION_TYPE "initially"
 
-#include "proplit.h"
+#include "kissat4/proplit.hh"
+
+namespace kissat4 {
 
 static inline void
 update_initial_propagation_statistics (kissat *solver,
@@ -54,3 +56,5 @@
 
   return !conflict;
 }
+
+} // namespace kissat4
diff -Naur solvers/kissat4/propinitially.hh solvers/kissat4/propinitially.hh
--- solvers/kissat4/propinitially.hh	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/propinitially.hh	2024-10-31 01:54:52.197968822 +0300
@@ -1,10 +1,14 @@
-#ifndef _propinitially_h_INCLUDED
-#define _propinitially_h_INCLUDED
+#ifndef _kissat4_propinitially_h_INCLUDED
+#define _kissat4_propinitially_h_INCLUDED
 
 #include <stdbool.h>
 
+namespace kissat4 {
+
 struct kissat;
 
 bool kissat_initially_propagate (struct kissat *);
 
+} // namespace kissat4
+
 #endif
diff -Naur solvers/kissat4/proplit.hh solvers/kissat4/proplit.hh
--- solvers/kissat4/proplit.hh	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/proplit.hh	2024-10-31 01:54:52.197968822 +0300
@@ -1,3 +1,5 @@
+namespace kissat4 {
+  
 static inline void kissat_watch_large_delayed (kissat *solver,
                                                watches *all_watches,
                                                unsigneds *delayed) {
@@ -8,7 +10,7 @@
   while (d != end_delayed) {
     const unsigned lit = *d++;
     assert (d != end_delayed);
-    const watch watch = {.raw = *d++};
+    const watch watch = {*d++};
     assert (!watch.type.binary);
     assert (lit < LITS);
     watches *const lit_watches = all_watches + lit;
@@ -202,3 +204,5 @@
   } else if (flush && !solver->level && solver->unflushed)
     kissat_flush_trail (solver);
 }
+
+} // namespace kissat4
\ No newline at end of file
diff -Naur solvers/kissat4/proprobe.cc solvers/kissat4/proprobe.cc
--- solvers/kissat4/proprobe.cc	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/proprobe.cc	2024-10-31 01:54:52.197968822 +0300
@@ -1,12 +1,14 @@
-#include "proprobe.h"
-#include "fastassign.h"
-#include "trail.h"
+#include "kissat4/proprobe.hh"
+#include "kissat4/fastassign.hh"
+#include "kissat4/trail.hh"
 
 #define PROPAGATE_LITERAL probing_propagate_literal
 #define PROPAGATION_TYPE "probing"
 #define PROBING_PROPAGATION
 
-#include "proplit.h"
+#include "kissat4/proplit.hh"
+
+namespace kissat4 {
 
 static void update_probing_propagation_statistics (kissat *solver,
                                                    unsigned propagated) {
@@ -57,3 +59,5 @@
 
   return conflict;
 }
+
+} // namespace kissat4
diff -Naur solvers/kissat4/proprobe.hh solvers/kissat4/proprobe.hh
--- solvers/kissat4/proprobe.hh	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/proprobe.hh	2024-10-31 01:54:52.197968822 +0300
@@ -1,12 +1,16 @@
-#ifndef _proprobe_h_INCLUDED
-#define _proprobe_h_INCLUDED
+#ifndef _kissat4_proprobe_h_INCLUDED
+#define _kissat4_proprobe_h_INCLUDED
 
 #include <stdbool.h>
 
+namespace kissat4 {
+
 struct kissat;
 struct clause;
 
 struct clause *kissat_probing_propagate (struct kissat *, struct clause *,
                                          bool flush);
 
+} // namespace kissat4
+
 #endif
diff -Naur solvers/kissat4/propsearch.cc solvers/kissat4/propsearch.cc
--- solvers/kissat4/propsearch.cc	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/propsearch.cc	2024-10-31 01:54:52.197968822 +0300
@@ -1,12 +1,14 @@
-#include "propsearch.h"
-#include "fastassign.h"
-#include "print.h"
-#include "trail.h"
+#include "kissat4/propsearch.hh"
+#include "kissat4/fastassign.hh"
+#include "kissat4/print.hh"
+#include "kissat4/trail.hh"
 
 #define PROPAGATE_LITERAL search_propagate_literal
 #define PROPAGATION_TYPE "search"
 
-#include "proplit.h"
+#include "kissat4/proplit.hh"
+
+namespace kissat4 {
 
 static inline void
 update_search_propagation_statistics (kissat *solver,
@@ -69,3 +71,5 @@
 
   return conflict;
 }
+
+} // namespace kissat4
diff -Naur solvers/kissat4/propsearch.hh solvers/kissat4/propsearch.hh
--- solvers/kissat4/propsearch.hh	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/propsearch.hh	2024-10-31 01:54:52.197968822 +0300
@@ -1,9 +1,13 @@
-#ifndef _propsearch_h_INCLUDED
-#define _propsearch_h_INCLUDED
+#ifndef _kissat4_propsearch_h_INCLUDED
+#define _kissat4_propsearch_h_INCLUDED
+
+namespace kissat4 {
 
 struct kissat;
 struct clause;
 
 struct clause *kissat_search_propagate (struct kissat *);
 
+} // namespace kissat4
+
 #endif
diff -Naur solvers/kissat4/queue.cc solvers/kissat4/queue.cc
--- solvers/kissat4/queue.cc	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/queue.cc	2024-10-31 01:54:52.197968822 +0300
@@ -1,6 +1,8 @@
-#include "inline.h"
-#include "inlinequeue.h"
-#include "print.h"
+#include "kissat4/inline.hh"
+#include "kissat4/inlinequeue.hh"
+#include "kissat4/print.hh"
+
+namespace kissat4 {
 
 void kissat_init_queue (kissat *solver) {
   queue *queue = &solver->queue;
@@ -53,3 +55,5 @@
     assert (links[queue->search.idx].stamp == queue->search.stamp);
 }
 #endif
+
+} // namespace kissat4
\ No newline at end of file
diff -Naur solvers/kissat4/queue.hh solvers/kissat4/queue.hh
--- solvers/kissat4/queue.hh	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/queue.hh	2024-10-31 01:54:52.197968822 +0300
@@ -1,9 +1,11 @@
-#ifndef _queue_h_INCLUDED
-#define _queue_h_INCLUDED
+#ifndef _kissat4_queue_h_INCLUDED
+#define _kissat4_queue_h_INCLUDED
 
 #define DISCONNECT UINT_MAX
 #define DISCONNECTED(IDX) ((int) (IDX) < 0)
 
+namespace kissat4 {
+  
 struct kissat;
 
 typedef struct links links;
@@ -35,4 +37,6 @@
   } while (0)
 #endif
 
+} // namespace kissat4
+
 #endif
diff -Naur solvers/kissat4/random.hh solvers/kissat4/random.hh
--- solvers/kissat4/random.hh	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/random.hh	2024-10-31 01:54:52.197968822 +0300
@@ -1,10 +1,12 @@
-#ifndef _random_h_INCLUDED
-#define _random_h_INCLUDED
+#ifndef _kissat4_random_h_INCLUDED
+#define _kissat4_random_h_INCLUDED
 
 #include <assert.h>
 #include <stdbool.h>
 #include <stdint.h>
 
+namespace kissat4 {
+
 typedef uint64_t generator;
 
 static inline uint64_t kissat_next_random64 (generator *rng) {
@@ -41,4 +43,6 @@
   return kissat_next_random32 (rng) / 4294967296.0;
 }
 
+} // namespace kissat4
+
 #endif
diff -Naur solvers/kissat4/rank.hh solvers/kissat4/rank.hh
--- solvers/kissat4/rank.hh	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/rank.hh	2024-10-31 01:54:52.197968822 +0300
@@ -1,7 +1,7 @@
-#ifndef _rank_h_INCLUDED
-#define _rank_h_INCLUDED
+#ifndef _kissat4_rank_h_INCLUDED
+#define _kissat4_rank_h_INCLUDED
 
-#include "allocate.h"
+#include "kissat4/allocate.hh"
 
 #include <string.h>
 
@@ -101,7 +101,7 @@
 \
       if (!TMP_RADIX) { \
         assert (C_RADIX == A_RADIX); \
-        TMP_RADIX = kissat_malloc (solver, BYTES_TMP_RADIX); \
+        TMP_RADIX = (VTYPE*) kissat_malloc (solver, BYTES_TMP_RADIX); \
         B_RADIX = TMP_RADIX; \
       } \
 \
diff -Naur solvers/kissat4/reduce.cc solvers/kissat4/reduce.cc
--- solvers/kissat4/reduce.cc	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/reduce.cc	2024-10-31 01:54:52.197968822 +0300
@@ -1,16 +1,18 @@
-#include "reduce.h"
-#include "allocate.h"
-#include "collect.h"
-#include "inline.h"
-#include "print.h"
-#include "rank.h"
-#include "report.h"
-#include "tiers.h"
-#include "trail.h"
+#include "kissat4/reduce.hh"
+#include "kissat4/allocate.hh"
+#include "kissat4/collect.hh"
+#include "kissat4/inline.hh"
+#include "kissat4/print.hh"
+#include "kissat4/rank.hh"
+#include "kissat4/report.hh"
+#include "kissat4/tiers.hh"
+#include "kissat4/trail.hh"
 
 #include <inttypes.h>
 #include <math.h>
 
+namespace kissat4 {
+
 bool kissat_reducing (kissat *solver) {
   if (!GET_OPTION (reduce))
     return false;
@@ -196,3 +198,5 @@
   STOP (reduce);
   return solver->inconsistent ? 20 : 0;
 }
+
+} // namespace kissat4
diff -Naur solvers/kissat4/reduce.hh solvers/kissat4/reduce.hh
--- solvers/kissat4/reduce.hh	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/reduce.hh	2024-10-31 01:54:52.197968822 +0300
@@ -1,11 +1,15 @@
-#ifndef _reduce_h_INCLUDED
-#define _reduce_h_INCLUDED
+#ifndef _kissat4_reduce_h_INCLUDED
+#define _kissat4_reduce_h_INCLUDED
 
 #include <stdbool.h>
 
+namespace kissat4 {
+
 struct kissat;
 
 bool kissat_reducing (struct kissat *);
 int kissat_reduce (struct kissat *);
 
+} // namespace kissat4
+
 #endif
diff -Naur solvers/kissat4/reference.hh solvers/kissat4/reference.hh
--- solvers/kissat4/reference.hh	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/reference.hh	2024-10-31 01:54:52.197968822 +0300
@@ -1,7 +1,9 @@
-#ifndef _reference_h_INCLUDED
-#define _reference_h_INCLUDED
+#ifndef _kissat4_reference_h_INCLUDED
+#define _kissat4_reference_h_INCLUDED
 
-#include "stack.h"
+#include "kissat4/stack.hh"
+
+namespace kissat4 {
 
 typedef unsigned reference;
 
@@ -16,4 +18,6 @@
 typedef STACK (reference) references;
 // clang-format on
 
+} // namespace kissat4
+
 #endif
diff -Naur solvers/kissat4/reluctant.cc solvers/kissat4/reluctant.cc
--- solvers/kissat4/reluctant.cc	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/reluctant.cc	2024-10-31 01:54:52.197968822 +0300
@@ -1,5 +1,7 @@
-#include "internal.h"
-#include "logging.h"
+#include "kissat4/internal.hh"
+#include "kissat4/logging.hh"
+
+namespace kissat4 {
 
 void kissat_enable_reluctant (reluctant *reluctant, uint64_t period,
                               uint64_t limit) {
@@ -65,3 +67,5 @@
     kissat_disable_reluctant (&solver->reluctant);
   }
 }
+
+} // namespace kissat4
\ No newline at end of file
diff -Naur solvers/kissat4/reluctant.hh solvers/kissat4/reluctant.hh
--- solvers/kissat4/reluctant.hh	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/reluctant.hh	2024-10-31 01:54:52.197968822 +0300
@@ -1,9 +1,11 @@
-#ifndef _reluctant_h_INCLUDED
-#define _reluctant_h_INCLUDED
+#ifndef _kissat4_reluctant_h_INCLUDED
+#define _kissat4_reluctant_h_INCLUDED
 
 #include <stdbool.h>
 #include <stdint.h>
 
+namespace kissat4 {
+
 typedef struct reluctant reluctant;
 
 struct reluctant {
@@ -30,4 +32,6 @@
 
 void kissat_init_reluctant (struct kissat *);
 
+} // namespace kissat4
+
 #endif
diff -Naur solvers/kissat4/reorder.cc solvers/kissat4/reorder.cc
--- solvers/kissat4/reorder.cc	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/reorder.cc	2024-10-31 01:54:52.197968822 +0300
@@ -1,15 +1,17 @@
-#include "reorder.h"
-#include "backtrack.h"
-#include "bump.h"
-#include "inline.h"
-#include "inlineheap.h"
-#include "inlinequeue.h"
-#include "inlinevector.h"
-#include "internal.h"
-#include "logging.h"
-#include "print.h"
-#include "report.h"
-#include "sort.h"
+#include "kissat4/reorder.hh"
+#include "kissat4/backtrack.hh"
+#include "kissat4/bump.hh"
+#include "kissat4/inline.hh"
+#include "kissat4/inlineheap.hh"
+#include "kissat4/inlinequeue.hh"
+#include "kissat4/inlinevector.hh"
+#include "kissat4/internal.hh"
+#include "kissat4/logging.hh"
+#include "kissat4/print.hh"
+#include "kissat4/report.hh"
+#include "kissat4/sort.hh"
+
+namespace kissat4 {
 
 bool kissat_reordering (kissat *solver) {
   if (!GET_OPTION (reorder))
@@ -22,11 +24,11 @@
 }
 
 static double *compute_weights (kissat *solver) {
-  double *weights = kissat_calloc (solver, LITS, sizeof *weights);
+  double *weights = (double*) kissat_calloc (solver, LITS, sizeof *weights);
   const unsigned max_size = GET_OPTION (reordermaxsize);
   LOG ("limiting weight computation to maximum clause size %u", max_size);
   assert (2 <= max_size);
-  double *table = kissat_nalloc (solver, max_size + 1, sizeof *table);
+  double *table = (double*) kissat_nalloc (solver, max_size + 1, sizeof *table);
   {
     double weight = 1;
     for (unsigned size = 2; size <= max_size; size++) {
@@ -46,6 +48,7 @@
       if (c->garbage)
         continue;
       unsigned size = 0;
+      double weight;
       for (all_literals_in_clause (lit, c)) {
         const signed char value = values[lit];
         if (value > 0)
@@ -53,7 +56,7 @@
         if (!value && size < max_size && ++size == max_size)
           break;
       }
-      const double weight = table[size];
+      weight = table[size];
       for (all_literals_in_clause (lit, c))
         weights[lit] += weight;
     CONTINUE_WITH_NEXT_CLAUSE:;
@@ -215,3 +218,5 @@
   REPORT (0, 'o');
   STOP (reorder);
 }
+
+} // namespace kissat4
diff -Naur solvers/kissat4/reorder.hh solvers/kissat4/reorder.hh
--- solvers/kissat4/reorder.hh	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/reorder.hh	2024-10-31 01:54:52.197968822 +0300
@@ -1,11 +1,15 @@
-#ifndef _reorder_h_INCLUDED
-#define _reorder_h_INCLUDED
+#ifndef _kissat4_reorder_h_INCLUDED
+#define _kissat4_reorder_h_INCLUDED
 
 #include <stdbool.h>
 
+namespace kissat4 {
+
 struct kissat;
 
 bool kissat_reordering (struct kissat *);
 void kissat_reorder (struct kissat *);
 
+} // namespace kissat4
+
 #endif
diff -Naur solvers/kissat4/rephase.cc solvers/kissat4/rephase.cc
--- solvers/kissat4/rephase.cc	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/rephase.cc	2024-10-31 01:54:52.197968822 +0300
@@ -1,16 +1,18 @@
-#include "rephase.h"
-#include "backtrack.h"
-#include "decide.h"
-#include "internal.h"
-#include "logging.h"
-#include "print.h"
-#include "report.h"
-#include "terminate.h"
-#include "walk.h"
+#include "kissat4/rephase.hh"
+#include "kissat4/backtrack.hh"
+#include "kissat4/decide.hh"
+#include "kissat4/internal.hh"
+#include "kissat4/logging.hh"
+#include "kissat4/print.hh"
+#include "kissat4/report.hh"
+#include "kissat4/terminate.hh"
+#include "kissat4/walk.hh"
 
 #include <inttypes.h>
 #include <string.h>
 
+namespace kissat4 {
+
 static void kissat_reset_best_assigned (kissat *solver) {
   if (!solver->best_assigned)
     return;
@@ -135,3 +137,5 @@
   REPORT (0, type);
   STOP (rephase);
 }
+
+} // namespace kissat4
diff -Naur solvers/kissat4/rephase.hh solvers/kissat4/rephase.hh
--- solvers/kissat4/rephase.hh	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/rephase.hh	2024-10-31 01:54:52.197968822 +0300
@@ -1,11 +1,15 @@
-#ifndef _rephase_h_INCLUDED
-#define _rephase_h_INCLUDED
+#ifndef _kissat4_rephase_h_INCLUDED
+#define _kissat4_rephase_h_INCLUDED
 
 #include <stdbool.h>
 
+namespace kissat4 {
+
 struct kissat;
 
 bool kissat_rephasing (struct kissat *);
 void kissat_rephase (struct kissat *);
 
+} // namespace kissat4
+
 #endif
diff -Naur solvers/kissat4/report.cc solvers/kissat4/report.cc
--- solvers/kissat4/report.cc	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/report.cc	2024-10-31 01:54:52.197968822 +0300
@@ -1,14 +1,16 @@
 #ifndef QUIET
 
-#include "report.h"
-#include "colors.h"
-#include "internal.h"
-#include "print.h"
-#include "resources.h"
+#include "kissat4/report.hh"
+#include "kissat4/colors.hh"
+#include "kissat4/internal.hh"
+#include "kissat4/print.hh"
+#include "kissat4/resources.hh"
 
 #include <inttypes.h>
 #include <string.h>
 
+namespace kissat4 {
+
 #define MB (kissat_current_resident_set_size () / (double) (1 << 20))
 
 #define REMAINING_VARIABLES \
@@ -153,8 +155,14 @@
   fflush (stdout);
 }
 
+} // namespace kissat4
+
 #else
 
+namespace kissat4 {
+
 int kissat_report_dummy_to_avoid_warning;
 
+} // namespace kissat4
+
 #endif
diff -Naur solvers/kissat4/report.hh solvers/kissat4/report.hh
--- solvers/kissat4/report.hh	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/report.hh	2024-10-31 01:54:52.197968822 +0300
@@ -1,5 +1,5 @@
-#ifndef _report_h_INCLUDED
-#define _report_h_INCLUDED
+#ifndef _kissat4_report_h_INCLUDED
+#define _kissat4_report_h_INCLUDED
 
 #ifdef QUIET
 
@@ -11,12 +11,16 @@
 
 #include <stdbool.h>
 
+namespace kissat4 {
+
 struct kissat;
 
 void kissat_report (struct kissat *, bool verbose, char type);
 
 #define REPORT(LEVEL, TYPE) kissat_report (solver, (LEVEL), (TYPE))
 
+} // namespace kissat4
+
 #endif
 
 #endif
diff -Naur solvers/kissat4/require.hh solvers/kissat4/require.hh
--- solvers/kissat4/require.hh	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/require.hh	2024-10-31 01:54:52.197968822 +0300
@@ -1,5 +1,5 @@
-#ifndef _require_h_INCLUDED
-#define _require_h_INCLUDED
+#ifndef _kissat4_require_h_INCLUDED
+#define _kissat4_require_h_INCLUDED
 
 #define kissat_require(COND, ...) \
   do { \
diff -Naur solvers/kissat4/resize.cc solvers/kissat4/resize.cc
--- solvers/kissat4/resize.cc	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/resize.cc	2024-10-31 01:54:52.197968822 +0300
@@ -1,15 +1,17 @@
-#include "resize.h"
-#include "allocate.h"
-#include "inline.h"
-#include "require.h"
+#include "kissat4/resize.hh"
+#include "kissat4/allocate.hh"
+#include "kissat4/inline.hh"
+#include "kissat4/require.hh"
 
 #include <limits.h>
 #include <string.h>
 
+namespace kissat4 {
+
 #define NREALLOC_GENERIC(TYPE, NAME, ELEMENTS_PER_BLOCK) \
   do { \
     const size_t block_size = sizeof (TYPE); \
-    solver->NAME = \
+    solver->NAME = (decltype(solver->NAME)) \
         kissat_nrealloc (solver, solver->NAME, old_size, new_size, \
                          ELEMENTS_PER_BLOCK * block_size); \
   } while (0)
@@ -17,7 +19,7 @@
 #define CREALLOC_GENERIC(TYPE, NAME, ELEMENTS_PER_BLOCK) \
   do { \
     const size_t block_size = sizeof (TYPE); \
-    TYPE *NAME = \
+    TYPE *NAME = (decltype(solver->NAME)) \
         kissat_calloc (solver, ELEMENTS_PER_BLOCK * new_size, block_size); \
     if (old_size) { \
       const size_t bytes = ELEMENTS_PER_BLOCK * old_size * block_size; \
@@ -135,3 +137,5 @@
   }
   solver->vars = new_vars;
 }
+
+} // namespace kissat4
diff -Naur solvers/kissat4/resize.hh solvers/kissat4/resize.hh
--- solvers/kissat4/resize.hh	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/resize.hh	2024-10-31 01:54:52.197968822 +0300
@@ -1,10 +1,14 @@
-#ifndef _resize_h_INCLUDED
-#define _resize_h_INCLUDED
+#ifndef _kissat4_resize_h_INCLUDED
+#define _kissat4_resize_h_INCLUDED
 
+namespace kissat4 {
+    
 struct kissat;
 
 void kissat_decrease_size (struct kissat *solver);
 void kissat_increase_size (struct kissat *, unsigned new_size);
 void kissat_enlarge_variables (struct kissat *, unsigned new_vars);
 
+} // namespace kissat4
+
 #endif
diff -Naur solvers/kissat4/resolve.cc solvers/kissat4/resolve.cc
--- solvers/kissat4/resolve.cc	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/resolve.cc	2024-10-31 01:54:52.197968822 +0300
@@ -1,12 +1,14 @@
-#include "resolve.h"
-#include "eliminate.h"
-#include "gates.h"
-#include "inline.h"
-#include "print.h"
+#include "kissat4/resolve.hh"
+#include "kissat4/eliminate.hh"
+#include "kissat4/gates.hh"
+#include "kissat4/inline.hh"
+#include "kissat4/print.hh"
 
 #include <inttypes.h>
 #include <string.h>
 
+namespace kissat4 {
+  
 static inline unsigned occurrences_literal (kissat *solver, unsigned lit,
                                             bool *update) {
   assert (!solver->watching);
@@ -368,3 +370,5 @@
 
   return !failed;
 }
+
+} // namespace kissat4
\ No newline at end of file
diff -Naur solvers/kissat4/resolve.hh solvers/kissat4/resolve.hh
--- solvers/kissat4/resolve.hh	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/resolve.hh	2024-10-31 01:54:52.197968822 +0300
@@ -1,11 +1,15 @@
-#ifndef _resolve_h_INCLUDED
-#define _resolve_h_INCLUDED
+#ifndef _kissat4_resolve_h_INCLUDED
+#define _kissat4_resolve_h_INCLUDED
 
 #include <stdbool.h>
 
+namespace kissat4 {
+    
 struct kissat;
 
 bool kissat_generate_resolvents (struct kissat *, unsigned idx,
                                  unsigned *lit_ptr);
 
+} // namespace kissat4
+
 #endif
diff -Naur solvers/kissat4/resources.cc solvers/kissat4/resources.cc
--- solvers/kissat4/resources.cc	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/resources.cc	2024-10-31 01:54:52.197968822 +0300
@@ -1,6 +1,49 @@
-#include "resources.h"
+#include "kissat4/resources.hh"
 
+#ifndef _MSC_VER
 #include <sys/time.h>
+#include <sys/resource.h>
+#else
+#include <time.h>
+#include <windows.h>
+#include <psapi.h>
+#endif
+
+
+namespace kissat4 {
+
+#ifdef _MSC_VER
+#define WIN32_LEAN_AND_MEAN
+
+#include <stdint.h> // portable: uint64_t   MSVC: __int64
+
+// MSVC defines this in winsock2.h!?
+typedef struct timeval {
+    long tv_sec;
+    long tv_usec;
+} timeval;
+
+int gettimeofday(struct timeval * tp, struct timezone * tzp)
+{
+    // Note: some broken versions only have 8 trailing zero's, the correct epoch has 9 trailing zero's
+    // This magic number is the number of 100 nanosecond intervals since January 1, 1601 (UTC)
+    // until 00:00:00 January 1, 1970
+    static const uint64_t EPOCH = ((uint64_t) 116444736000000000ULL);
+
+    SYSTEMTIME  system_time;
+    FILETIME    file_time;
+    uint64_t    time;
+
+    GetSystemTime( &system_time );
+    SystemTimeToFileTime( &system_time, &file_time );
+    time =  ((uint64_t)file_time.dwLowDateTime )      ;
+    time += ((uint64_t)file_time.dwHighDateTime) << 32;
+
+    tp->tv_sec  = (long) ((time - EPOCH) / 10000000L);
+    tp->tv_usec = (long) (system_time.wMilliseconds * 1000);
+    return 0;
+}
+#endif
 
 double kissat_wall_clock_time (void) {
   struct timeval tv;
@@ -9,20 +52,24 @@
   return 1e-6 * tv.tv_usec + tv.tv_sec;
 }
 
+} // namespace kissat4
+
 #ifndef QUIET
 
-#include "internal.h"
-#include "statistics.h"
-#include "utilities.h"
+#include "kissat4/internal.hh"
+#include "kissat4/statistics.hh"
+#include "kissat4/utilities.hh"
 
 #include <inttypes.h>
 #include <stdio.h>
 #include <string.h>
-#include <sys/resource.h>
 #include <sys/types.h>
 #include <unistd.h>
 
+namespace kissat4 {
+
 double kissat_process_time (void) {
+#ifndef _MSC_VER
   struct rusage u;
   double res;
   if (getrusage (RUSAGE_SELF, &u))
@@ -30,18 +77,49 @@
   res = u.ru_utime.tv_sec + 1e-6 * u.ru_utime.tv_usec;
   res += u.ru_stime.tv_sec + 1e-6 * u.ru_stime.tv_usec;
   return res;
+#else
+  HANDLE hProcess;
+  FILETIME creationTime;
+  FILETIME exitTime;
+  FILETIME kernelTime;
+  FILETIME userTime;
+  ULARGE_INTEGER wrkTime;
+  hProcess = GetCurrentProcess();
+  if (GetProcessTimes(hProcess,  &creationTime, &exitTime, &kernelTime, &userTime)) {
+    wrkTime.LowPart = userTime.dwLowDateTime;
+    wrkTime.HighPart = userTime.dwHighDateTime;
+    return wrkTime.QuadPart / 10000000.0;
+  }
+  return 0;
+#endif
 }
 
 uint64_t kissat_maximum_resident_set_size (void) {
+#ifndef _MSC_VER
   struct rusage u;
   if (getrusage (RUSAGE_SELF, &u))
     return 0;
   return ((uint64_t) u.ru_maxrss) << 10;
+#else
+  HANDLE hProcess;
+  PROCESS_MEMORY_COUNTERS processMemoryCounters;
+
+  hProcess = GetCurrentProcess();
+  if (GetProcessMemoryInfo(hProcess,  &processMemoryCounters, sizeof(processMemoryCounters))) {
+    return processMemoryCounters.PeakWorkingSetSize;
+  }
+  return 0;
+#endif
 }
 
+} // namespace kissat4
+
 #ifdef __APPLE__
 
 #include <mach/task.h>
+
+namespace kissat4 {
+
 mach_port_t mach_task_self (void);
 
 uint64_t kissat_current_resident_set_size (void) {
@@ -53,8 +131,29 @@
   return info.resident_size;
 }
 
+} // namespace kissat4
+
+#elif defined(_MSC_VER)
+
+namespace kissat4 {
+
+uint64_t kissat_current_resident_set_size (void) {
+  HANDLE hProcess;
+  PROCESS_MEMORY_COUNTERS processMemoryCounters;
+
+  hProcess = GetCurrentProcess();
+  if (GetProcessMemoryInfo(hProcess,  &processMemoryCounters, sizeof(processMemoryCounters))) {
+    return processMemoryCounters.WorkingSetSize;
+  }
+  return 0;
+}
+
+} // namespace kissat4
+
 #else
 
+namespace kissat4 {
+
 uint64_t kissat_current_resident_set_size (void) {
   char path[48];
   sprintf (path, "/proc/%" PRIu64 "/statm", (uint64_t) getpid ());
@@ -67,8 +166,12 @@
   return scanned == 2 ? rss * sysconf (_SC_PAGESIZE) : 0;
 }
 
+} // namespace kissat4
+
 #endif
 
+namespace kissat4 {
+
 void kissat_print_resources (kissat *solver) {
   uint64_t rss = kissat_maximum_resident_set_size ();
   double t = kissat_time (solver);
@@ -101,4 +204,7 @@
   fflush (stdout);
 }
 
+
+} // namespace kissat4
+
 #endif
diff -Naur solvers/kissat4/resources.hh solvers/kissat4/resources.hh
--- solvers/kissat4/resources.hh	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/resources.hh	2024-10-31 01:54:52.197968822 +0300
@@ -1,15 +1,18 @@
-#ifndef _resources_h_INCLUDED
-#define _resources_h_INCLUDED
+#ifndef _kissat4_resources_h_INCLUDED
+#define _kissat4_resources_h_INCLUDED
+
+namespace kissat4 {
 
 double kissat_wall_clock_time (void);
 
-#ifndef QUIET
+} // namespace kissat4
 
-#ifndef _resources_h_INLCUDED
-#define _resources_h_INLCUDED
+#ifndef QUIET
 
 #include <stdint.h>
 
+namespace kissat4 {
+
 struct kissat;
 
 double kissat_process_time (void);
@@ -17,7 +20,8 @@
 uint64_t kissat_maximum_resident_set_size (void);
 void kissat_print_resources (struct kissat *);
 
-#endif
+} // namespace kissat4
 
 #endif
+
 #endif
diff -Naur solvers/kissat4/restart.cc solvers/kissat4/restart.cc
--- solvers/kissat4/restart.cc	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/restart.cc	2024-10-31 01:54:52.197968822 +0300
@@ -1,16 +1,18 @@
-#include "restart.h"
-#include "backtrack.h"
-#include "bump.h"
-#include "decide.h"
-#include "internal.h"
-#include "kimits.h"
-#include "logging.h"
-#include "print.h"
-#include "reluctant.h"
-#include "report.h"
+#include "kissat4/restart.hh"
+#include "kissat4/backtrack.hh"
+#include "kissat4/bump.hh"
+#include "kissat4/decide.hh"
+#include "kissat4/internal.hh"
+#include "kissat4/kimits.hh"
+#include "kissat4/logging.hh"
+#include "kissat4/print.hh"
+#include "kissat4/reluctant.hh"
+#include "kissat4/report.hh"
 
 #include <inttypes.h>
 
+namespace kissat4 {
+
 bool kissat_restarting (kissat *solver) {
   assert (solver->unassigned);
   if (!GET_OPTION (restart))
@@ -129,3 +131,5 @@
   REPORT (1, 'R');
   STOP (restart);
 }
+
+} // namespace kissat4
diff -Naur solvers/kissat4/restart.hh solvers/kissat4/restart.hh
--- solvers/kissat4/restart.hh	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/restart.hh	2024-10-31 01:54:52.197968822 +0300
@@ -1,8 +1,10 @@
-#ifndef _restart_h_INCLUDED
-#define _restart_h_INCLUDED
+#ifndef _kissat4_restart_h_INCLUDED
+#define _kissat4_restart_h_INCLUDED
 
 #include <stdbool.h>
 
+namespace kissat4 {
+
 struct kissat;
 
 bool kissat_restarting (struct kissat *);
@@ -10,4 +12,6 @@
 
 void kissat_update_focused_restart_limit (struct kissat *);
 
+} // namespace kissat4
+
 #endif
diff -Naur solvers/kissat4/search.cc solvers/kissat4/search.cc
--- solvers/kissat4/search.cc	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/search.cc	2024-10-31 01:54:52.197968822 +0300
@@ -1,29 +1,31 @@
-#include "search.h"
-#include "analyze.h"
-#include "bump.h"
-#include "classify.h"
-#include "decide.h"
-#include "eliminate.h"
-#include "inline.h"
-#include "internal.h"
-#include "logging.h"
-#include "lucky.h"
-#include "preprocess.h"
-#include "print.h"
-#include "probe.h"
-#include "propsearch.h"
-#include "reduce.h"
-#include "reluctant.h"
-#include "reorder.h"
-#include "rephase.h"
-#include "report.h"
-#include "restart.h"
-#include "terminate.h"
-#include "trail.h"
-#include "walk.h"
+#include "kissat4/search.hh"
+#include "kissat4/analyze.hh"
+#include "kissat4/bump.hh"
+#include "kissat4/classify.hh"
+#include "kissat4/decide.hh"
+#include "kissat4/eliminate.hh"
+#include "kissat4/inline.hh"
+#include "kissat4/internal.hh"
+#include "kissat4/logging.hh"
+#include "kissat4/lucky.hh"
+#include "kissat4/preprocess.hh"
+#include "kissat4/print.hh"
+#include "kissat4/probe.hh"
+#include "kissat4/propsearch.hh"
+#include "kissat4/reduce.hh"
+#include "kissat4/reluctant.hh"
+#include "kissat4/reorder.hh"
+#include "kissat4/rephase.hh"
+#include "kissat4/report.hh"
+#include "kissat4/restart.hh"
+#include "kissat4/terminate.hh"
+#include "kissat4/trail.hh"
+#include "kissat4/walk.hh"
 
 #include <inttypes.h>
 
+namespace kissat4 {
+
 static void init_tiers (kissat *solver) {
   for (unsigned stable = 0; stable != 2; stable++) {
     if (!solver->tier1[stable]) {
@@ -227,3 +229,5 @@
   report_search_result (solver, res);
   return res;
 }
+
+} // namespace kissat4
diff -Naur solvers/kissat4/search.hh solvers/kissat4/search.hh
--- solvers/kissat4/search.hh	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/search.hh	2024-10-31 01:54:52.197968822 +0300
@@ -1,8 +1,12 @@
-#ifndef _search_h_INCLUDED
-#define _search_h_INCLUDED
+#ifndef _kissat4_search_h_INCLUDED
+#define _kissat4_search_h_INCLUDED
+
+namespace kissat4 {
 
 struct kissat;
 
 int kissat_search (struct kissat *);
 
+} // namespace kissat4
+
 #endif
diff -Naur solvers/kissat4/shrink.cc solvers/kissat4/shrink.cc
--- solvers/kissat4/shrink.cc	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/shrink.cc	2024-10-31 01:54:52.197968822 +0300
@@ -1,7 +1,9 @@
-#include "shrink.h"
-#include "allocate.h"
-#include "inline.h"
-#include "minimize.h"
+#include "kissat4/shrink.hh"
+#include "kissat4/allocate.hh"
+#include "kissat4/inline.hh"
+#include "kissat4/minimize.hh"
+
+namespace kissat4 {
 
 static void reset_shrinkable (kissat *solver) {
 #ifdef LOGGING
@@ -393,3 +395,5 @@
 
   STOP (shrink);
 }
+
+} // namespace kissat4
diff -Naur solvers/kissat4/shrink.hh solvers/kissat4/shrink.hh
--- solvers/kissat4/shrink.hh	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/shrink.hh	2024-10-31 01:54:52.197968822 +0300
@@ -1,8 +1,12 @@
-#ifndef _shrink_h_INCLUDED
-#define _shrink_h_INCLUDED
+#ifndef _kissat4_shrink_h_INCLUDED
+#define _kissat4_shrink_h_INCLUDED
 
+namespace kissat4 {
+    
 struct kissat;
 
 void kissat_shrink_clause (struct kissat *);
 
+} // namespace kissat4
+
 #endif
diff -Naur solvers/kissat4/smooth.cc solvers/kissat4/smooth.cc
--- solvers/kissat4/smooth.cc	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/smooth.cc	2024-10-31 01:54:52.197968822 +0300
@@ -1,6 +1,8 @@
-#include "allocate.h"
-#include "internal.h"
-#include "logging.h"
+#include "kissat4/allocate.hh"
+#include "kissat4/internal.hh"
+#include "kissat4/logging.hh"
+
+namespace kissat4 {
 
 void kissat_init_smooth (kissat *solver, smooth *smooth, int window,
                          const char *name) {
@@ -71,3 +73,5 @@
   (void) solver;
 #endif
 }
+
+} // namespace kissat4
diff -Naur solvers/kissat4/smooth.hh solvers/kissat4/smooth.hh
--- solvers/kissat4/smooth.hh	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/smooth.hh	2024-10-31 01:54:52.197968822 +0300
@@ -1,8 +1,10 @@
-#ifndef _smooth_h_INCLUDED
-#define _smooth_h_INCLUDED
+#ifndef _kissat4_smooth_h_INCLUDED
+#define _kissat4_smooth_h_INCLUDED
 
 #include <stdint.h>
 
+namespace kissat4 {
+
 typedef struct smooth smooth;
 
 struct smooth {
@@ -19,4 +21,6 @@
                          const char *);
 void kissat_update_smooth (struct kissat *, smooth *, double);
 
+} // namespace kissat4
+
 #endif
diff -Naur solvers/kissat4/sort.cc solvers/kissat4/sort.cc
--- solvers/kissat4/sort.cc	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/sort.cc	2024-10-31 01:54:52.197968822 +0300
@@ -1,5 +1,7 @@
-#include "internal.h"
-#include "logging.h"
+#include "kissat4/internal.hh"
+#include "kissat4/logging.hh"
+
+namespace kissat4 {
 
 static inline value
 move_smallest_literal_to_front (kissat *solver, const value *const values,
@@ -95,4 +97,6 @@
   if (size > 2)
     move_smallest_literal_to_front (solver, values, assigned, (u >= 0), 1,
                                     size, lits);
-}
+} 
+
+} // namespace kissat4
\ No newline at end of file
diff -Naur solvers/kissat4/sort.hh solvers/kissat4/sort.hh
--- solvers/kissat4/sort.hh	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/sort.hh	2024-10-31 01:54:52.197968822 +0300
@@ -1,7 +1,7 @@
-#ifndef _sort_h_INCLUDED
-#define _sort_h_INCLUDED
+#ifndef _kissat4_sort_h_INCLUDED
+#define _kissat4_sort_h_INCLUDED
 
-#include "utilities.h"
+#include "kissat4/utilities.hh"
 
 #define GREATER_SWAP(TYPE, P, Q, LESS) \
   do { \
diff -Naur solvers/kissat4/stack.cc solvers/kissat4/stack.cc
--- solvers/kissat4/stack.cc	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/stack.cc	2024-10-31 01:54:52.197968822 +0300
@@ -1,9 +1,11 @@
-#include "stack.h"
-#include "allocate.h"
-#include "utilities.h"
+#include "kissat4/stack.hh"
+#include "kissat4/allocate.hh"
+#include "kissat4/utilities.hh"
 
 #include <assert.h>
 
+namespace kissat4 {
+
 void kissat_stack_enlarge (struct kissat *solver, chars *s, size_t bytes) {
   const size_t size = SIZE_STACK (*s);
   const size_t old_bytes = CAPACITY_STACK (*s);
@@ -16,7 +18,7 @@
     while (!kissat_aligned_word (new_bytes))
       new_bytes <<= 1;
   }
-  s->begin = kissat_realloc (solver, s->begin, old_bytes, new_bytes);
+  s->begin = (char *) kissat_realloc (solver, s->begin, old_bytes, new_bytes);
   s->allocated = s->begin + new_bytes;
   s->end = s->begin + size;
 }
@@ -43,9 +45,11 @@
   if (new_bytes_capacity == old_bytes_capacity)
     return;
   assert (new_bytes_capacity < old_bytes_capacity);
-  s->begin = kissat_realloc (solver, s->begin, old_bytes_capacity,
-                             new_bytes_capacity);
+  s->begin = (char *) kissat_realloc (solver, s->begin, old_bytes_capacity,
+                                      new_bytes_capacity);
   s->allocated = s->begin + new_bytes_capacity;
   s->end = s->begin + old_bytes_size;
   assert (s->end <= s->allocated);
 }
+
+} // namespace kissat4
diff -Naur solvers/kissat4/stack.h solvers/kissat4/stack.h
--- solvers/kissat4/stack.h	1970-01-01 03:00:00.000000000 +0300
+++ solvers/kissat4/stack.h	2024-10-31 01:54:52.201969014 +0300
@@ -0,0 +1,140 @@
+#ifndef _kissat4_stack_h_INCLUDED
+#define _kissat4_stack_h_INCLUDED
+
+#include <stdlib.h>
+
+#define STACK(TYPE) \
+  struct { \
+    TYPE *begin; \
+    TYPE *end; \
+    TYPE *allocated; \
+  }
+
+#define FULL_STACK(S) ((S).end == (S).allocated)
+#define EMPTY_STACK(S) ((S).begin == (S).end)
+#define SIZE_STACK(S) ((size_t) ((S).end - (S).begin))
+#define CAPACITY_STACK(S) ((size_t) ((S).allocated - (S).begin))
+
+#define INIT_STACK(S) \
+  do { \
+    (S).begin = (S).end = (S).allocated = 0; \
+  } while (0)
+
+#define TOP_STACK(S) (END_STACK (S)[assert (!EMPTY_STACK (S)), -1])
+
+#define PEEK_STACK(S, N) \
+  (BEGIN_STACK (S)[assert ((N) < SIZE_STACK (S)), (N)])
+
+#define POKE_STACK(S, N, E) \
+  do { \
+    PEEK_STACK (S, N) = (E); \
+  } while (0)
+
+#define POP_STACK(S) (assert (!EMPTY_STACK (S)), *--(S).end)
+
+#define ENLARGE_STACK(S) \
+  do { \
+    assert (FULL_STACK (S)); \
+    kissat_stack_enlarge (solver, (chars *) &(S), sizeof *(S).begin); \
+  } while (0)
+
+#define SHRINK_STACK(S) \
+  do { \
+    if (!FULL_STACK (S)) \
+      kissat_shrink_stack (solver, (chars *) &(S), sizeof *(S).begin); \
+  } while (0)
+
+#define PUSH_STACK(S, E) \
+  do { \
+    if (FULL_STACK (S)) \
+      ENLARGE_STACK (S); \
+    *(S).end++ = (E); \
+  } while (0)
+
+#define BEGIN_STACK(S) (S).begin
+
+#define END_STACK(S) (S).end
+
+#define CLEAR_STACK(S) \
+  do { \
+    (S).end = (S).begin; \
+  } while (0)
+
+#define RESIZE_STACK(S, NEW_SIZE) \
+  do { \
+    const size_t TMP_NEW_SIZE = (NEW_SIZE); \
+    assert (TMP_NEW_SIZE <= SIZE_STACK (S)); \
+    (S).end = (S).begin + TMP_NEW_SIZE; \
+  } while (0)
+
+#define SET_END_OF_STACK(S, P) \
+  do { \
+    assert (BEGIN_STACK (S) <= (P)); \
+    assert ((P) <= END_STACK (S)); \
+    if ((P) == END_STACK (S)) \
+      break; \
+    (S).end = (P); \
+  } while (0)
+
+#define RELEASE_STACK(S) \
+  do { \
+    DEALLOC ((S).begin, CAPACITY_STACK (S)); \
+    INIT_STACK (S); \
+  } while (0)
+
+#define REMOVE_STACK(T, S, E) \
+  do { \
+    assert (!EMPTY_STACK (S)); \
+    T *END_REMOVE_STACK = END_STACK (S); \
+    T *P_REMOVE_STACK = BEGIN_STACK (S); \
+    while (*P_REMOVE_STACK != (E)) { \
+      P_REMOVE_STACK++; \
+      assert (P_REMOVE_STACK != END_REMOVE_STACK); \
+    } \
+    P_REMOVE_STACK++; \
+    while (P_REMOVE_STACK != END_REMOVE_STACK) { \
+      P_REMOVE_STACK[-1] = *P_REMOVE_STACK; \
+      P_REMOVE_STACK++; \
+    } \
+    (S).end--; \
+  } while (0)
+
+#define REVERSE_STACK(T, S) \
+  do { \
+    if (SIZE_STACK (S) < 2) \
+      break; \
+    T *HEAD = (S).begin, *TAIL = (S).end - 1; \
+    while (HEAD < TAIL) { \
+      T TMP = *HEAD; \
+      *HEAD++ = *TAIL; \
+      *TAIL-- = TMP; \
+    } \
+  } while (0)
+
+#define all_stack(T, E, S) \
+  T E, *E##_PTR = BEGIN_STACK (S), *const E##_END = END_STACK (S); \
+  E##_PTR != E##_END && (E = *E##_PTR, true); \
+  ++E##_PTR
+
+#define all_pointers(T, E, S) \
+  T *E, *const *E##_PTR = BEGIN_STACK (S), \
+               *const *const E##_END = END_STACK (S); \
+  E##_PTR != E##_END && (E = *E##_PTR, true); \
+  ++E##_PTR
+
+// clang-format off
+
+typedef STACK (char) chars;
+typedef STACK (int) ints;
+typedef STACK (size_t) sizes;
+typedef STACK (unsigned) unsigneds;
+
+// clang-format on
+
+struct kissat;
+
+void kissat_stack_enlarge (struct kissat *, chars *,
+                           size_t size_of_element);
+void kissat_shrink_stack (struct kissat *, chars *, size_t size_of_element);
+
+#endif
diff -Naur solvers/kissat4/stack.hh solvers/kissat4/stack.hh
--- solvers/kissat4/stack.hh	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/stack.hh	2024-10-31 01:54:52.201969014 +0300
@@ -1,5 +1,5 @@
-#ifndef _stack_h_INCLUDED
-#define _stack_h_INCLUDED
+#ifndef _kissat4_stack_h_INCLUDED
+#define _kissat4_stack_h_INCLUDED
 
 #include <stdlib.h>
 
@@ -122,6 +122,8 @@
   E##_PTR != E##_END && (E = *E##_PTR, true); \
   ++E##_PTR
 
+namespace kissat4 {
+
 // clang-format off
 
 typedef STACK (char) chars;
@@ -137,4 +139,6 @@
                            size_t size_of_element);
 void kissat_shrink_stack (struct kissat *, chars *, size_t size_of_element);
 
+} // namespace kissat4
+
 #endif
diff -Naur solvers/kissat4/statistics.cc solvers/kissat4/statistics.cc
--- solvers/kissat4/statistics.cc	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/statistics.cc	2024-10-31 01:54:52.201969014 +0300
@@ -1,18 +1,20 @@
 #if !defined(QUIET) || !defined(NDEBUG)
-#include "internal.h"
+#include "kissat4/internal.hh"
 #endif
 
 #ifndef QUIET
 
-#include "resources.h"
-#include "tiers.h"
-#include "utilities.h"
+#include "kissat4/resources.hh"
+#include "kissat4/tiers.hh"
+#include "kissat4/utilities.hh"
 
 #include <inttypes.h>
 #include <stdbool.h>
 #include <stdio.h>
 #include <string.h>
 
+namespace kissat4 {
+
 void kissat_print_glue_usage (kissat *solver) {
   const int64_t stable = solver->statistics.clauses_used_stable;
   const int64_t focused = solver->statistics.clauses_used_focused;
@@ -331,7 +333,7 @@
 #define COUNTER(NAME,VERBOSE,OTHER,UNITS,TYPE) \
   if (verbose || !VERBOSE || (VERBOSE == 1 && statistics->NAME)) \
     PRINT_STAT (#NAME, statistics->NAME, OTHER(NAME), UNITS, TYPE);
-#define IGNORE(...)
+#define KISSAT_IGNORE(...)
 
   METRICS_COUNTERS_AND_STATISTICS
 
@@ -344,15 +346,23 @@
 
 // clang-format on
 
+} // namespace kissat4
+
 #elif defined(NDEBUG)
+namespace kissat4 {
+
 int kissat_statistics_dummy_to_avoid_warning;
+
+} // namespace kissat4
 #endif
 
 /*------------------------------------------------------------------------*/
 
 #ifndef NDEBUG
 
-#include "inlinevector.h"
+#include "kissat4/inlinevector.hh"
+
+namespace kissat4 {
 
 void kissat_check_statistics (kissat *solver) {
   if (solver->inconsistent)
@@ -411,4 +421,6 @@
 #endif
 }
 
+} // namespace kissat4
+
 #endif
diff -Naur solvers/kissat4/statistics.hh solvers/kissat4/statistics.hh
--- solvers/kissat4/statistics.hh	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/statistics.hh	2024-10-31 01:54:52.201969014 +0300
@@ -1,9 +1,11 @@
-#ifndef _statistics_h_INCLUDED
-#define _statistics_h_INCLUDED
+#ifndef _kissat4_statistics_h_INCLUDED
+#define _kissat4_statistics_h_INCLUDED
 
 #include <stdbool.h>
 #include <stdint.h>
 
+namespace kissat4 {
+
 // clang-format off
 
 #define METRICS_COUNTERS_AND_STATISTICS \
@@ -293,13 +295,13 @@
 
 #elif STATISTICS
 
-#define METRIC IGNORE
+#define METRIC KISSAT_IGNORE
 #define STATISTIC COUNTER
 
 #else
 
-#define METRIC IGNORE
-#define STATISTIC IGNORE
+#define METRIC KISSAT_IGNORE
+#define STATISTIC KISSAT_IGNORE
 
 #endif
 /*------------------------------------------------------------------------*/
@@ -313,12 +315,12 @@
 {
 #define COUNTER(NAME,VERBOSE,OTHER,UNITS,TYPE) \
   uint64_t NAME;
-#define IGNORE(...)
+#define KISSAT_IGNORE(...)
 
   METRICS_COUNTERS_AND_STATISTICS
 
 #undef COUNTER
-#undef IGNORE
+#undef KISSAT_IGNORE
 
   struct {
     uint64_t glue[MAX_GLUE_USED + 1];
@@ -369,7 +371,7 @@
 
 /*------------------------------------------------------------------------*/
 
-#define IGNORE(NAME, VERBOSE, OTHER, UNITS, TYPE) \
+#define KISSAT_IGNORE(NAME, VERBOSE, OTHER, UNITS, TYPE) \
 \
   static inline void kissat_inc_##NAME (statistics *statistics) { \
     (void) statistics; \
@@ -401,7 +403,7 @@
 METRICS_COUNTERS_AND_STATISTICS
 
 #undef COUNTER
-#undef IGNORE
+#undef KISSAT_IGNORE
 
 // clang-format on
 /*------------------------------------------------------------------------*/
@@ -464,4 +466,6 @@
 
 #endif
 
+} // namespace kissat4
+
 #endif
diff -Naur solvers/kissat4/strengthen.cc solvers/kissat4/strengthen.cc
--- solvers/kissat4/strengthen.cc	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/strengthen.cc	2024-10-31 01:54:52.201969014 +0300
@@ -1,7 +1,9 @@
-#include "strengthen.h"
-#include "collect.h"
-#include "inline.h"
-#include "promote.h"
+#include "kissat4/strengthen.hh"
+#include "kissat4/collect.hh"
+#include "kissat4/inline.hh"
+#include "kissat4/promote.hh"
+
+namespace kissat4 {
 
 static clause *large_on_the_fly_strengthen (kissat *solver, clause *c,
                                             unsigned lit) {
@@ -185,3 +187,5 @@
   assert (statistics->clauses_redundant > 0);
   statistics->clauses_redundant--;
 }
+
+} // namespace kissat4
diff -Naur solvers/kissat4/strengthen.hh solvers/kissat4/strengthen.hh
--- solvers/kissat4/strengthen.hh	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/strengthen.hh	2024-10-31 01:54:52.201969014 +0300
@@ -1,8 +1,10 @@
-#ifndef _strengthen_h_INCLUDED
-#define _strengthen_h_INCLUDED
+#ifndef _kissat4_strengthen_h_INCLUDED
+#define _kissat4_strengthen_h_INCLUDED
 
 #include <stdbool.h>
 
+namespace kissat4 {
+    
 struct clause;
 struct kissat;
 
@@ -14,4 +16,6 @@
 
 bool issat_strengthen_clause (struct kissat *, struct clause *, unsigned);
 
+} // namespace kissat4
+
 #endif
diff -Naur solvers/kissat4/substitute.cc solvers/kissat4/substitute.cc
--- solvers/kissat4/substitute.cc	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/substitute.cc	2024-10-31 01:54:52.201969014 +0300
@@ -1,16 +1,18 @@
-#include "substitute.h"
-#include "allocate.h"
-#include "backtrack.h"
-#include "inline.h"
-#include "print.h"
-#include "proprobe.h"
-#include "report.h"
-#include "terminate.h"
-#include "trail.h"
-#include "weaken.h"
+#include "kissat4/substitute.hh"
+#include "kissat4/allocate.hh"
+#include "kissat4/backtrack.hh"
+#include "kissat4/inline.hh"
+#include "kissat4/print.hh"
+#include "kissat4/proprobe.hh"
+#include "kissat4/report.hh"
+#include "kissat4/terminate.hh"
+#include "kissat4/trail.hh"
+#include "kissat4/weaken.hh"
 
 #include <string.h>
 
+namespace kissat4 {
+
 static void assign_and_propagate_units (kissat *solver, unsigneds *units) {
   if (EMPTY_STACK (*units))
     return;
@@ -37,8 +39,8 @@
 
 static void determine_representatives (kissat *solver, unsigned *repr) {
   size_t bytes = LITS * sizeof (unsigned);
-  unsigned *mark = kissat_calloc (solver, LITS, sizeof *mark);
-  unsigned *reach = kissat_malloc (solver, LITS * sizeof *reach);
+  unsigned *mark = (unsigned*) kissat_calloc (solver, LITS, sizeof *mark);
+  unsigned *reach = (unsigned*) kissat_malloc (solver, LITS * sizeof *reach);
   watches *all_watches = solver->watches;
   const flags *const flags = solver->flags;
   unsigned reached = 0;
@@ -206,7 +208,7 @@
                                               unsigned *repr) {
   if (solver->inconsistent)
     return 0;
-  bool *eliminate = kissat_calloc (solver, VARS, sizeof *eliminate);
+  bool *eliminate = (bool*) kissat_calloc (solver, VARS, sizeof *eliminate);
   for (all_variables (idx)) {
     if (!ACTIVE (idx))
       continue;
@@ -545,7 +547,7 @@
   assert (!solver->inconsistent);
   const unsigned active = solver->active;
   size_t bytes = LITS * sizeof (unsigned);
-  unsigned *repr = kissat_malloc (solver, bytes);
+  unsigned *repr = (unsigned*) kissat_malloc (solver, bytes);
   memset (repr, 0xff, bytes);
   determine_representatives (solver, repr);
   bool *eliminate = add_representative_equivalences (solver, repr);
@@ -615,3 +617,5 @@
     return;
   substitute_rounds (solver, complete);
 }
+
+} // namespace kissat4
diff -Naur solvers/kissat4/substitute.hh solvers/kissat4/substitute.hh
--- solvers/kissat4/substitute.hh	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/substitute.hh	2024-10-31 01:54:52.201969014 +0300
@@ -1,10 +1,14 @@
-#ifndef _substitute_h_INCLUDED
-#define _substitute_h_INCLUDED
+#ifndef _kissat4_substitute_h_INCLUDED
+#define _kissat4_substitute_h_INCLUDED
 
 #include <stdbool.h>
 
+namespace kissat4 {
+
 struct kissat;
 
 void kissat_substitute (struct kissat *, bool complete);
 
+} // namespace kissat4
+
 #endif
diff -Naur solvers/kissat4/sweep.cc solvers/kissat4/sweep.cc
--- solvers/kissat4/sweep.cc	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/sweep.cc	2024-10-31 01:54:52.201969014 +0300
@@ -1,20 +1,22 @@
-#include "sweep.h"
-#include "dense.h"
-#include "inline.h"
-#include "kitten.h"
-#include "logging.h"
-#include "print.h"
-#include "promote.h"
-#include "propdense.h"
-#include "proprobe.h"
-#include "random.h"
-#include "rank.h"
-#include "report.h"
-#include "terminate.h"
+#include "kissat4/sweep.hh"
+#include "kissat4/dense.hh"
+#include "kissat4/inline.hh"
+#include "kissat4/kitten.hh"
+#include "kissat4/logging.hh"
+#include "kissat4/print.hh"
+#include "kissat4/promote.hh"
+#include "kissat4/propdense.hh"
+#include "kissat4/proprobe.hh"
+#include "kissat4/random.hh"
+#include "kissat4/rank.hh"
+#include "kissat4/report.hh"
+#include "kissat4/terminate.hh"
 
 #include <inttypes.h>
 #include <string.h>
 
+namespace kissat4 {
+
 struct sweeper {
   kissat *solver;
   unsigned *depths;
@@ -310,7 +312,7 @@
 
 static void save_core_clause (void *state, bool learned, size_t size,
                               const unsigned *lits) {
-  sweeper *sweeper = state;
+  sweeper *sweeper = (struct sweeper*) state;
   kissat *solver = sweeper->solver;
   if (solver->inconsistent)
     return;
@@ -875,8 +877,8 @@
         REMOVE_CHECKER_BINARY (lit, other);
         DELETE_BINARY_FROM_PROOF (lit, other);
         PUSH_STACK (*delayed, head.raw);
-        watch src = {.raw = head.raw};
-        watch dst = {.raw = head.raw};
+        watch src = {head.raw};
+        watch dst = {head.raw};
         src.binary.lit = lit;
         dst.binary.lit = repr;
         watches *other_watches = &WATCHES (other);
@@ -968,7 +970,7 @@
                   LOGLIT (second));
           assert (first == repr || second == repr);
           const unsigned other = first ^ second ^ repr;
-          const watch src = {.raw = head.raw};
+          const watch src = {head.raw};
           watch dst = kissat_binary_watch (repr);
           watches *other_watches = &WATCHES (other);
           kissat_substitute_large_watch (solver, other_watches, src, dst);
@@ -1027,7 +1029,7 @@
     const unsigned *const begin_delayed = BEGIN_STACK (*delayed);
     const unsigned *const end_delayed = END_STACK (*delayed);
     for (const unsigned *p = begin_delayed; p != end_delayed; p++) {
-      const watch head = {.raw = *p};
+      const watch head = {*p};
       watches *repr_watches = &WATCHES (repr);
       PUSH_WATCHES (*repr_watches, head);
     }
@@ -1722,3 +1724,5 @@
   STOP (sweep);
   return eliminated;
 }
+
+} // namespace kissat4
diff -Naur solvers/kissat4/sweep.hh solvers/kissat4/sweep.hh
--- solvers/kissat4/sweep.hh	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/sweep.hh	2024-10-31 01:54:52.201969014 +0300
@@ -1,9 +1,13 @@
-#ifndef _sweep_h_INCLUDED
-#define _sweep_h_INCLUDED
+#ifndef _kissat4_sweep_h_INCLUDED
+#define _kissat4_sweep_h_INCLUDED
 
 #include <stdbool.h>
 
+namespace kissat4 {
+
 struct kissat;
 bool kissat_sweep (struct kissat *);
 
+} // namespace kissat4
+
 #endif
diff -Naur solvers/kissat4/terminate.cc solvers/kissat4/terminate.cc
--- solvers/kissat4/terminate.cc	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/terminate.cc	2024-10-31 01:54:52.201969014 +0300
@@ -1,5 +1,7 @@
-#include "terminate.h"
-#include "print.h"
+#include "kissat4/terminate.hh"
+#include "kissat4/print.hh"
+
+namespace kissat4 {
 
 #ifndef QUIET
 
@@ -13,3 +15,5 @@
 #else
 int kissat_terminate_dummy_to_avoid_warning;
 #endif
+
+} // namespace kissat4
diff -Naur solvers/kissat4/terminate.hh solvers/kissat4/terminate.hh
--- solvers/kissat4/terminate.hh	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/terminate.hh	2024-10-31 01:54:52.201969014 +0300
@@ -1,7 +1,9 @@
-#ifndef _terminate_h_INCLUDED
-#define _terminate_h_INCLUDED
+#ifndef _kissat4_terminate_h_INCLUDED
+#define _kissat4_terminate_h_INCLUDED
 
-#include "internal.h"
+#include "kissat4/internal.hh"
+
+namespace kissat4 {
 
 #ifndef QUIET
 void kissat_report_termination (kissat *, const char *name,
@@ -83,4 +85,6 @@
 #define walk_terminated_1 42
 #define warmup_terminated_1 43
 
+} // namespace kissat4
+
 #endif
diff -Naur solvers/kissat4/tiers.cc solvers/kissat4/tiers.cc
--- solvers/kissat4/tiers.cc	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/tiers.cc	2024-10-31 01:54:52.201969014 +0300
@@ -1,7 +1,9 @@
-#include "tiers.h"
-#include "internal.h"
-#include "logging.h"
-#include "print.h"
+#include "kissat4/tiers.hh"
+#include "kissat4/internal.hh"
+#include "kissat4/logging.hh"
+#include "kissat4/print.hh"
+
+namespace kissat4 {
 
 static void compute_tier_limits (kissat *solver, bool stable,
                                  unsigned *tier1_ptr, unsigned *tier2_ptr) {
@@ -159,3 +161,5 @@
       break;
   }
 }
+
+} // namespace kissat4
diff -Naur solvers/kissat4/tiers.hh solvers/kissat4/tiers.hh
--- solvers/kissat4/tiers.hh	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/tiers.hh	2024-10-31 01:54:52.201969014 +0300
@@ -1,12 +1,16 @@
-#ifndef _tiers_h_INCLUDED
-#define _tiers_h_INCLUDED
+#ifndef _kissat4_tiers_h_INCLUDED
+#define _kissat4_tiers_h_INCLUDED
 
 #include <stdbool.h>
 
+namespace kissat4 {
+
 struct kissat;
 
 void kissat_compute_and_set_tier_limits (struct kissat *);
 void kissat_print_tier_usage_statistics (struct kissat *solver,
                                          bool stable);
 
+} // namespace kissat4
+
 #endif
diff -Naur solvers/kissat4/trail.cc solvers/kissat4/trail.cc
--- solvers/kissat4/trail.cc	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/trail.cc	2024-10-31 01:54:52.201969014 +0300
@@ -1,7 +1,9 @@
-#include "trail.h"
-#include "backtrack.h"
-#include "inline.h"
-#include "propsearch.h"
+#include "kissat4/trail.hh"
+#include "kissat4/backtrack.hh"
+#include "kissat4/inline.hh"
+#include "kissat4/propsearch.hh"
+
+namespace kissat4 {
 
 void kissat_flush_trail (kissat *solver) {
   assert (!solver->level);
@@ -90,3 +92,5 @@
   }
   LOG ("unmarked %u reason clauses", reasons);
 }
+
+} // namespace kissat4
diff -Naur solvers/kissat4/trail.hh solvers/kissat4/trail.hh
--- solvers/kissat4/trail.hh	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/trail.hh	2024-10-31 01:54:52.201969014 +0300
@@ -1,10 +1,12 @@
-#ifndef _trail_h_INLCUDED
-#define _trail_h_INLCUDED
+#ifndef _kissat4_trail_h_INCLUDED
+#define _kissat4_trail_h_INCLUDED
 
-#include "reference.h"
+#include "kissat4/reference.hh"
 
 #include <stdbool.h>
 
+namespace kissat4 {
+
 struct kissat;
 
 void kissat_flush_trail (struct kissat *);
@@ -13,4 +15,6 @@
 void kissat_unmark_reason_clauses (struct kissat *, reference start);
 void kissat_mark_reason_clauses (struct kissat *, reference start);
 
+} // namespace kissat4
+
 #endif
diff -Naur solvers/kissat4/transitive.cc solvers/kissat4/transitive.cc
--- solvers/kissat4/transitive.cc	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/transitive.cc	2024-10-31 01:54:52.201969014 +0300
@@ -1,19 +1,21 @@
-#include "transitive.h"
-#include "allocate.h"
-#include "analyze.h"
-#include "heap.h"
-#include "inline.h"
-#include "inlinevector.h"
-#include "logging.h"
-#include "print.h"
-#include "proprobe.h"
-#include "report.h"
-#include "sort.h"
-#include "terminate.h"
-#include "trail.h"
+#include "kissat4/transitive.hh"
+#include "kissat4/allocate.hh"
+#include "kissat4/analyze.hh"
+#include "kissat4/heap.hh"
+#include "kissat4/inline.hh"
+#include "kissat4/inlinevector.hh"
+#include "kissat4/logging.hh"
+#include "kissat4/print.hh"
+#include "kissat4/proprobe.hh"
+#include "kissat4/report.hh"
+#include "kissat4/sort.hh"
+#include "kissat4/terminate.hh"
+#include "kissat4/trail.hh"
 
 #include <stddef.h>
 
+namespace kissat4 {
+
 static void transitive_assign (kissat *solver, unsigned lit) {
   LOG ("transitive assign %s", LOGLIT (lit));
   value *values = solver->values;
@@ -387,3 +389,5 @@
   (void) success;
 #endif
 }
+
+} // namespace kissat4
diff -Naur solvers/kissat4/transitive.hh solvers/kissat4/transitive.hh
--- solvers/kissat4/transitive.hh	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/transitive.hh	2024-10-31 01:54:52.201969014 +0300
@@ -1,8 +1,12 @@
-#ifndef _transitive_h_INCLUDED
-#define _transitive_h_INCLUDED
+#ifndef _kissat4_transitive_h_INCLUDED
+#define _kissat4_transitive_h_INCLUDED
+
+namespace kissat4 {
 
 struct kissat;
 
 void kissat_transitive_reduction (struct kissat *);
 
+} // namespace kissat4
+
 #endif
diff -Naur solvers/kissat4/utilities.cc solvers/kissat4/utilities.cc
--- solvers/kissat4/utilities.cc	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/utilities.cc	2024-10-31 01:54:52.201969014 +0300
@@ -1,7 +1,9 @@
-#include "utilities.h"
+#include "kissat4/utilities.hh"
 
 #include <string.h>
 
+namespace kissat4 {
+
 bool kissat_has_suffix (const char *str, const char *suffix) {
   const char *p = str;
   while (*p)
@@ -14,3 +16,5 @@
       return false;
   return q == suffix;
 }
+
+} // namespace kissat4
\ No newline at end of file
diff -Naur solvers/kissat4/utilities.hh solvers/kissat4/utilities.hh
--- solvers/kissat4/utilities.hh	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/utilities.hh	2024-10-31 01:54:52.201969014 +0300
@@ -1,11 +1,55 @@
-#ifndef _utilities_h_INCLUDED
-#define _utilities_h_INCLUDED
+#ifndef _kissat4_utilities_h_INCLUDED
+#define _kissat4_utilities_h_INCLUDED
 
 #include <assert.h>
 #include <stdbool.h>
 #include <stdint.h>
 #include <stdlib.h>
 
+namespace kissat4 {
+
+#ifdef _MSC_VER
+#include <intrin.h>
+
+static inline int __builtin_ctz(unsigned x)
+{
+    return (int)_tzcnt_u32(x);
+}
+
+static inline int __builtin_ctzll(unsigned long long x)
+{
+#ifdef _WIN64
+    return (int)_tzcnt_u64(x);
+#else
+    return !!unsigned(x) ? __builtin_ctz((unsigned)x) : 32 + __builtin_ctz((unsigned)(x >> 32));
+#endif
+}
+
+static inline int __builtin_ctzl(unsigned long x)
+{
+    return sizeof(x) == 8 ? __builtin_ctzll(x) : __builtin_ctz((unsigned)x);
+}
+
+static inline int __builtin_clz(unsigned x)
+{
+    return (int)_lzcnt_u32(x);
+}
+
+static inline int __builtin_clzll(unsigned long long x)
+{
+#ifdef _WIN64
+    return (int)_lzcnt_u64(x);
+#else
+    return !!unsigned(x >> 32) ? __builtin_clz((unsigned)(x >> 32)) : 32 + __builtin_clz((unsigned)x);
+#endif
+}
+
+static inline int __builtin_clzl(unsigned long x)
+{
+    return sizeof(x) == 8 ? __builtin_clzll(x) : __builtin_clz((unsigned)x);
+}
+#endif
+
 typedef uintptr_t word;
 typedef uintptr_t w2rd[2];
 
@@ -133,4 +177,6 @@
 
 #define ABS(A) (assert ((int) (A) != INT_MIN), (A) < 0 ? -(A) : (A))
 
+} // namespace kissat4
+
 #endif
diff -Naur solvers/kissat4/value.hh solvers/kissat4/value.hh
--- solvers/kissat4/value.hh	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/value.hh	2024-10-31 01:54:52.201969014 +0300
@@ -1,5 +1,5 @@
-#ifndef _value_h_INCLUDED
-#define _value_h_INCLUDED
+#ifndef _kissat4_value_h_INCLUDED
+#define _kissat4_value_h_INCLUDED
 
 typedef signed char value;
 typedef signed char mark;
diff -Naur solvers/kissat4/vector.cc solvers/kissat4/vector.cc
--- solvers/kissat4/vector.cc	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/vector.cc	2024-10-31 01:54:52.201969014 +0300
@@ -1,14 +1,16 @@
-#include "allocate.h"
-#include "collect.h"
-#include "error.h"
-#include "inlinevector.h"
-#include "logging.h"
-#include "print.h"
-#include "rank.h"
+#include "kissat4/allocate.hh"
+#include "kissat4/collect.hh"
+#include "kissat4/error.hh"
+#include "kissat4/inlinevector.hh"
+#include "kissat4/logging.hh"
+#include "kissat4/print.hh"
+#include "kissat4/rank.hh"
 
 #include <inttypes.h>
 #include <stddef.h>
 
+namespace kissat4 {
+
 #ifndef COMPACT
 
 static void fix_vector_pointers_after_moving_stack (kissat *solver,
@@ -167,7 +169,7 @@
   LOG ("defragmenting vectors size %zu capacity %zu usable %zu",
        size_vectors, CAPACITY_STACK (*stack), solver->vectors.usable);
   size_t bytes = size_unsorted * sizeof (unsigned);
-  unsigned *sorted = kissat_malloc (solver, bytes);
+  unsigned *sorted = (unsigned*) kissat_malloc (solver, bytes);
   unsigned size_sorted = 0;
   for (unsigned i = 0; i < size_unsorted; i++) {
     vector *vector = unsorted + i;
@@ -318,3 +320,5 @@
 }
 
 #endif
+
+} // namespace kissat4
diff -Naur solvers/kissat4/vector.hh solvers/kissat4/vector.hh
--- solvers/kissat4/vector.hh	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/vector.hh	2024-10-31 01:54:52.201969014 +0300
@@ -1,8 +1,8 @@
-#ifndef _vector_h_INCLUDED
-#define _vector_h_INCLUDED
+#ifndef _kissat4_vector_h_INCLUDED
+#define _kissat4_vector_h_INCLUDED
 
-#include "stack.h"
-#include "utilities.h"
+#include "kissat4/stack.hh"
+#include "kissat4/utilities.hh"
 
 #include <limits.h>
 
@@ -18,9 +18,15 @@
 
 #define MAX_SECTOR MAX_SIZE_T
 
+namespace kissat4 {
+
+#ifndef __cplusplus
+
 typedef struct vector vector;
 typedef struct vectors vectors;
 
+#endif
+
 struct vectors {
   unsigneds stack;
   size_t usable;
@@ -52,4 +58,6 @@
 void kissat_resize_vector (struct kissat *, vector *, size_t);
 void kissat_release_vectors (struct kissat *);
 
+} // namespace kissat4
+
 #endif
diff -Naur solvers/kissat4/vivify.cc solvers/kissat4/vivify.cc
--- solvers/kissat4/vivify.cc	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/vivify.cc	2024-10-31 01:54:52.201969014 +0300
@@ -1,26 +1,28 @@
-#include "vivify.h"
-#include "allocate.h"
-#include "backtrack.h"
-#include "collect.h"
-#include "colors.h"
-#include "decide.h"
-#include "deduce.h"
-#include "inline.h"
-#include "print.h"
-#include "promote.h"
-#include "proprobe.h"
-#include "rank.h"
-#include "report.h"
-#include "sort.h"
-#include "terminate.h"
-#include "tiers.h"
-#include "trail.h"
+#include "kissat4/vivify.hh"
+#include "kissat4/allocate.hh"
+#include "kissat4/backtrack.hh"
+#include "kissat4/collect.hh"
+#include "kissat4/colors.hh"
+#include "kissat4/decide.hh"
+#include "kissat4/deduce.hh"
+#include "kissat4/inline.hh"
+#include "kissat4/print.hh"
+#include "kissat4/promote.hh"
+#include "kissat4/proprobe.hh"
+#include "kissat4/rank.hh"
+#include "kissat4/report.hh"
+#include "kissat4/sort.hh"
+#include "kissat4/terminate.hh"
+#include "kissat4/tiers.hh"
+#include "kissat4/trail.hh"
 
-#include "cover.h"
+#include "kissat4/cover.hh"
 
 #include <inttypes.h>
 #include <string.h>
 
+namespace kissat4 {
+
 static inline bool more_occurrences (unsigned *counts, unsigned a,
                                      unsigned b) {
   const unsigned s = counts[a], t = counts[b];
@@ -166,7 +168,7 @@
 
 static void init_vivifier (kissat *solver, vivifier *vivifier) {
   vivifier->solver = solver;
-  vivifier->counts = kissat_calloc (solver, LITS, sizeof (unsigned));
+  vivifier->counts = (unsigned int*) kissat_calloc (solver, LITS, sizeof (unsigned));
   INIT_STACK (vivifier->schedule);
   INIT_STACK (vivifier->countrefs);
   INIT_STACK (vivifier->sorted);
@@ -381,10 +383,10 @@
     unsigned best = INVALID_LIT;
     unsigned best_count = 0;
     for (all_literals_in_clause (lit, c)) {
+      const unsigned lit_count = counts[lit];
       for (unsigned j = 0; j != i; j++)
         if (lits[j] == lit)
           goto CONTINUE_WITH_NEXT_LITERAL;
-      const unsigned lit_count = counts[lit];
       assert (lit_count);
       if (lit_count <= best_count)
         continue;
@@ -1478,3 +1480,5 @@
 #endif
   STOP (vivify);
 }
+
+} // namespace kissat4
diff -Naur solvers/kissat4/vivify.hh solvers/kissat4/vivify.hh
--- solvers/kissat4/vivify.hh	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/vivify.hh	2024-10-31 01:54:52.201969014 +0300
@@ -1,8 +1,12 @@
-#ifndef _vivify_h_INCLUDED
-#define _vivify_h_INCLUDED
+#ifndef _kissat4_vivify_h_INCLUDED
+#define _kissat4_vivify_h_INCLUDED
+
+namespace kissat4 {
 
 struct kissat;
 
 void kissat_vivify (struct kissat *);
 
+} // namespace kissat4
+
 #endif
diff -Naur solvers/kissat4/walk.cc solvers/kissat4/walk.cc
--- solvers/kissat4/walk.cc	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/walk.cc	2024-10-31 01:54:52.201969014 +0300
@@ -1,17 +1,19 @@
-#include "walk.h"
-#include "allocate.h"
-#include "decide.h"
-#include "dense.h"
-#include "inline.h"
-#include "phases.h"
-#include "print.h"
-#include "rephase.h"
-#include "report.h"
-#include "terminate.h"
-#include "warmup.h"
+#include "kissat4/walk.hh"
+#include "kissat4/allocate.hh"
+#include "kissat4/decide.hh"
+#include "kissat4/dense.hh"
+#include "kissat4/inline.hh"
+#include "kissat4/phases.hh"
+#include "kissat4/print.hh"
+#include "kissat4/rephase.hh"
+#include "kissat4/report.hh"
+#include "kissat4/terminate.hh"
+#include "kissat4/warmup.hh"
 
 #include <string.h>
 
+namespace kissat4 {
+
 typedef struct tagged tagged;
 typedef struct counter counter;
 typedef struct walker walker;
@@ -26,7 +28,7 @@
 
 static inline tagged make_tagged (bool binary, unsigned ref) {
   assert (ref <= MAX_WALK_REF);
-  tagged res = {.binary = binary, .ref = ref};
+  tagged res = {ref, binary};
   return res;
 }
 
@@ -172,7 +174,7 @@
   for (next = 1; next; next *= base)
     exponents++;
 
-  walker->table = kissat_malloc (solver, exponents * sizeof (double));
+  walker->table = (double*) kissat_malloc (solver, exponents * sizeof (double));
 
   unsigned i = 0;
   double epsilon;
@@ -198,7 +200,7 @@
   INC (walk_decisions);
   const flags *const flags = solver->flags;
   value *values = solver->values;
-  walker->best_values = kissat_calloc (solver, VARS, 1);
+  walker->best_values = (signed char*) kissat_calloc (solver, VARS, 1);
   value *best_values = walker->best_values;
 #ifndef QUIET
   unsigned imported = 0;
@@ -380,12 +382,12 @@
   walker->random = solver->random ^ solver->statistics.walks;
 
   walker->original_values = solver->values;
-  solver->values = kissat_calloc (solver, LITS, 1);
+  solver->values = (signed char*) kissat_calloc (solver, LITS, 1);
 
   import_decision_phases (walker);
 
-  walker->counters = kissat_malloc (solver, clauses * sizeof (counter));
-  walker->refs = kissat_malloc (solver, clauses * sizeof (tagged));
+  walker->counters = (counter*) kissat_malloc (solver, clauses * sizeof (counter));
+  walker->refs = (tagged*) kissat_malloc (solver, clauses * sizeof (tagged));
 
   assert (!walker->size);
   const unsigned counter_ref = connect_binary_counters (walker);
@@ -964,3 +966,5 @@
   walking_phase (solver);
   STOP_SIMPLIFIER_AND_RESUME_SEARCH (walking);
 }
+
+} // namespace kissat4
\ No newline at end of file
diff -Naur solvers/kissat4/walk.hh solvers/kissat4/walk.hh
--- solvers/kissat4/walk.hh	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/walk.hh	2024-10-31 01:54:52.201969014 +0300
@@ -1,11 +1,15 @@
-#ifndef _walk_h_INCLUDED
-#define _walk_h_INCLUDED
+#ifndef _kissat4_walk_h_INCLUDED
+#define _kissat4_walk_h_INCLUDED
 
 #include <stdbool.h>
 
+namespace kissat4 {
+
 struct kissat;
 
 bool kissat_walking (struct kissat *);
 void kissat_walk (struct kissat *);
 
+} // namespace kissat4
+
 #endif
diff -Naur solvers/kissat4/warmup.cc solvers/kissat4/warmup.cc
--- solvers/kissat4/warmup.cc	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/warmup.cc	2024-10-31 01:54:52.201969014 +0300
@@ -1,10 +1,12 @@
-#include "warmup.h"
-#include "backtrack.h"
-#include "decide.h"
-#include "internal.h"
-#include "print.h"
-#include "propbeyond.h"
-#include "terminate.h"
+#include "kissat4/warmup.hh"
+#include "kissat4/backtrack.hh"
+#include "kissat4/decide.hh"
+#include "kissat4/internal.hh"
+#include "kissat4/print.hh"
+#include "kissat4/propbeyond.hh"
+#include "kissat4/terminate.hh"
+
+namespace kissat4 {
 
 void kissat_warmup (kissat *solver) {
   assert (!solver->level);
@@ -52,3 +54,5 @@
   solver->warming = false;
   STOP (warmup);
 }
+
+} // namespace kissat4
diff -Naur solvers/kissat4/warmup.hh solvers/kissat4/warmup.hh
--- solvers/kissat4/warmup.hh	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/warmup.hh	2024-10-31 01:54:52.201969014 +0300
@@ -1,8 +1,12 @@
-#ifndef _warmup_h_INCLUDED
-#define _warmup_h_INCLUDED
+#ifndef _kissat4_warmup_h_INCLUDED
+#define _kissat4_warmup_h_INCLUDED
+
+namespace kissat4 {
 
 struct kissat;
 
 void kissat_warmup (struct kissat *);
 
+} // namespace kissat4
+
 #endif
diff -Naur solvers/kissat4/watch.cc solvers/kissat4/watch.cc
--- solvers/kissat4/watch.cc	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/watch.cc	2024-10-31 01:54:52.201969014 +0300
@@ -1,7 +1,9 @@
 #define INLINE_SORT
 
-#include "inline.h"
-#include "sort.c"
+#include "kissat4/inline.hh"
+#include "kissat4/sort.cc"
+
+namespace kissat4 {
 
 void kissat_remove_binary_watch (kissat *solver, watches *watches,
                                  unsigned lit) {
@@ -34,7 +36,7 @@
   assert (begin + 1 <= end);
   watches->end -= 1;
 #endif
-  const watch empty = {.raw = INVALID_VECTOR_ELEMENT};
+  const watch empty = {INVALID_VECTOR_ELEMENT};
   end[-1] = empty;
   assert (solver->vectors.usable < MAX_SECTOR - 1);
   solver->vectors.usable += 1;
@@ -71,7 +73,7 @@
   assert (begin + 2 <= end);
   watches->end -= 2;
 #endif
-  const watch empty = {.raw = INVALID_VECTOR_ELEMENT};
+  const watch empty = {INVALID_VECTOR_ELEMENT};
   end[-2] = end[-1] = empty;
   assert (solver->vectors.usable < MAX_SECTOR - 2);
   solver->vectors.usable += 2;
@@ -221,3 +223,5 @@
   LOG ("flushed %zu large clause references", flushed);
   (void) flushed;
 }
+
+} // namespace kissat4
diff -Naur solvers/kissat4/watch.hh solvers/kissat4/watch.hh
--- solvers/kissat4/watch.hh	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/watch.hh	2024-10-31 01:54:52.201969014 +0300
@@ -1,13 +1,15 @@
-#ifndef _watch_h_INCLUDED
-#define _watch_h_INCLUDED
+#ifndef _kissat4_watch_h_INCLUDED
+#define _kissat4_watch_h_INCLUDED
 
-#include "keatures.h"
-#include "reference.h"
-#include "stack.h"
-#include "vector.h"
+#include "kissat4/keatures.hh"
+#include "kissat4/reference.hh"
+#include "kissat4/stack.hh"
+#include "kissat4/vector.hh"
 
 #include <stdbool.h>
 
+namespace kissat4 {
+
 typedef union watch watch;
 
 typedef struct binary_tagged_literal watch_type;
@@ -173,4 +175,6 @@
 
 void kissat_connect_irredundant_large_clauses (struct kissat *);
 
+} // namespace kissat4
+
 #endif
diff -Naur solvers/kissat4/weaken.cc solvers/kissat4/weaken.cc
--- solvers/kissat4/weaken.cc	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/weaken.cc	2024-10-31 01:54:52.201969014 +0300
@@ -1,5 +1,7 @@
-#include "weaken.h"
-#include "inline.h"
+#include "kissat4/weaken.hh"
+#include "kissat4/inline.hh"
+
+namespace kissat4 {
 
 static void push_witness_literal (kissat *solver, unsigned ilit) {
   assert (!VALUE (ilit));
@@ -58,3 +60,5 @@
   LOGEXT (1, END_STACK (solver->extend) - 1,
           "pushed witness labelled unit clause at");
 }
+
+} // namespace kissat4
\ No newline at end of file
diff -Naur solvers/kissat4/weaken.hh solvers/kissat4/weaken.hh
--- solvers/kissat4/weaken.hh	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/weaken.hh	2024-10-31 01:54:52.201969014 +0300
@@ -1,5 +1,7 @@
-#ifndef _weaken_h_INCLUDED
-#define _weaken_h_INCLUDED
+#ifndef _kissat4_weaken_h_INCLUDED
+#define _kissat4_weaken_h_INCLUDED
+
+namespace kissat4 {
 
 struct clause;
 struct kissat;
@@ -8,4 +10,6 @@
 void kissat_weaken_binary (struct kissat *, unsigned lit, unsigned other);
 void kissat_weaken_clause (struct kissat *, unsigned lit, struct clause *);
 
+} // namespace kissat4
+
 #endif
diff -Naur solvers/kissat4/witness.cc solvers/kissat4/witness.cc
--- solvers/kissat4/witness.cc	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/witness.cc	2024-10-31 01:54:52.201969014 +0300
@@ -1,10 +1,12 @@
-#include "witness.h"
-#include "allocate.h"
-#include "internal.h"
+#include "kissat4/witness.hh"
+#include "kissat4/allocate.hh"
+#include "kissat4/internal.hh"
 
 #include <stdio.h>
 #include <string.h>
 
+namespace kissat4 {
+
 static void flush_buffer (chars *buffer) {
   fputs ("v", stdout);
   for (all_stack (char, ch, *buffer))
@@ -39,3 +41,5 @@
   flush_buffer (&buffer);
   RELEASE_STACK (buffer);
 }
+
+} // namespace kissat4
diff -Naur solvers/kissat4/witness.hh solvers/kissat4/witness.hh
--- solvers/kissat4/witness.hh	2024-09-12 13:25:21.000000000 +0300
+++ solvers/kissat4/witness.hh	2024-10-31 01:54:52.201969014 +0300
@@ -1,10 +1,14 @@
-#ifndef _witness_h_INCLUDED
-#define _witness_h_INCLUDED
+#ifndef _kissat4_witness_h_INCLUDED
+#define _kissat4_witness_h_INCLUDED
 
 #include <stdbool.h>
 
+namespace kissat4 {
+
 struct kissat;
 
 void kissat_print_witness (struct kissat *, int max_var, bool partial);
 
+} // namespace kissat4
+
 #endif
